// AUTOGENERATED. DO NOT EDIT.
// RUN `ruby src/modules/bb/steamworks/generate.rb` TO UPDATE.

typedef long long CSteamID;

typedef long long CGameID;

typedef unsigned char uint8;
typedef signed char int8;
typedef short int16;
typedef unsigned short uint16;
typedef int int32;
typedef unsigned int uint32;
typedef long long int64;
typedef unsigned long long uint64;
typedef long long lint64;
typedef unsigned long long ulint64;
typedef long long intp;
typedef unsigned long long uintp;
typedef unsigned char [8] Salt_t;
typedef unsigned long long GID_t;
typedef unsigned long long JobID_t;
typedef unsigned long long TxnID_t;
typedef unsigned int PackageId_t;
typedef unsigned int BundleId_t;
typedef unsigned int AppId_t;
typedef unsigned long long AssetClassId_t;
typedef unsigned int PhysicalItemId_t;
typedef unsigned int DepotId_t;
typedef unsigned int RTime32;
typedef unsigned int CellID_t;
typedef unsigned long long SteamAPICall_t;
typedef unsigned int AccountID_t;
typedef unsigned int PartnerId_t;
typedef unsigned long long ManifestId_t;
typedef unsigned long long SiteId_t;
typedef unsigned long long PartyBeaconID_t;
typedef unsigned int HAuthTicket;
typedef void (*)(const char *, const char *) PFNLegacyKeyRegistration;
typedef bool (*)() PFNLegacyKeyInstalled;
typedef void (*)(void *) PFNPreMinidumpCallback;
typedef void * BREAKPAD_HANDLE;
typedef int HSteamPipe;
typedef int HSteamUser;
typedef short FriendsGroupID_t;
typedef void * HServerListRequest;
typedef int HServerQuery;
typedef unsigned long long UGCHandle_t;
typedef unsigned long long PublishedFileUpdateHandle_t;
typedef unsigned long long PublishedFileId_t;
typedef unsigned long long UGCFileWriteStreamHandle_t;
typedef unsigned long long SteamLeaderboard_t;
typedef unsigned long long SteamLeaderboardEntries_t;
typedef unsigned int SNetSocket_t;
typedef unsigned int SNetListenSocket_t;
typedef unsigned int ScreenshotHandle;
typedef unsigned int HTTPRequestHandle;
typedef unsigned int HTTPCookieContainerHandle;
typedef unsigned long long InputHandle_t;
typedef unsigned long long InputActionSetHandle_t;
typedef unsigned long long InputDigitalActionHandle_t;
typedef unsigned long long InputAnalogActionHandle_t;
typedef unsigned long long ControllerHandle_t;
typedef unsigned long long ControllerActionSetHandle_t;
typedef unsigned long long ControllerDigitalActionHandle_t;
typedef unsigned long long ControllerAnalogActionHandle_t;
typedef unsigned long long UGCQueryHandle_t;
typedef unsigned long long UGCUpdateHandle_t;
typedef unsigned int HHTMLBrowser;
typedef unsigned long long SteamItemInstanceID_t;
typedef int SteamItemDef_t;
typedef int SteamInventoryResult_t;
typedef unsigned long long SteamInventoryUpdateHandle_t;
typedef unsigned int RemotePlaySessionID_t;
typedef unsigned int HSteamNetConnection;
typedef unsigned int HSteamListenSocket;
typedef unsigned int HSteamNetPollGroup;
typedef char [1024] SteamNetworkingErrMsg;
typedef unsigned int SteamNetworkingPOPID;
typedef long long SteamNetworkingMicroseconds;
typedef void (*)(ESteamNetworkingSocketsDebugOutputType, const char *) FSteamNetworkingSocketsDebugOutput;
enum ESteamIPType{};

enum EUniverse{};

enum EResult{};

enum EVoiceResult{};

enum EDenyReason{};

enum EBeginAuthSessionResult{};

enum EAuthSessionResponse{};

enum EUserHasLicenseForAppResult{};

enum EAccountType{};

enum EAppReleaseState{};

enum EAppOwnershipFlags{};

enum EAppType{};

enum ESteamUserStatType{};

enum EChatEntryType{};

enum EChatRoomEnterResponse{};

enum EChatSteamIDInstanceFlags{};

enum EMarketingMessageFlags{};

enum ENotificationPosition{};

enum EBroadcastUploadResult{};

enum ELaunchOptionType{};

enum EVRHMDType{};

enum EMarketNotAllowedReasonFlags{};

enum EDurationControlProgress{};

enum EDurationControlNotification{};

enum EGameSearchErrorCode_t{};

enum EPlayerResult_t{};

enum ESteamIPv6ConnectivityProtocol{};

enum ESteamIPv6ConnectivityState{};

enum EFriendRelationship{};

enum EPersonaState{};

enum EFriendFlags{};

enum EUserRestriction{};

enum EOverlayToStoreFlag{};

enum EActivateGameOverlayToWebPageMode{};

enum EPersonaChange{};

enum ESteamAPICallFailure{};

enum EGamepadTextInputMode{};

enum EGamepadTextInputLineMode{};

enum ECheckFileSignature{};

enum EMatchMakingServerResponse{};

enum ELobbyType{};

enum ELobbyComparison{};

enum ELobbyDistanceFilter{};

enum EChatMemberStateChange{};

enum ESteamPartyBeaconLocationType{};

enum ESteamPartyBeaconLocationData{};

enum ERemoteStoragePlatform{};

enum ERemoteStoragePublishedFileVisibility{};

enum EWorkshopFileType{};

enum EWorkshopVote{};

enum EWorkshopFileAction{};

enum EWorkshopEnumerationType{};

enum EWorkshopVideoProvider{};

enum EUGCReadAction{};

enum ELeaderboardDataRequest{};

enum ELeaderboardSortMethod{};

enum ELeaderboardDisplayType{};

enum ELeaderboardUploadScoreMethod{};

enum ERegisterActivationCodeResult{};

enum EP2PSessionError{};

enum EP2PSend{};

enum ESNetSocketState{};

enum ESNetSocketConnectionType{};

enum EVRScreenshotType{};

enum AudioPlayback_Status{};

enum EHTTPMethod{};

enum EHTTPStatusCode{};

enum EInputSourceMode{};

enum EInputActionOrigin{};

enum EXboxOrigin{};

enum ESteamControllerPad{};

enum ESteamInputType{};

enum ESteamInputLEDFlag{};

enum EControllerActionOrigin{};

enum ESteamControllerLEDFlag{};

enum EUGCMatchingUGCType{};

enum EUserUGCList{};

enum EUserUGCListSortOrder{};

enum EUGCQuery{};

enum EItemUpdateStatus{};

enum EItemState{};

enum EItemStatistic{};

enum EItemPreviewType{};

enum ESteamItemFlags{};

enum ESteamTVRegionBehavior{};

enum EParentalFeature{};

enum ESteamDeviceFormFactor{};

enum ESteamNetworkingAvailability{};

enum ESteamNetworkingIdentityType{};

enum ESteamNetworkingConnectionState{};

enum ESteamNetConnectionEnd{};

enum ESteamNetworkingConfigScope{};

enum ESteamNetworkingConfigDataType{};

enum ESteamNetworkingConfigValue{};

enum ESteamNetworkingGetConfigValueResult{};

enum ESteamNetworkingSocketsDebugOutputType{};

enum EServerMode{};

struct SteamIPAddress_t{};

struct FriendGameInfo_t{};

struct FriendSessionStateInfo_t{};

struct MatchMakingKeyValuePair_t{};

struct servernetadr_t{};

struct gameserveritem_t{};

struct SteamPartyBeaconLocation_t{};

struct SteamParamStringArray_t{};

struct LeaderboardEntry_t{};

struct P2PSessionState_t{};

struct InputAnalogActionData_t{};

struct InputDigitalActionData_t{};

struct InputMotionData_t{};

struct SteamUGCDetails_t{};

struct SteamItemDetails_t{};

struct SteamTVRegion_t{};

struct SteamNetworkingIPAddr{};

struct SteamNetworkingIdentity{};

struct SteamNetConnectionInfo_t{};

struct SteamNetworkingQuickConnectionStatus{};

struct SteamNetworkingMessage_t{};

struct SteamNetworkPingLocation_t{};

struct SteamNetworkingConfigValue_t{};

struct SteamDatagramHostedAddress{};

struct SteamDatagramGameCoordinatorServerLogin{};

class ISteamClient;
void bbSteamAPI_ISteamClient_CreateSteamPipe(){
}

void bbSteamAPI_ISteamClient_BReleaseSteamPipe(HSteamPipe hSteamPipe){
}

void bbSteamAPI_ISteamClient_ConnectToGlobalUser(HSteamPipe hSteamPipe){
}

void bbSteamAPI_ISteamClient_CreateLocalUser(HSteamPipe * phSteamPipe, EAccountType eAccountType){
}

void bbSteamAPI_ISteamClient_ReleaseUser(HSteamPipe hSteamPipe, HSteamUser hUser){
}

void bbSteamAPI_ISteamClient_GetISteamUser(HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char * pchVersion){
}

void bbSteamAPI_ISteamClient_GetISteamGameServer(HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char * pchVersion){
}

void bbSteamAPI_ISteamClient_SetLocalIPBinding(const SteamIPAddress_t & unIP, uint16 usPort){
}

void bbSteamAPI_ISteamClient_GetISteamFriends(HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char * pchVersion){
}

void bbSteamAPI_ISteamClient_GetISteamUtils(HSteamPipe hSteamPipe, const char * pchVersion){
}

void bbSteamAPI_ISteamClient_GetISteamMatchmaking(HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char * pchVersion){
}

void bbSteamAPI_ISteamClient_GetISteamMatchmakingServers(HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char * pchVersion){
}

void bbSteamAPI_ISteamClient_GetISteamGenericInterface(HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char * pchVersion){
}

void bbSteamAPI_ISteamClient_GetISteamUserStats(HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char * pchVersion){
}

void bbSteamAPI_ISteamClient_GetISteamGameServerStats(HSteamUser hSteamuser, HSteamPipe hSteamPipe, const char * pchVersion){
}

void bbSteamAPI_ISteamClient_GetISteamApps(HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char * pchVersion){
}

void bbSteamAPI_ISteamClient_GetISteamNetworking(HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char * pchVersion){
}

void bbSteamAPI_ISteamClient_GetISteamRemoteStorage(HSteamUser hSteamuser, HSteamPipe hSteamPipe, const char * pchVersion){
}

void bbSteamAPI_ISteamClient_GetISteamScreenshots(HSteamUser hSteamuser, HSteamPipe hSteamPipe, const char * pchVersion){
}

void bbSteamAPI_ISteamClient_GetISteamGameSearch(HSteamUser hSteamuser, HSteamPipe hSteamPipe, const char * pchVersion){
}

void bbSteamAPI_ISteamClient_GetIPCCallCount(){
}

void bbSteamAPI_ISteamClient_SetWarningMessageHook(SteamAPIWarningMessageHook_t pFunction){
}

void bbSteamAPI_ISteamClient_BShutdownIfAllPipesClosed(){
}

void bbSteamAPI_ISteamClient_GetISteamHTTP(HSteamUser hSteamuser, HSteamPipe hSteamPipe, const char * pchVersion){
}

void bbSteamAPI_ISteamClient_GetISteamController(HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char * pchVersion){
}

void bbSteamAPI_ISteamClient_GetISteamUGC(HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char * pchVersion){
}

void bbSteamAPI_ISteamClient_GetISteamAppList(HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char * pchVersion){
}

void bbSteamAPI_ISteamClient_GetISteamMusic(HSteamUser hSteamuser, HSteamPipe hSteamPipe, const char * pchVersion){
}

void bbSteamAPI_ISteamClient_GetISteamMusicRemote(HSteamUser hSteamuser, HSteamPipe hSteamPipe, const char * pchVersion){
}

void bbSteamAPI_ISteamClient_GetISteamHTMLSurface(HSteamUser hSteamuser, HSteamPipe hSteamPipe, const char * pchVersion){
}

void bbSteamAPI_ISteamClient_GetISteamInventory(HSteamUser hSteamuser, HSteamPipe hSteamPipe, const char * pchVersion){
}

void bbSteamAPI_ISteamClient_GetISteamVideo(HSteamUser hSteamuser, HSteamPipe hSteamPipe, const char * pchVersion){
}

void bbSteamAPI_ISteamClient_GetISteamParentalSettings(HSteamUser hSteamuser, HSteamPipe hSteamPipe, const char * pchVersion){
}

void bbSteamAPI_ISteamClient_GetISteamInput(HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char * pchVersion){
}

void bbSteamAPI_ISteamClient_GetISteamParties(HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char * pchVersion){
}

void bbSteamAPI_ISteamClient_GetISteamRemotePlay(HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char * pchVersion){
}

class ISteamUser;
void bbSteamAPI_ISteamUser_GetHSteamUser(){
}

void bbSteamAPI_ISteamUser_BLoggedOn(){
}

void bbSteamAPI_ISteamUser_GetSteamID(){
}

void bbSteamAPI_ISteamUser_InitiateGameConnection(void * pAuthBlob, int cbMaxAuthBlob, CSteamID steamIDGameServer, uint32 unIPServer, uint16 usPortServer, bool bSecure){
}

void bbSteamAPI_ISteamUser_TerminateGameConnection(uint32 unIPServer, uint16 usPortServer){
}

void bbSteamAPI_ISteamUser_TrackAppUsageEvent(CGameID gameID, int eAppUsageEvent, const char * pchExtraInfo){
}

void bbSteamAPI_ISteamUser_GetUserDataFolder(char * pchBuffer, int cubBuffer){
}

void bbSteamAPI_ISteamUser_StartVoiceRecording(){
}

void bbSteamAPI_ISteamUser_StopVoiceRecording(){
}

void bbSteamAPI_ISteamUser_GetAvailableVoice(uint32 * pcbCompressed, uint32 * pcbUncompressed_Deprecated, uint32 nUncompressedVoiceDesiredSampleRate_Deprecated){
}

void bbSteamAPI_ISteamUser_GetVoice(bool bWantCompressed, void * pDestBuffer, uint32 cbDestBufferSize, uint32 * nBytesWritten, bool bWantUncompressed_Deprecated, void * pUncompressedDestBuffer_Deprecated, uint32 cbUncompressedDestBufferSize_Deprecated, uint32 * nUncompressBytesWritten_Deprecated, uint32 nUncompressedVoiceDesiredSampleRate_Deprecated){
}

void bbSteamAPI_ISteamUser_DecompressVoice(const void * pCompressed, uint32 cbCompressed, void * pDestBuffer, uint32 cbDestBufferSize, uint32 * nBytesWritten, uint32 nDesiredSampleRate){
}

void bbSteamAPI_ISteamUser_GetVoiceOptimalSampleRate(){
}

void bbSteamAPI_ISteamUser_GetAuthSessionTicket(void * pTicket, int cbMaxTicket, uint32 * pcbTicket){
}

void bbSteamAPI_ISteamUser_BeginAuthSession(const void * pAuthTicket, int cbAuthTicket, CSteamID steamID){
}

void bbSteamAPI_ISteamUser_EndAuthSession(CSteamID steamID){
}

void bbSteamAPI_ISteamUser_CancelAuthTicket(HAuthTicket hAuthTicket){
}

void bbSteamAPI_ISteamUser_UserHasLicenseForApp(CSteamID steamID, AppId_t appID){
}

void bbSteamAPI_ISteamUser_BIsBehindNAT(){
}

void bbSteamAPI_ISteamUser_AdvertiseGame(CSteamID steamIDGameServer, uint32 unIPServer, uint16 usPortServer){
}

void bbSteamAPI_ISteamUser_RequestEncryptedAppTicket(void * pDataToInclude, int cbDataToInclude){
}

void bbSteamAPI_ISteamUser_GetEncryptedAppTicket(void * pTicket, int cbMaxTicket, uint32 * pcbTicket){
}

void bbSteamAPI_ISteamUser_GetGameBadgeLevel(int nSeries, bool bFoil){
}

void bbSteamAPI_ISteamUser_GetPlayerSteamLevel(){
}

void bbSteamAPI_ISteamUser_RequestStoreAuthURL(const char * pchRedirectURL){
}

void bbSteamAPI_ISteamUser_BIsPhoneVerified(){
}

void bbSteamAPI_ISteamUser_BIsTwoFactorEnabled(){
}

void bbSteamAPI_ISteamUser_BIsPhoneIdentifying(){
}

void bbSteamAPI_ISteamUser_BIsPhoneRequiringVerification(){
}

void bbSteamAPI_ISteamUser_GetMarketEligibility(){
}

void bbSteamAPI_ISteamUser_GetDurationControl(){
}

class ISteamFriends;
void bbSteamAPI_ISteamFriends_GetPersonaName(){
}

void bbSteamAPI_ISteamFriends_SetPersonaName(const char * pchPersonaName){
}

void bbSteamAPI_ISteamFriends_GetPersonaState(){
}

void bbSteamAPI_ISteamFriends_GetFriendCount(int iFriendFlags){
}

void bbSteamAPI_ISteamFriends_GetFriendByIndex(int iFriend, int iFriendFlags){
}

void bbSteamAPI_ISteamFriends_GetFriendRelationship(CSteamID steamIDFriend){
}

void bbSteamAPI_ISteamFriends_GetFriendPersonaState(CSteamID steamIDFriend){
}

void bbSteamAPI_ISteamFriends_GetFriendPersonaName(CSteamID steamIDFriend){
}

void bbSteamAPI_ISteamFriends_GetFriendGamePlayed(CSteamID steamIDFriend, FriendGameInfo_t * pFriendGameInfo){
}

void bbSteamAPI_ISteamFriends_GetFriendPersonaNameHistory(CSteamID steamIDFriend, int iPersonaName){
}

void bbSteamAPI_ISteamFriends_GetFriendSteamLevel(CSteamID steamIDFriend){
}

void bbSteamAPI_ISteamFriends_GetPlayerNickname(CSteamID steamIDPlayer){
}

void bbSteamAPI_ISteamFriends_GetFriendsGroupCount(){
}

void bbSteamAPI_ISteamFriends_GetFriendsGroupIDByIndex(int iFG){
}

void bbSteamAPI_ISteamFriends_GetFriendsGroupName(FriendsGroupID_t friendsGroupID){
}

void bbSteamAPI_ISteamFriends_GetFriendsGroupMembersCount(FriendsGroupID_t friendsGroupID){
}

void bbSteamAPI_ISteamFriends_GetFriendsGroupMembersList(FriendsGroupID_t friendsGroupID, CSteamID * pOutSteamIDMembers, int nMembersCount){
}

void bbSteamAPI_ISteamFriends_HasFriend(CSteamID steamIDFriend, int iFriendFlags){
}

void bbSteamAPI_ISteamFriends_GetClanCount(){
}

void bbSteamAPI_ISteamFriends_GetClanByIndex(int iClan){
}

void bbSteamAPI_ISteamFriends_GetClanName(CSteamID steamIDClan){
}

void bbSteamAPI_ISteamFriends_GetClanTag(CSteamID steamIDClan){
}

void bbSteamAPI_ISteamFriends_GetClanActivityCounts(CSteamID steamIDClan, int * pnOnline, int * pnInGame, int * pnChatting){
}

void bbSteamAPI_ISteamFriends_DownloadClanActivityCounts(CSteamID * psteamIDClans, int cClansToRequest){
}

void bbSteamAPI_ISteamFriends_GetFriendCountFromSource(CSteamID steamIDSource){
}

void bbSteamAPI_ISteamFriends_GetFriendFromSourceByIndex(CSteamID steamIDSource, int iFriend){
}

void bbSteamAPI_ISteamFriends_IsUserInSource(CSteamID steamIDUser, CSteamID steamIDSource){
}

void bbSteamAPI_ISteamFriends_SetInGameVoiceSpeaking(CSteamID steamIDUser, bool bSpeaking){
}

void bbSteamAPI_ISteamFriends_ActivateGameOverlay(const char * pchDialog){
}

void bbSteamAPI_ISteamFriends_ActivateGameOverlayToUser(const char * pchDialog, CSteamID steamID){
}

void bbSteamAPI_ISteamFriends_ActivateGameOverlayToWebPage(const char * pchURL, EActivateGameOverlayToWebPageMode eMode){
}

void bbSteamAPI_ISteamFriends_ActivateGameOverlayToStore(AppId_t nAppID, EOverlayToStoreFlag eFlag){
}

void bbSteamAPI_ISteamFriends_SetPlayedWith(CSteamID steamIDUserPlayedWith){
}

void bbSteamAPI_ISteamFriends_ActivateGameOverlayInviteDialog(CSteamID steamIDLobby){
}

void bbSteamAPI_ISteamFriends_GetSmallFriendAvatar(CSteamID steamIDFriend){
}

void bbSteamAPI_ISteamFriends_GetMediumFriendAvatar(CSteamID steamIDFriend){
}

void bbSteamAPI_ISteamFriends_GetLargeFriendAvatar(CSteamID steamIDFriend){
}

void bbSteamAPI_ISteamFriends_RequestUserInformation(CSteamID steamIDUser, bool bRequireNameOnly){
}

void bbSteamAPI_ISteamFriends_RequestClanOfficerList(CSteamID steamIDClan){
}

void bbSteamAPI_ISteamFriends_GetClanOwner(CSteamID steamIDClan){
}

void bbSteamAPI_ISteamFriends_GetClanOfficerCount(CSteamID steamIDClan){
}

void bbSteamAPI_ISteamFriends_GetClanOfficerByIndex(CSteamID steamIDClan, int iOfficer){
}

void bbSteamAPI_ISteamFriends_GetUserRestrictions(){
}

void bbSteamAPI_ISteamFriends_SetRichPresence(const char * pchKey, const char * pchValue){
}

void bbSteamAPI_ISteamFriends_ClearRichPresence(){
}

void bbSteamAPI_ISteamFriends_GetFriendRichPresence(CSteamID steamIDFriend, const char * pchKey){
}

void bbSteamAPI_ISteamFriends_GetFriendRichPresenceKeyCount(CSteamID steamIDFriend){
}

void bbSteamAPI_ISteamFriends_GetFriendRichPresenceKeyByIndex(CSteamID steamIDFriend, int iKey){
}

void bbSteamAPI_ISteamFriends_RequestFriendRichPresence(CSteamID steamIDFriend){
}

void bbSteamAPI_ISteamFriends_InviteUserToGame(CSteamID steamIDFriend, const char * pchConnectString){
}

void bbSteamAPI_ISteamFriends_GetCoplayFriendCount(){
}

void bbSteamAPI_ISteamFriends_GetCoplayFriend(int iCoplayFriend){
}

void bbSteamAPI_ISteamFriends_GetFriendCoplayTime(CSteamID steamIDFriend){
}

void bbSteamAPI_ISteamFriends_GetFriendCoplayGame(CSteamID steamIDFriend){
}

void bbSteamAPI_ISteamFriends_JoinClanChatRoom(CSteamID steamIDClan){
}

void bbSteamAPI_ISteamFriends_LeaveClanChatRoom(CSteamID steamIDClan){
}

void bbSteamAPI_ISteamFriends_GetClanChatMemberCount(CSteamID steamIDClan){
}

void bbSteamAPI_ISteamFriends_GetChatMemberByIndex(CSteamID steamIDClan, int iUser){
}

void bbSteamAPI_ISteamFriends_SendClanChatMessage(CSteamID steamIDClanChat, const char * pchText){
}

void bbSteamAPI_ISteamFriends_GetClanChatMessage(CSteamID steamIDClanChat, int iMessage, void * prgchText, int cchTextMax, EChatEntryType * peChatEntryType, CSteamID * psteamidChatter){
}

void bbSteamAPI_ISteamFriends_IsClanChatAdmin(CSteamID steamIDClanChat, CSteamID steamIDUser){
}

void bbSteamAPI_ISteamFriends_IsClanChatWindowOpenInSteam(CSteamID steamIDClanChat){
}

void bbSteamAPI_ISteamFriends_OpenClanChatWindowInSteam(CSteamID steamIDClanChat){
}

void bbSteamAPI_ISteamFriends_CloseClanChatWindowInSteam(CSteamID steamIDClanChat){
}

void bbSteamAPI_ISteamFriends_SetListenForFriendsMessages(bool bInterceptEnabled){
}

void bbSteamAPI_ISteamFriends_ReplyToFriendMessage(CSteamID steamIDFriend, const char * pchMsgToSend){
}

void bbSteamAPI_ISteamFriends_GetFriendMessage(CSteamID steamIDFriend, int iMessageID, void * pvData, int cubData, EChatEntryType * peChatEntryType){
}

void bbSteamAPI_ISteamFriends_GetFollowerCount(CSteamID steamID){
}

void bbSteamAPI_ISteamFriends_IsFollowing(CSteamID steamID){
}

void bbSteamAPI_ISteamFriends_EnumerateFollowingList(uint32 unStartIndex){
}

void bbSteamAPI_ISteamFriends_IsClanPublic(CSteamID steamIDClan){
}

void bbSteamAPI_ISteamFriends_IsClanOfficialGameGroup(CSteamID steamIDClan){
}

void bbSteamAPI_ISteamFriends_GetNumChatsWithUnreadPriorityMessages(){
}

void bbSteamAPI_ISteamFriends_ActivateGameOverlayRemotePlayTogetherInviteDialog(CSteamID steamIDLobby){
}

class ISteamUtils;
void bbSteamAPI_ISteamUtils_GetSecondsSinceAppActive(){
}

void bbSteamAPI_ISteamUtils_GetSecondsSinceComputerActive(){
}

void bbSteamAPI_ISteamUtils_GetConnectedUniverse(){
}

void bbSteamAPI_ISteamUtils_GetServerRealTime(){
}

void bbSteamAPI_ISteamUtils_GetIPCountry(){
}

void bbSteamAPI_ISteamUtils_GetImageSize(int iImage, uint32 * pnWidth, uint32 * pnHeight){
}

void bbSteamAPI_ISteamUtils_GetImageRGBA(int iImage, uint8 * pubDest, int nDestBufferSize){
}

void bbSteamAPI_ISteamUtils_GetCSERIPPort(uint32 * unIP, uint16 * usPort){
}

void bbSteamAPI_ISteamUtils_GetCurrentBatteryPower(){
}

void bbSteamAPI_ISteamUtils_GetAppID(){
}

void bbSteamAPI_ISteamUtils_SetOverlayNotificationPosition(ENotificationPosition eNotificationPosition){
}

void bbSteamAPI_ISteamUtils_IsAPICallCompleted(SteamAPICall_t hSteamAPICall, bool * pbFailed){
}

void bbSteamAPI_ISteamUtils_GetAPICallFailureReason(SteamAPICall_t hSteamAPICall){
}

void bbSteamAPI_ISteamUtils_GetAPICallResult(SteamAPICall_t hSteamAPICall, void * pCallback, int cubCallback, int iCallbackExpected, bool * pbFailed){
}

void bbSteamAPI_ISteamUtils_GetIPCCallCount(){
}

void bbSteamAPI_ISteamUtils_SetWarningMessageHook(SteamAPIWarningMessageHook_t pFunction){
}

void bbSteamAPI_ISteamUtils_IsOverlayEnabled(){
}

void bbSteamAPI_ISteamUtils_BOverlayNeedsPresent(){
}

void bbSteamAPI_ISteamUtils_CheckFileSignature(const char * szFileName){
}

void bbSteamAPI_ISteamUtils_ShowGamepadTextInput(EGamepadTextInputMode eInputMode, EGamepadTextInputLineMode eLineInputMode, const char * pchDescription, uint32 unCharMax, const char * pchExistingText){
}

void bbSteamAPI_ISteamUtils_GetEnteredGamepadTextLength(){
}

void bbSteamAPI_ISteamUtils_GetEnteredGamepadTextInput(char * pchText, uint32 cchText){
}

void bbSteamAPI_ISteamUtils_GetSteamUILanguage(){
}

void bbSteamAPI_ISteamUtils_IsSteamRunningInVR(){
}

void bbSteamAPI_ISteamUtils_SetOverlayNotificationInset(int nHorizontalInset, int nVerticalInset){
}

void bbSteamAPI_ISteamUtils_IsSteamInBigPictureMode(){
}

void bbSteamAPI_ISteamUtils_StartVRDashboard(){
}

void bbSteamAPI_ISteamUtils_IsVRHeadsetStreamingEnabled(){
}

void bbSteamAPI_ISteamUtils_SetVRHeadsetStreamingEnabled(bool bEnabled){
}

void bbSteamAPI_ISteamUtils_IsSteamChinaLauncher(){
}

void bbSteamAPI_ISteamUtils_InitFilterText(){
}

void bbSteamAPI_ISteamUtils_FilterText(char * pchOutFilteredText, uint32 nByteSizeOutFilteredText, const char * pchInputMessage, bool bLegalOnly){
}

void bbSteamAPI_ISteamUtils_GetIPv6ConnectivityState(ESteamIPv6ConnectivityProtocol eProtocol){
}

class ISteamMatchmaking;
void bbSteamAPI_ISteamMatchmaking_GetFavoriteGameCount(){
}

void bbSteamAPI_ISteamMatchmaking_GetFavoriteGame(int iGame, AppId_t * pnAppID, uint32 * pnIP, uint16 * pnConnPort, uint16 * pnQueryPort, uint32 * punFlags, uint32 * pRTime32LastPlayedOnServer){
}

void bbSteamAPI_ISteamMatchmaking_AddFavoriteGame(AppId_t nAppID, uint32 nIP, uint16 nConnPort, uint16 nQueryPort, uint32 unFlags, uint32 rTime32LastPlayedOnServer){
}

void bbSteamAPI_ISteamMatchmaking_RemoveFavoriteGame(AppId_t nAppID, uint32 nIP, uint16 nConnPort, uint16 nQueryPort, uint32 unFlags){
}

void bbSteamAPI_ISteamMatchmaking_RequestLobbyList(){
}

void bbSteamAPI_ISteamMatchmaking_AddRequestLobbyListStringFilter(const char * pchKeyToMatch, const char * pchValueToMatch, ELobbyComparison eComparisonType){
}

void bbSteamAPI_ISteamMatchmaking_AddRequestLobbyListNumericalFilter(const char * pchKeyToMatch, int nValueToMatch, ELobbyComparison eComparisonType){
}

void bbSteamAPI_ISteamMatchmaking_AddRequestLobbyListNearValueFilter(const char * pchKeyToMatch, int nValueToBeCloseTo){
}

void bbSteamAPI_ISteamMatchmaking_AddRequestLobbyListFilterSlotsAvailable(int nSlotsAvailable){
}

void bbSteamAPI_ISteamMatchmaking_AddRequestLobbyListDistanceFilter(ELobbyDistanceFilter eLobbyDistanceFilter){
}

void bbSteamAPI_ISteamMatchmaking_AddRequestLobbyListResultCountFilter(int cMaxResults){
}

void bbSteamAPI_ISteamMatchmaking_AddRequestLobbyListCompatibleMembersFilter(CSteamID steamIDLobby){
}

void bbSteamAPI_ISteamMatchmaking_GetLobbyByIndex(int iLobby){
}

void bbSteamAPI_ISteamMatchmaking_CreateLobby(ELobbyType eLobbyType, int cMaxMembers){
}

void bbSteamAPI_ISteamMatchmaking_JoinLobby(CSteamID steamIDLobby){
}

void bbSteamAPI_ISteamMatchmaking_LeaveLobby(CSteamID steamIDLobby){
}

void bbSteamAPI_ISteamMatchmaking_InviteUserToLobby(CSteamID steamIDLobby, CSteamID steamIDInvitee){
}

void bbSteamAPI_ISteamMatchmaking_GetNumLobbyMembers(CSteamID steamIDLobby){
}

void bbSteamAPI_ISteamMatchmaking_GetLobbyMemberByIndex(CSteamID steamIDLobby, int iMember){
}

void bbSteamAPI_ISteamMatchmaking_GetLobbyData(CSteamID steamIDLobby, const char * pchKey){
}

void bbSteamAPI_ISteamMatchmaking_SetLobbyData(CSteamID steamIDLobby, const char * pchKey, const char * pchValue){
}

void bbSteamAPI_ISteamMatchmaking_GetLobbyDataCount(CSteamID steamIDLobby){
}

void bbSteamAPI_ISteamMatchmaking_GetLobbyDataByIndex(CSteamID steamIDLobby, int iLobbyData, char * pchKey, int cchKeyBufferSize, char * pchValue, int cchValueBufferSize){
}

void bbSteamAPI_ISteamMatchmaking_DeleteLobbyData(CSteamID steamIDLobby, const char * pchKey){
}

void bbSteamAPI_ISteamMatchmaking_GetLobbyMemberData(CSteamID steamIDLobby, CSteamID steamIDUser, const char * pchKey){
}

void bbSteamAPI_ISteamMatchmaking_SetLobbyMemberData(CSteamID steamIDLobby, const char * pchKey, const char * pchValue){
}

void bbSteamAPI_ISteamMatchmaking_SendLobbyChatMsg(CSteamID steamIDLobby, const void * pvMsgBody, int cubMsgBody){
}

void bbSteamAPI_ISteamMatchmaking_GetLobbyChatEntry(CSteamID steamIDLobby, int iChatID, CSteamID * pSteamIDUser, void * pvData, int cubData, EChatEntryType * peChatEntryType){
}

void bbSteamAPI_ISteamMatchmaking_RequestLobbyData(CSteamID steamIDLobby){
}

void bbSteamAPI_ISteamMatchmaking_SetLobbyGameServer(CSteamID steamIDLobby, uint32 unGameServerIP, uint16 unGameServerPort, CSteamID steamIDGameServer){
}

void bbSteamAPI_ISteamMatchmaking_GetLobbyGameServer(CSteamID steamIDLobby, uint32 * punGameServerIP, uint16 * punGameServerPort, CSteamID * psteamIDGameServer){
}

void bbSteamAPI_ISteamMatchmaking_SetLobbyMemberLimit(CSteamID steamIDLobby, int cMaxMembers){
}

void bbSteamAPI_ISteamMatchmaking_GetLobbyMemberLimit(CSteamID steamIDLobby){
}

void bbSteamAPI_ISteamMatchmaking_SetLobbyType(CSteamID steamIDLobby, ELobbyType eLobbyType){
}

void bbSteamAPI_ISteamMatchmaking_SetLobbyJoinable(CSteamID steamIDLobby, bool bLobbyJoinable){
}

void bbSteamAPI_ISteamMatchmaking_GetLobbyOwner(CSteamID steamIDLobby){
}

void bbSteamAPI_ISteamMatchmaking_SetLobbyOwner(CSteamID steamIDLobby, CSteamID steamIDNewOwner){
}

void bbSteamAPI_ISteamMatchmaking_SetLinkedLobby(CSteamID steamIDLobby, CSteamID steamIDLobbyDependent){
}

class ISteamMatchmakingServerListResponse;
void bbSteamAPI_ISteamMatchmakingServerListResponse_ServerResponded(HServerListRequest hRequest, int iServer){
}

void bbSteamAPI_ISteamMatchmakingServerListResponse_ServerFailedToRespond(HServerListRequest hRequest, int iServer){
}

void bbSteamAPI_ISteamMatchmakingServerListResponse_RefreshComplete(HServerListRequest hRequest, EMatchMakingServerResponse response){
}

class ISteamMatchmakingPingResponse;
void bbSteamAPI_ISteamMatchmakingPingResponse_ServerResponded(gameserveritem_t & server){
}

void bbSteamAPI_ISteamMatchmakingPingResponse_ServerFailedToRespond(){
}

class ISteamMatchmakingPlayersResponse;
void bbSteamAPI_ISteamMatchmakingPlayersResponse_AddPlayerToList(const char * pchName, int nScore, float flTimePlayed){
}

void bbSteamAPI_ISteamMatchmakingPlayersResponse_PlayersFailedToRespond(){
}

void bbSteamAPI_ISteamMatchmakingPlayersResponse_PlayersRefreshComplete(){
}

class ISteamMatchmakingRulesResponse;
void bbSteamAPI_ISteamMatchmakingRulesResponse_RulesResponded(const char * pchRule, const char * pchValue){
}

void bbSteamAPI_ISteamMatchmakingRulesResponse_RulesFailedToRespond(){
}

void bbSteamAPI_ISteamMatchmakingRulesResponse_RulesRefreshComplete(){
}

class ISteamMatchmakingServers;
void bbSteamAPI_ISteamMatchmakingServers_RequestInternetServerList(AppId_t iApp, MatchMakingKeyValuePair_t ** ppchFilters, uint32 nFilters, ISteamMatchmakingServerListResponse * pRequestServersResponse){
}

void bbSteamAPI_ISteamMatchmakingServers_RequestLANServerList(AppId_t iApp, ISteamMatchmakingServerListResponse * pRequestServersResponse){
}

void bbSteamAPI_ISteamMatchmakingServers_RequestFriendsServerList(AppId_t iApp, MatchMakingKeyValuePair_t ** ppchFilters, uint32 nFilters, ISteamMatchmakingServerListResponse * pRequestServersResponse){
}

void bbSteamAPI_ISteamMatchmakingServers_RequestFavoritesServerList(AppId_t iApp, MatchMakingKeyValuePair_t ** ppchFilters, uint32 nFilters, ISteamMatchmakingServerListResponse * pRequestServersResponse){
}

void bbSteamAPI_ISteamMatchmakingServers_RequestHistoryServerList(AppId_t iApp, MatchMakingKeyValuePair_t ** ppchFilters, uint32 nFilters, ISteamMatchmakingServerListResponse * pRequestServersResponse){
}

void bbSteamAPI_ISteamMatchmakingServers_RequestSpectatorServerList(AppId_t iApp, MatchMakingKeyValuePair_t ** ppchFilters, uint32 nFilters, ISteamMatchmakingServerListResponse * pRequestServersResponse){
}

void bbSteamAPI_ISteamMatchmakingServers_ReleaseRequest(HServerListRequest hServerListRequest){
}

void bbSteamAPI_ISteamMatchmakingServers_GetServerDetails(HServerListRequest hRequest, int iServer){
}

void bbSteamAPI_ISteamMatchmakingServers_CancelQuery(HServerListRequest hRequest){
}

void bbSteamAPI_ISteamMatchmakingServers_RefreshQuery(HServerListRequest hRequest){
}

void bbSteamAPI_ISteamMatchmakingServers_IsRefreshing(HServerListRequest hRequest){
}

void bbSteamAPI_ISteamMatchmakingServers_GetServerCount(HServerListRequest hRequest){
}

void bbSteamAPI_ISteamMatchmakingServers_RefreshServer(HServerListRequest hRequest, int iServer){
}

void bbSteamAPI_ISteamMatchmakingServers_PingServer(uint32 unIP, uint16 usPort, ISteamMatchmakingPingResponse * pRequestServersResponse){
}

void bbSteamAPI_ISteamMatchmakingServers_PlayerDetails(uint32 unIP, uint16 usPort, ISteamMatchmakingPlayersResponse * pRequestServersResponse){
}

void bbSteamAPI_ISteamMatchmakingServers_ServerRules(uint32 unIP, uint16 usPort, ISteamMatchmakingRulesResponse * pRequestServersResponse){
}

void bbSteamAPI_ISteamMatchmakingServers_CancelServerQuery(HServerQuery hServerQuery){
}

class ISteamGameSearch;
void bbSteamAPI_ISteamGameSearch_AddGameSearchParams(const char * pchKeyToFind, const char * pchValuesToFind){
}

void bbSteamAPI_ISteamGameSearch_SearchForGameWithLobby(CSteamID steamIDLobby, int nPlayerMin, int nPlayerMax){
}

void bbSteamAPI_ISteamGameSearch_SearchForGameSolo(int nPlayerMin, int nPlayerMax){
}

void bbSteamAPI_ISteamGameSearch_AcceptGame(){
}

void bbSteamAPI_ISteamGameSearch_DeclineGame(){
}

void bbSteamAPI_ISteamGameSearch_RetrieveConnectionDetails(CSteamID steamIDHost, char * pchConnectionDetails, int cubConnectionDetails){
}

void bbSteamAPI_ISteamGameSearch_EndGameSearch(){
}

void bbSteamAPI_ISteamGameSearch_SetGameHostParams(const char * pchKey, const char * pchValue){
}

void bbSteamAPI_ISteamGameSearch_SetConnectionDetails(const char * pchConnectionDetails, int cubConnectionDetails){
}

void bbSteamAPI_ISteamGameSearch_RequestPlayersForGame(int nPlayerMin, int nPlayerMax, int nMaxTeamSize){
}

void bbSteamAPI_ISteamGameSearch_HostConfirmGameStart(uint64 ullUniqueGameID){
}

void bbSteamAPI_ISteamGameSearch_CancelRequestPlayersForGame(){
}

void bbSteamAPI_ISteamGameSearch_SubmitPlayerResult(uint64 ullUniqueGameID, CSteamID steamIDPlayer, EPlayerResult_t EPlayerResult){
}

void bbSteamAPI_ISteamGameSearch_EndGame(uint64 ullUniqueGameID){
}

class ISteamParties;
void bbSteamAPI_ISteamParties_GetNumActiveBeacons(){
}

void bbSteamAPI_ISteamParties_GetBeaconByIndex(uint32 unIndex){
}

void bbSteamAPI_ISteamParties_GetBeaconDetails(PartyBeaconID_t ulBeaconID, CSteamID * pSteamIDBeaconOwner, SteamPartyBeaconLocation_t * pLocation, char * pchMetadata, int cchMetadata){
}

void bbSteamAPI_ISteamParties_JoinParty(PartyBeaconID_t ulBeaconID){
}

void bbSteamAPI_ISteamParties_GetNumAvailableBeaconLocations(uint32 * puNumLocations){
}

void bbSteamAPI_ISteamParties_GetAvailableBeaconLocations(SteamPartyBeaconLocation_t * pLocationList, uint32 uMaxNumLocations){
}

void bbSteamAPI_ISteamParties_CreateBeacon(uint32 unOpenSlots, SteamPartyBeaconLocation_t * pBeaconLocation, const char * pchConnectString, const char * pchMetadata){
}

void bbSteamAPI_ISteamParties_OnReservationCompleted(PartyBeaconID_t ulBeacon, CSteamID steamIDUser){
}

void bbSteamAPI_ISteamParties_CancelReservation(PartyBeaconID_t ulBeacon, CSteamID steamIDUser){
}

void bbSteamAPI_ISteamParties_ChangeNumOpenSlots(PartyBeaconID_t ulBeacon, uint32 unOpenSlots){
}

void bbSteamAPI_ISteamParties_DestroyBeacon(PartyBeaconID_t ulBeacon){
}

void bbSteamAPI_ISteamParties_GetBeaconLocationData(SteamPartyBeaconLocation_t BeaconLocation, ESteamPartyBeaconLocationData eData, char * pchDataStringOut, int cchDataStringOut){
}

class ISteamRemoteStorage;
void bbSteamAPI_ISteamRemoteStorage_FileWrite(const char * pchFile, const void * pvData, int32 cubData){
}

void bbSteamAPI_ISteamRemoteStorage_FileRead(const char * pchFile, void * pvData, int32 cubDataToRead){
}

void bbSteamAPI_ISteamRemoteStorage_FileWriteAsync(const char * pchFile, const void * pvData, uint32 cubData){
}

void bbSteamAPI_ISteamRemoteStorage_FileReadAsync(const char * pchFile, uint32 nOffset, uint32 cubToRead){
}

void bbSteamAPI_ISteamRemoteStorage_FileReadAsyncComplete(SteamAPICall_t hReadCall, void * pvBuffer, uint32 cubToRead){
}

void bbSteamAPI_ISteamRemoteStorage_FileForget(const char * pchFile){
}

void bbSteamAPI_ISteamRemoteStorage_FileDelete(const char * pchFile){
}

void bbSteamAPI_ISteamRemoteStorage_FileShare(const char * pchFile){
}

void bbSteamAPI_ISteamRemoteStorage_SetSyncPlatforms(const char * pchFile, ERemoteStoragePlatform eRemoteStoragePlatform){
}

void bbSteamAPI_ISteamRemoteStorage_FileWriteStreamOpen(const char * pchFile){
}

void bbSteamAPI_ISteamRemoteStorage_FileWriteStreamWriteChunk(UGCFileWriteStreamHandle_t writeHandle, const void * pvData, int32 cubData){
}

void bbSteamAPI_ISteamRemoteStorage_FileWriteStreamClose(UGCFileWriteStreamHandle_t writeHandle){
}

void bbSteamAPI_ISteamRemoteStorage_FileWriteStreamCancel(UGCFileWriteStreamHandle_t writeHandle){
}

void bbSteamAPI_ISteamRemoteStorage_FileExists(const char * pchFile){
}

void bbSteamAPI_ISteamRemoteStorage_FilePersisted(const char * pchFile){
}

void bbSteamAPI_ISteamRemoteStorage_GetFileSize(const char * pchFile){
}

void bbSteamAPI_ISteamRemoteStorage_GetFileTimestamp(const char * pchFile){
}

void bbSteamAPI_ISteamRemoteStorage_GetSyncPlatforms(const char * pchFile){
}

void bbSteamAPI_ISteamRemoteStorage_GetFileCount(){
}

void bbSteamAPI_ISteamRemoteStorage_GetFileNameAndSize(int iFile, int32 * pnFileSizeInBytes){
}

void bbSteamAPI_ISteamRemoteStorage_GetQuota(uint64 * pnTotalBytes, uint64 * puAvailableBytes){
}

void bbSteamAPI_ISteamRemoteStorage_IsCloudEnabledForAccount(){
}

void bbSteamAPI_ISteamRemoteStorage_IsCloudEnabledForApp(){
}

void bbSteamAPI_ISteamRemoteStorage_SetCloudEnabledForApp(bool bEnabled){
}

void bbSteamAPI_ISteamRemoteStorage_UGCDownload(UGCHandle_t hContent, uint32 unPriority){
}

void bbSteamAPI_ISteamRemoteStorage_GetUGCDownloadProgress(UGCHandle_t hContent, int32 * pnBytesDownloaded, int32 * pnBytesExpected){
}

void bbSteamAPI_ISteamRemoteStorage_GetUGCDetails(UGCHandle_t hContent, AppId_t * pnAppID, char ** ppchName, int32 * pnFileSizeInBytes, CSteamID * pSteamIDOwner){
}

void bbSteamAPI_ISteamRemoteStorage_UGCRead(UGCHandle_t hContent, void * pvData, int32 cubDataToRead, uint32 cOffset, EUGCReadAction eAction){
}

void bbSteamAPI_ISteamRemoteStorage_GetCachedUGCCount(){
}

void bbSteamAPI_ISteamRemoteStorage_GetCachedUGCHandle(int32 iCachedContent){
}

void bbSteamAPI_ISteamRemoteStorage_PublishWorkshopFile(const char * pchFile, const char * pchPreviewFile, AppId_t nConsumerAppId, const char * pchTitle, const char * pchDescription, ERemoteStoragePublishedFileVisibility eVisibility, SteamParamStringArray_t * pTags, EWorkshopFileType eWorkshopFileType){
}

void bbSteamAPI_ISteamRemoteStorage_CreatePublishedFileUpdateRequest(PublishedFileId_t unPublishedFileId){
}

void bbSteamAPI_ISteamRemoteStorage_UpdatePublishedFileFile(PublishedFileUpdateHandle_t updateHandle, const char * pchFile){
}

void bbSteamAPI_ISteamRemoteStorage_UpdatePublishedFilePreviewFile(PublishedFileUpdateHandle_t updateHandle, const char * pchPreviewFile){
}

void bbSteamAPI_ISteamRemoteStorage_UpdatePublishedFileTitle(PublishedFileUpdateHandle_t updateHandle, const char * pchTitle){
}

void bbSteamAPI_ISteamRemoteStorage_UpdatePublishedFileDescription(PublishedFileUpdateHandle_t updateHandle, const char * pchDescription){
}

void bbSteamAPI_ISteamRemoteStorage_UpdatePublishedFileVisibility(PublishedFileUpdateHandle_t updateHandle, ERemoteStoragePublishedFileVisibility eVisibility){
}

void bbSteamAPI_ISteamRemoteStorage_UpdatePublishedFileTags(PublishedFileUpdateHandle_t updateHandle, SteamParamStringArray_t * pTags){
}

void bbSteamAPI_ISteamRemoteStorage_CommitPublishedFileUpdate(PublishedFileUpdateHandle_t updateHandle){
}

void bbSteamAPI_ISteamRemoteStorage_GetPublishedFileDetails(PublishedFileId_t unPublishedFileId, uint32 unMaxSecondsOld){
}

void bbSteamAPI_ISteamRemoteStorage_DeletePublishedFile(PublishedFileId_t unPublishedFileId){
}

void bbSteamAPI_ISteamRemoteStorage_EnumerateUserPublishedFiles(uint32 unStartIndex){
}

void bbSteamAPI_ISteamRemoteStorage_SubscribePublishedFile(PublishedFileId_t unPublishedFileId){
}

void bbSteamAPI_ISteamRemoteStorage_EnumerateUserSubscribedFiles(uint32 unStartIndex){
}

void bbSteamAPI_ISteamRemoteStorage_UnsubscribePublishedFile(PublishedFileId_t unPublishedFileId){
}

void bbSteamAPI_ISteamRemoteStorage_UpdatePublishedFileSetChangeDescription(PublishedFileUpdateHandle_t updateHandle, const char * pchChangeDescription){
}

void bbSteamAPI_ISteamRemoteStorage_GetPublishedItemVoteDetails(PublishedFileId_t unPublishedFileId){
}

void bbSteamAPI_ISteamRemoteStorage_UpdateUserPublishedItemVote(PublishedFileId_t unPublishedFileId, bool bVoteUp){
}

void bbSteamAPI_ISteamRemoteStorage_GetUserPublishedItemVoteDetails(PublishedFileId_t unPublishedFileId){
}

void bbSteamAPI_ISteamRemoteStorage_EnumerateUserSharedWorkshopFiles(CSteamID steamId, uint32 unStartIndex, SteamParamStringArray_t * pRequiredTags, SteamParamStringArray_t * pExcludedTags){
}

void bbSteamAPI_ISteamRemoteStorage_PublishVideo(EWorkshopVideoProvider eVideoProvider, const char * pchVideoAccount, const char * pchVideoIdentifier, const char * pchPreviewFile, AppId_t nConsumerAppId, const char * pchTitle, const char * pchDescription, ERemoteStoragePublishedFileVisibility eVisibility, SteamParamStringArray_t * pTags){
}

void bbSteamAPI_ISteamRemoteStorage_SetUserPublishedFileAction(PublishedFileId_t unPublishedFileId, EWorkshopFileAction eAction){
}

void bbSteamAPI_ISteamRemoteStorage_EnumeratePublishedFilesByUserAction(EWorkshopFileAction eAction, uint32 unStartIndex){
}

void bbSteamAPI_ISteamRemoteStorage_EnumeratePublishedWorkshopFiles(EWorkshopEnumerationType eEnumerationType, uint32 unStartIndex, uint32 unCount, uint32 unDays, SteamParamStringArray_t * pTags, SteamParamStringArray_t * pUserTags){
}

void bbSteamAPI_ISteamRemoteStorage_UGCDownloadToLocation(UGCHandle_t hContent, const char * pchLocation, uint32 unPriority){
}

class ISteamUserStats;
void bbSteamAPI_ISteamUserStats_RequestCurrentStats(){
}

void bbSteamAPI_ISteamUserStats_GetStatInt32(const char * pchName, int32 * pData){
}

void bbSteamAPI_ISteamUserStats_GetStatFloat(const char * pchName, float * pData){
}

void bbSteamAPI_ISteamUserStats_SetStatInt32(const char * pchName, int32 nData){
}

void bbSteamAPI_ISteamUserStats_SetStatFloat(const char * pchName, float fData){
}

void bbSteamAPI_ISteamUserStats_UpdateAvgRateStat(const char * pchName, float flCountThisSession, double dSessionLength){
}

void bbSteamAPI_ISteamUserStats_GetAchievement(const char * pchName, bool * pbAchieved){
}

void bbSteamAPI_ISteamUserStats_SetAchievement(const char * pchName){
}

void bbSteamAPI_ISteamUserStats_ClearAchievement(const char * pchName){
}

void bbSteamAPI_ISteamUserStats_GetAchievementAndUnlockTime(const char * pchName, bool * pbAchieved, uint32 * punUnlockTime){
}

void bbSteamAPI_ISteamUserStats_StoreStats(){
}

void bbSteamAPI_ISteamUserStats_GetAchievementIcon(const char * pchName){
}

void bbSteamAPI_ISteamUserStats_GetAchievementDisplayAttribute(const char * pchName, const char * pchKey){
}

void bbSteamAPI_ISteamUserStats_IndicateAchievementProgress(const char * pchName, uint32 nCurProgress, uint32 nMaxProgress){
}

void bbSteamAPI_ISteamUserStats_GetNumAchievements(){
}

void bbSteamAPI_ISteamUserStats_GetAchievementName(uint32 iAchievement){
}

void bbSteamAPI_ISteamUserStats_RequestUserStats(CSteamID steamIDUser){
}

void bbSteamAPI_ISteamUserStats_GetUserStatInt32(CSteamID steamIDUser, const char * pchName, int32 * pData){
}

void bbSteamAPI_ISteamUserStats_GetUserStatFloat(CSteamID steamIDUser, const char * pchName, float * pData){
}

void bbSteamAPI_ISteamUserStats_GetUserAchievement(CSteamID steamIDUser, const char * pchName, bool * pbAchieved){
}

void bbSteamAPI_ISteamUserStats_GetUserAchievementAndUnlockTime(CSteamID steamIDUser, const char * pchName, bool * pbAchieved, uint32 * punUnlockTime){
}

void bbSteamAPI_ISteamUserStats_ResetAllStats(bool bAchievementsToo){
}

void bbSteamAPI_ISteamUserStats_FindOrCreateLeaderboard(const char * pchLeaderboardName, ELeaderboardSortMethod eLeaderboardSortMethod, ELeaderboardDisplayType eLeaderboardDisplayType){
}

void bbSteamAPI_ISteamUserStats_FindLeaderboard(const char * pchLeaderboardName){
}

void bbSteamAPI_ISteamUserStats_GetLeaderboardName(SteamLeaderboard_t hSteamLeaderboard){
}

void bbSteamAPI_ISteamUserStats_GetLeaderboardEntryCount(SteamLeaderboard_t hSteamLeaderboard){
}

void bbSteamAPI_ISteamUserStats_GetLeaderboardSortMethod(SteamLeaderboard_t hSteamLeaderboard){
}

void bbSteamAPI_ISteamUserStats_GetLeaderboardDisplayType(SteamLeaderboard_t hSteamLeaderboard){
}

void bbSteamAPI_ISteamUserStats_DownloadLeaderboardEntries(SteamLeaderboard_t hSteamLeaderboard, ELeaderboardDataRequest eLeaderboardDataRequest, int nRangeStart, int nRangeEnd){
}

void bbSteamAPI_ISteamUserStats_DownloadLeaderboardEntriesForUsers(SteamLeaderboard_t hSteamLeaderboard, CSteamID * prgUsers, int cUsers){
}

void bbSteamAPI_ISteamUserStats_GetDownloadedLeaderboardEntry(SteamLeaderboardEntries_t hSteamLeaderboardEntries, int index, LeaderboardEntry_t * pLeaderboardEntry, int32 * pDetails, int cDetailsMax){
}

void bbSteamAPI_ISteamUserStats_UploadLeaderboardScore(SteamLeaderboard_t hSteamLeaderboard, ELeaderboardUploadScoreMethod eLeaderboardUploadScoreMethod, int32 nScore, const int32 * pScoreDetails, int cScoreDetailsCount){
}

void bbSteamAPI_ISteamUserStats_AttachLeaderboardUGC(SteamLeaderboard_t hSteamLeaderboard, UGCHandle_t hUGC){
}

void bbSteamAPI_ISteamUserStats_GetNumberOfCurrentPlayers(){
}

void bbSteamAPI_ISteamUserStats_RequestGlobalAchievementPercentages(){
}

void bbSteamAPI_ISteamUserStats_GetMostAchievedAchievementInfo(char * pchName, uint32 unNameBufLen, float * pflPercent, bool * pbAchieved){
}

void bbSteamAPI_ISteamUserStats_GetNextMostAchievedAchievementInfo(int iIteratorPrevious, char * pchName, uint32 unNameBufLen, float * pflPercent, bool * pbAchieved){
}

void bbSteamAPI_ISteamUserStats_GetAchievementAchievedPercent(const char * pchName, float * pflPercent){
}

void bbSteamAPI_ISteamUserStats_RequestGlobalStats(int nHistoryDays){
}

void bbSteamAPI_ISteamUserStats_GetGlobalStatInt64(const char * pchStatName, int64 * pData){
}

void bbSteamAPI_ISteamUserStats_GetGlobalStatDouble(const char * pchStatName, double * pData){
}

void bbSteamAPI_ISteamUserStats_GetGlobalStatHistoryInt64(const char * pchStatName, int64 * pData, uint32 cubData){
}

void bbSteamAPI_ISteamUserStats_GetGlobalStatHistoryDouble(const char * pchStatName, double * pData, uint32 cubData){
}

class ISteamApps;
void bbSteamAPI_ISteamApps_BIsSubscribed(){
}

void bbSteamAPI_ISteamApps_BIsLowViolence(){
}

void bbSteamAPI_ISteamApps_BIsCybercafe(){
}

void bbSteamAPI_ISteamApps_BIsVACBanned(){
}

void bbSteamAPI_ISteamApps_GetCurrentGameLanguage(){
}

void bbSteamAPI_ISteamApps_GetAvailableGameLanguages(){
}

void bbSteamAPI_ISteamApps_BIsSubscribedApp(AppId_t appID){
}

void bbSteamAPI_ISteamApps_BIsDlcInstalled(AppId_t appID){
}

void bbSteamAPI_ISteamApps_GetEarliestPurchaseUnixTime(AppId_t nAppID){
}

void bbSteamAPI_ISteamApps_BIsSubscribedFromFreeWeekend(){
}

void bbSteamAPI_ISteamApps_GetDLCCount(){
}

void bbSteamAPI_ISteamApps_BGetDLCDataByIndex(int iDLC, AppId_t * pAppID, bool * pbAvailable, char * pchName, int cchNameBufferSize){
}

void bbSteamAPI_ISteamApps_InstallDLC(AppId_t nAppID){
}

void bbSteamAPI_ISteamApps_UninstallDLC(AppId_t nAppID){
}

void bbSteamAPI_ISteamApps_RequestAppProofOfPurchaseKey(AppId_t nAppID){
}

void bbSteamAPI_ISteamApps_GetCurrentBetaName(char * pchName, int cchNameBufferSize){
}

void bbSteamAPI_ISteamApps_MarkContentCorrupt(bool bMissingFilesOnly){
}

void bbSteamAPI_ISteamApps_GetInstalledDepots(AppId_t appID, DepotId_t * pvecDepots, uint32 cMaxDepots){
}

void bbSteamAPI_ISteamApps_GetAppInstallDir(AppId_t appID, char * pchFolder, uint32 cchFolderBufferSize){
}

void bbSteamAPI_ISteamApps_BIsAppInstalled(AppId_t appID){
}

void bbSteamAPI_ISteamApps_GetAppOwner(){
}

void bbSteamAPI_ISteamApps_GetLaunchQueryParam(const char * pchKey){
}

void bbSteamAPI_ISteamApps_GetDlcDownloadProgress(AppId_t nAppID, uint64 * punBytesDownloaded, uint64 * punBytesTotal){
}

void bbSteamAPI_ISteamApps_GetAppBuildId(){
}

void bbSteamAPI_ISteamApps_RequestAllProofOfPurchaseKeys(){
}

void bbSteamAPI_ISteamApps_GetFileDetails(const char * pszFileName){
}

void bbSteamAPI_ISteamApps_GetLaunchCommandLine(char * pszCommandLine, int cubCommandLine){
}

void bbSteamAPI_ISteamApps_BIsSubscribedFromFamilySharing(){
}

class ISteamNetworking;
void bbSteamAPI_ISteamNetworking_SendP2PPacket(CSteamID steamIDRemote, const void * pubData, uint32 cubData, EP2PSend eP2PSendType, int nChannel){
}

void bbSteamAPI_ISteamNetworking_IsP2PPacketAvailable(uint32 * pcubMsgSize, int nChannel){
}

void bbSteamAPI_ISteamNetworking_ReadP2PPacket(void * pubDest, uint32 cubDest, uint32 * pcubMsgSize, CSteamID * psteamIDRemote, int nChannel){
}

void bbSteamAPI_ISteamNetworking_AcceptP2PSessionWithUser(CSteamID steamIDRemote){
}

void bbSteamAPI_ISteamNetworking_CloseP2PSessionWithUser(CSteamID steamIDRemote){
}

void bbSteamAPI_ISteamNetworking_CloseP2PChannelWithUser(CSteamID steamIDRemote, int nChannel){
}

void bbSteamAPI_ISteamNetworking_GetP2PSessionState(CSteamID steamIDRemote, P2PSessionState_t * pConnectionState){
}

void bbSteamAPI_ISteamNetworking_AllowP2PPacketRelay(bool bAllow){
}

void bbSteamAPI_ISteamNetworking_CreateListenSocket(int nVirtualP2PPort, SteamIPAddress_t nIP, uint16 nPort, bool bAllowUseOfPacketRelay){
}

void bbSteamAPI_ISteamNetworking_CreateP2PConnectionSocket(CSteamID steamIDTarget, int nVirtualPort, int nTimeoutSec, bool bAllowUseOfPacketRelay){
}

void bbSteamAPI_ISteamNetworking_CreateConnectionSocket(SteamIPAddress_t nIP, uint16 nPort, int nTimeoutSec){
}

void bbSteamAPI_ISteamNetworking_DestroySocket(SNetSocket_t hSocket, bool bNotifyRemoteEnd){
}

void bbSteamAPI_ISteamNetworking_DestroyListenSocket(SNetListenSocket_t hSocket, bool bNotifyRemoteEnd){
}

void bbSteamAPI_ISteamNetworking_SendDataOnSocket(SNetSocket_t hSocket, void * pubData, uint32 cubData, bool bReliable){
}

void bbSteamAPI_ISteamNetworking_IsDataAvailableOnSocket(SNetSocket_t hSocket, uint32 * pcubMsgSize){
}

void bbSteamAPI_ISteamNetworking_RetrieveDataFromSocket(SNetSocket_t hSocket, void * pubDest, uint32 cubDest, uint32 * pcubMsgSize){
}

void bbSteamAPI_ISteamNetworking_IsDataAvailable(SNetListenSocket_t hListenSocket, uint32 * pcubMsgSize, SNetSocket_t * phSocket){
}

void bbSteamAPI_ISteamNetworking_RetrieveData(SNetListenSocket_t hListenSocket, void * pubDest, uint32 cubDest, uint32 * pcubMsgSize, SNetSocket_t * phSocket){
}

void bbSteamAPI_ISteamNetworking_GetSocketInfo(SNetSocket_t hSocket, CSteamID * pSteamIDRemote, int * peSocketStatus, SteamIPAddress_t * punIPRemote, uint16 * punPortRemote){
}

void bbSteamAPI_ISteamNetworking_GetListenSocketInfo(SNetListenSocket_t hListenSocket, SteamIPAddress_t * pnIP, uint16 * pnPort){
}

void bbSteamAPI_ISteamNetworking_GetSocketConnectionType(SNetSocket_t hSocket){
}

void bbSteamAPI_ISteamNetworking_GetMaxPacketSize(SNetSocket_t hSocket){
}

class ISteamScreenshots;
void bbSteamAPI_ISteamScreenshots_WriteScreenshot(void * pubRGB, uint32 cubRGB, int nWidth, int nHeight){
}

void bbSteamAPI_ISteamScreenshots_AddScreenshotToLibrary(const char * pchFilename, const char * pchThumbnailFilename, int nWidth, int nHeight){
}

void bbSteamAPI_ISteamScreenshots_TriggerScreenshot(){
}

void bbSteamAPI_ISteamScreenshots_HookScreenshots(bool bHook){
}

void bbSteamAPI_ISteamScreenshots_SetLocation(ScreenshotHandle hScreenshot, const char * pchLocation){
}

void bbSteamAPI_ISteamScreenshots_TagUser(ScreenshotHandle hScreenshot, CSteamID steamID){
}

void bbSteamAPI_ISteamScreenshots_TagPublishedFile(ScreenshotHandle hScreenshot, PublishedFileId_t unPublishedFileID){
}

void bbSteamAPI_ISteamScreenshots_IsScreenshotsHooked(){
}

void bbSteamAPI_ISteamScreenshots_AddVRScreenshotToLibrary(EVRScreenshotType eType, const char * pchFilename, const char * pchVRFilename){
}

class ISteamMusic;
void bbSteamAPI_ISteamMusic_BIsEnabled(){
}

void bbSteamAPI_ISteamMusic_BIsPlaying(){
}

void bbSteamAPI_ISteamMusic_GetPlaybackStatus(){
}

void bbSteamAPI_ISteamMusic_Play(){
}

void bbSteamAPI_ISteamMusic_Pause(){
}

void bbSteamAPI_ISteamMusic_PlayPrevious(){
}

void bbSteamAPI_ISteamMusic_PlayNext(){
}

void bbSteamAPI_ISteamMusic_SetVolume(float flVolume){
}

void bbSteamAPI_ISteamMusic_GetVolume(){
}

class ISteamMusicRemote;
void bbSteamAPI_ISteamMusicRemote_RegisterSteamMusicRemote(const char * pchName){
}

void bbSteamAPI_ISteamMusicRemote_DeregisterSteamMusicRemote(){
}

void bbSteamAPI_ISteamMusicRemote_BIsCurrentMusicRemote(){
}

void bbSteamAPI_ISteamMusicRemote_BActivationSuccess(bool bValue){
}

void bbSteamAPI_ISteamMusicRemote_SetDisplayName(const char * pchDisplayName){
}

void bbSteamAPI_ISteamMusicRemote_SetPNGIcon_64x64(void * pvBuffer, uint32 cbBufferLength){
}

void bbSteamAPI_ISteamMusicRemote_EnablePlayPrevious(bool bValue){
}

void bbSteamAPI_ISteamMusicRemote_EnablePlayNext(bool bValue){
}

void bbSteamAPI_ISteamMusicRemote_EnableShuffled(bool bValue){
}

void bbSteamAPI_ISteamMusicRemote_EnableLooped(bool bValue){
}

void bbSteamAPI_ISteamMusicRemote_EnableQueue(bool bValue){
}

void bbSteamAPI_ISteamMusicRemote_EnablePlaylists(bool bValue){
}

void bbSteamAPI_ISteamMusicRemote_UpdatePlaybackStatus(AudioPlayback_Status nStatus){
}

void bbSteamAPI_ISteamMusicRemote_UpdateShuffled(bool bValue){
}

void bbSteamAPI_ISteamMusicRemote_UpdateLooped(bool bValue){
}

void bbSteamAPI_ISteamMusicRemote_UpdateVolume(float flValue){
}

void bbSteamAPI_ISteamMusicRemote_CurrentEntryWillChange(){
}

void bbSteamAPI_ISteamMusicRemote_CurrentEntryIsAvailable(bool bAvailable){
}

void bbSteamAPI_ISteamMusicRemote_UpdateCurrentEntryText(const char * pchText){
}

void bbSteamAPI_ISteamMusicRemote_UpdateCurrentEntryElapsedSeconds(int nValue){
}

void bbSteamAPI_ISteamMusicRemote_UpdateCurrentEntryCoverArt(void * pvBuffer, uint32 cbBufferLength){
}

void bbSteamAPI_ISteamMusicRemote_CurrentEntryDidChange(){
}

void bbSteamAPI_ISteamMusicRemote_QueueWillChange(){
}

void bbSteamAPI_ISteamMusicRemote_ResetQueueEntries(){
}

void bbSteamAPI_ISteamMusicRemote_SetQueueEntry(int nID, int nPosition, const char * pchEntryText){
}

void bbSteamAPI_ISteamMusicRemote_SetCurrentQueueEntry(int nID){
}

void bbSteamAPI_ISteamMusicRemote_QueueDidChange(){
}

void bbSteamAPI_ISteamMusicRemote_PlaylistWillChange(){
}

void bbSteamAPI_ISteamMusicRemote_ResetPlaylistEntries(){
}

void bbSteamAPI_ISteamMusicRemote_SetPlaylistEntry(int nID, int nPosition, const char * pchEntryText){
}

void bbSteamAPI_ISteamMusicRemote_SetCurrentPlaylistEntry(int nID){
}

void bbSteamAPI_ISteamMusicRemote_PlaylistDidChange(){
}

class ISteamHTTP;
void bbSteamAPI_ISteamHTTP_CreateHTTPRequest(EHTTPMethod eHTTPRequestMethod, const char * pchAbsoluteURL){
}

void bbSteamAPI_ISteamHTTP_SetHTTPRequestContextValue(HTTPRequestHandle hRequest, uint64 ulContextValue){
}

void bbSteamAPI_ISteamHTTP_SetHTTPRequestNetworkActivityTimeout(HTTPRequestHandle hRequest, uint32 unTimeoutSeconds){
}

void bbSteamAPI_ISteamHTTP_SetHTTPRequestHeaderValue(HTTPRequestHandle hRequest, const char * pchHeaderName, const char * pchHeaderValue){
}

void bbSteamAPI_ISteamHTTP_SetHTTPRequestGetOrPostParameter(HTTPRequestHandle hRequest, const char * pchParamName, const char * pchParamValue){
}

void bbSteamAPI_ISteamHTTP_SendHTTPRequest(HTTPRequestHandle hRequest, SteamAPICall_t * pCallHandle){
}

void bbSteamAPI_ISteamHTTP_SendHTTPRequestAndStreamResponse(HTTPRequestHandle hRequest, SteamAPICall_t * pCallHandle){
}

void bbSteamAPI_ISteamHTTP_DeferHTTPRequest(HTTPRequestHandle hRequest){
}

void bbSteamAPI_ISteamHTTP_PrioritizeHTTPRequest(HTTPRequestHandle hRequest){
}

void bbSteamAPI_ISteamHTTP_GetHTTPResponseHeaderSize(HTTPRequestHandle hRequest, const char * pchHeaderName, uint32 * unResponseHeaderSize){
}

void bbSteamAPI_ISteamHTTP_GetHTTPResponseHeaderValue(HTTPRequestHandle hRequest, const char * pchHeaderName, uint8 * pHeaderValueBuffer, uint32 unBufferSize){
}

void bbSteamAPI_ISteamHTTP_GetHTTPResponseBodySize(HTTPRequestHandle hRequest, uint32 * unBodySize){
}

void bbSteamAPI_ISteamHTTP_GetHTTPResponseBodyData(HTTPRequestHandle hRequest, uint8 * pBodyDataBuffer, uint32 unBufferSize){
}

void bbSteamAPI_ISteamHTTP_GetHTTPStreamingResponseBodyData(HTTPRequestHandle hRequest, uint32 cOffset, uint8 * pBodyDataBuffer, uint32 unBufferSize){
}

void bbSteamAPI_ISteamHTTP_ReleaseHTTPRequest(HTTPRequestHandle hRequest){
}

void bbSteamAPI_ISteamHTTP_GetHTTPDownloadProgressPct(HTTPRequestHandle hRequest, float * pflPercentOut){
}

void bbSteamAPI_ISteamHTTP_SetHTTPRequestRawPostBody(HTTPRequestHandle hRequest, const char * pchContentType, uint8 * pubBody, uint32 unBodyLen){
}

void bbSteamAPI_ISteamHTTP_CreateCookieContainer(bool bAllowResponsesToModify){
}

void bbSteamAPI_ISteamHTTP_ReleaseCookieContainer(HTTPCookieContainerHandle hCookieContainer){
}

void bbSteamAPI_ISteamHTTP_SetCookie(HTTPCookieContainerHandle hCookieContainer, const char * pchHost, const char * pchUrl, const char * pchCookie){
}

void bbSteamAPI_ISteamHTTP_SetHTTPRequestCookieContainer(HTTPRequestHandle hRequest, HTTPCookieContainerHandle hCookieContainer){
}

void bbSteamAPI_ISteamHTTP_SetHTTPRequestUserAgentInfo(HTTPRequestHandle hRequest, const char * pchUserAgentInfo){
}

void bbSteamAPI_ISteamHTTP_SetHTTPRequestRequiresVerifiedCertificate(HTTPRequestHandle hRequest, bool bRequireVerifiedCertificate){
}

void bbSteamAPI_ISteamHTTP_SetHTTPRequestAbsoluteTimeoutMS(HTTPRequestHandle hRequest, uint32 unMilliseconds){
}

void bbSteamAPI_ISteamHTTP_GetHTTPRequestWasTimedOut(HTTPRequestHandle hRequest, bool * pbWasTimedOut){
}

class ISteamInput;
void bbSteamAPI_ISteamInput_Init(){
}

void bbSteamAPI_ISteamInput_Shutdown(){
}

void bbSteamAPI_ISteamInput_RunFrame(){
}

void bbSteamAPI_ISteamInput_GetConnectedControllers(InputHandle_t * handlesOut){
}

void bbSteamAPI_ISteamInput_GetActionSetHandle(const char * pszActionSetName){
}

void bbSteamAPI_ISteamInput_ActivateActionSet(InputHandle_t inputHandle, InputActionSetHandle_t actionSetHandle){
}

void bbSteamAPI_ISteamInput_GetCurrentActionSet(InputHandle_t inputHandle){
}

void bbSteamAPI_ISteamInput_ActivateActionSetLayer(InputHandle_t inputHandle, InputActionSetHandle_t actionSetLayerHandle){
}

void bbSteamAPI_ISteamInput_DeactivateActionSetLayer(InputHandle_t inputHandle, InputActionSetHandle_t actionSetLayerHandle){
}

void bbSteamAPI_ISteamInput_DeactivateAllActionSetLayers(InputHandle_t inputHandle){
}

void bbSteamAPI_ISteamInput_GetActiveActionSetLayers(InputHandle_t inputHandle, InputActionSetHandle_t * handlesOut){
}

void bbSteamAPI_ISteamInput_GetDigitalActionHandle(const char * pszActionName){
}

void bbSteamAPI_ISteamInput_GetDigitalActionData(InputHandle_t inputHandle, InputDigitalActionHandle_t digitalActionHandle){
}

void bbSteamAPI_ISteamInput_GetDigitalActionOrigins(InputHandle_t inputHandle, InputActionSetHandle_t actionSetHandle, InputDigitalActionHandle_t digitalActionHandle, EInputActionOrigin * originsOut){
}

void bbSteamAPI_ISteamInput_GetAnalogActionHandle(const char * pszActionName){
}

void bbSteamAPI_ISteamInput_GetAnalogActionData(InputHandle_t inputHandle, InputAnalogActionHandle_t analogActionHandle){
}

void bbSteamAPI_ISteamInput_GetAnalogActionOrigins(InputHandle_t inputHandle, InputActionSetHandle_t actionSetHandle, InputAnalogActionHandle_t analogActionHandle, EInputActionOrigin * originsOut){
}

void bbSteamAPI_ISteamInput_GetGlyphForActionOrigin(EInputActionOrigin eOrigin){
}

void bbSteamAPI_ISteamInput_GetStringForActionOrigin(EInputActionOrigin eOrigin){
}

void bbSteamAPI_ISteamInput_StopAnalogActionMomentum(InputHandle_t inputHandle, InputAnalogActionHandle_t eAction){
}

void bbSteamAPI_ISteamInput_GetMotionData(InputHandle_t inputHandle){
}

void bbSteamAPI_ISteamInput_TriggerVibration(InputHandle_t inputHandle, unsigned short usLeftSpeed, unsigned short usRightSpeed){
}

void bbSteamAPI_ISteamInput_SetLEDColor(InputHandle_t inputHandle, uint8 nColorR, uint8 nColorG, uint8 nColorB, unsigned int nFlags){
}

void bbSteamAPI_ISteamInput_TriggerHapticPulse(InputHandle_t inputHandle, ESteamControllerPad eTargetPad, unsigned short usDurationMicroSec){
}

void bbSteamAPI_ISteamInput_TriggerRepeatedHapticPulse(InputHandle_t inputHandle, ESteamControllerPad eTargetPad, unsigned short usDurationMicroSec, unsigned short usOffMicroSec, unsigned short unRepeat, unsigned int nFlags){
}

void bbSteamAPI_ISteamInput_ShowBindingPanel(InputHandle_t inputHandle){
}

void bbSteamAPI_ISteamInput_GetInputTypeForHandle(InputHandle_t inputHandle){
}

void bbSteamAPI_ISteamInput_GetControllerForGamepadIndex(int nIndex){
}

void bbSteamAPI_ISteamInput_GetGamepadIndexForController(InputHandle_t ulinputHandle){
}

void bbSteamAPI_ISteamInput_GetStringForXboxOrigin(EXboxOrigin eOrigin){
}

void bbSteamAPI_ISteamInput_GetGlyphForXboxOrigin(EXboxOrigin eOrigin){
}

void bbSteamAPI_ISteamInput_GetActionOriginFromXboxOrigin(InputHandle_t inputHandle, EXboxOrigin eOrigin){
}

void bbSteamAPI_ISteamInput_TranslateActionOrigin(ESteamInputType eDestinationInputType, EInputActionOrigin eSourceOrigin){
}

void bbSteamAPI_ISteamInput_GetDeviceBindingRevision(InputHandle_t inputHandle, int * pMajor, int * pMinor){
}

void bbSteamAPI_ISteamInput_GetRemotePlaySessionID(InputHandle_t inputHandle){
}

class ISteamController;
void bbSteamAPI_ISteamController_Init(){
}

void bbSteamAPI_ISteamController_Shutdown(){
}

void bbSteamAPI_ISteamController_RunFrame(){
}

void bbSteamAPI_ISteamController_GetConnectedControllers(ControllerHandle_t * handlesOut){
}

void bbSteamAPI_ISteamController_GetActionSetHandle(const char * pszActionSetName){
}

void bbSteamAPI_ISteamController_ActivateActionSet(ControllerHandle_t controllerHandle, ControllerActionSetHandle_t actionSetHandle){
}

void bbSteamAPI_ISteamController_GetCurrentActionSet(ControllerHandle_t controllerHandle){
}

void bbSteamAPI_ISteamController_ActivateActionSetLayer(ControllerHandle_t controllerHandle, ControllerActionSetHandle_t actionSetLayerHandle){
}

void bbSteamAPI_ISteamController_DeactivateActionSetLayer(ControllerHandle_t controllerHandle, ControllerActionSetHandle_t actionSetLayerHandle){
}

void bbSteamAPI_ISteamController_DeactivateAllActionSetLayers(ControllerHandle_t controllerHandle){
}

void bbSteamAPI_ISteamController_GetActiveActionSetLayers(ControllerHandle_t controllerHandle, ControllerActionSetHandle_t * handlesOut){
}

void bbSteamAPI_ISteamController_GetDigitalActionHandle(const char * pszActionName){
}

void bbSteamAPI_ISteamController_GetDigitalActionData(ControllerHandle_t controllerHandle, ControllerDigitalActionHandle_t digitalActionHandle){
}

void bbSteamAPI_ISteamController_GetDigitalActionOrigins(ControllerHandle_t controllerHandle, ControllerActionSetHandle_t actionSetHandle, ControllerDigitalActionHandle_t digitalActionHandle, EControllerActionOrigin * originsOut){
}

void bbSteamAPI_ISteamController_GetAnalogActionHandle(const char * pszActionName){
}

void bbSteamAPI_ISteamController_GetAnalogActionData(ControllerHandle_t controllerHandle, ControllerAnalogActionHandle_t analogActionHandle){
}

void bbSteamAPI_ISteamController_GetAnalogActionOrigins(ControllerHandle_t controllerHandle, ControllerActionSetHandle_t actionSetHandle, ControllerAnalogActionHandle_t analogActionHandle, EControllerActionOrigin * originsOut){
}

void bbSteamAPI_ISteamController_GetGlyphForActionOrigin(EControllerActionOrigin eOrigin){
}

void bbSteamAPI_ISteamController_GetStringForActionOrigin(EControllerActionOrigin eOrigin){
}

void bbSteamAPI_ISteamController_StopAnalogActionMomentum(ControllerHandle_t controllerHandle, ControllerAnalogActionHandle_t eAction){
}

void bbSteamAPI_ISteamController_GetMotionData(ControllerHandle_t controllerHandle){
}

void bbSteamAPI_ISteamController_TriggerHapticPulse(ControllerHandle_t controllerHandle, ESteamControllerPad eTargetPad, unsigned short usDurationMicroSec){
}

void bbSteamAPI_ISteamController_TriggerRepeatedHapticPulse(ControllerHandle_t controllerHandle, ESteamControllerPad eTargetPad, unsigned short usDurationMicroSec, unsigned short usOffMicroSec, unsigned short unRepeat, unsigned int nFlags){
}

void bbSteamAPI_ISteamController_TriggerVibration(ControllerHandle_t controllerHandle, unsigned short usLeftSpeed, unsigned short usRightSpeed){
}

void bbSteamAPI_ISteamController_SetLEDColor(ControllerHandle_t controllerHandle, uint8 nColorR, uint8 nColorG, uint8 nColorB, unsigned int nFlags){
}

void bbSteamAPI_ISteamController_ShowBindingPanel(ControllerHandle_t controllerHandle){
}

void bbSteamAPI_ISteamController_GetInputTypeForHandle(ControllerHandle_t controllerHandle){
}

void bbSteamAPI_ISteamController_GetControllerForGamepadIndex(int nIndex){
}

void bbSteamAPI_ISteamController_GetGamepadIndexForController(ControllerHandle_t ulControllerHandle){
}

void bbSteamAPI_ISteamController_GetStringForXboxOrigin(EXboxOrigin eOrigin){
}

void bbSteamAPI_ISteamController_GetGlyphForXboxOrigin(EXboxOrigin eOrigin){
}

void bbSteamAPI_ISteamController_GetActionOriginFromXboxOrigin(ControllerHandle_t controllerHandle, EXboxOrigin eOrigin){
}

void bbSteamAPI_ISteamController_TranslateActionOrigin(ESteamInputType eDestinationInputType, EControllerActionOrigin eSourceOrigin){
}

void bbSteamAPI_ISteamController_GetControllerBindingRevision(ControllerHandle_t controllerHandle, int * pMajor, int * pMinor){
}

class ISteamUGC;
void bbSteamAPI_ISteamUGC_CreateQueryUserUGCRequest(AccountID_t unAccountID, EUserUGCList eListType, EUGCMatchingUGCType eMatchingUGCType, EUserUGCListSortOrder eSortOrder, AppId_t nCreatorAppID, AppId_t nConsumerAppID, uint32 unPage){
}

void bbSteamAPI_ISteamUGC_CreateQueryAllUGCRequestPage(EUGCQuery eQueryType, EUGCMatchingUGCType eMatchingeMatchingUGCTypeFileType, AppId_t nCreatorAppID, AppId_t nConsumerAppID, uint32 unPage){
}

void bbSteamAPI_ISteamUGC_CreateQueryAllUGCRequestCursor(EUGCQuery eQueryType, EUGCMatchingUGCType eMatchingeMatchingUGCTypeFileType, AppId_t nCreatorAppID, AppId_t nConsumerAppID, const char * pchCursor){
}

void bbSteamAPI_ISteamUGC_CreateQueryUGCDetailsRequest(PublishedFileId_t * pvecPublishedFileID, uint32 unNumPublishedFileIDs){
}

void bbSteamAPI_ISteamUGC_SendQueryUGCRequest(UGCQueryHandle_t handle){
}

void bbSteamAPI_ISteamUGC_GetQueryUGCResult(UGCQueryHandle_t handle, uint32 index, SteamUGCDetails_t * pDetails){
}

void bbSteamAPI_ISteamUGC_GetQueryUGCPreviewURL(UGCQueryHandle_t handle, uint32 index, char * pchURL, uint32 cchURLSize){
}

void bbSteamAPI_ISteamUGC_GetQueryUGCMetadata(UGCQueryHandle_t handle, uint32 index, char * pchMetadata, uint32 cchMetadatasize){
}

void bbSteamAPI_ISteamUGC_GetQueryUGCChildren(UGCQueryHandle_t handle, uint32 index, PublishedFileId_t * pvecPublishedFileID, uint32 cMaxEntries){
}

void bbSteamAPI_ISteamUGC_GetQueryUGCStatistic(UGCQueryHandle_t handle, uint32 index, EItemStatistic eStatType, uint64 * pStatValue){
}

void bbSteamAPI_ISteamUGC_GetQueryUGCNumAdditionalPreviews(UGCQueryHandle_t handle, uint32 index){
}

void bbSteamAPI_ISteamUGC_GetQueryUGCAdditionalPreview(UGCQueryHandle_t handle, uint32 index, uint32 previewIndex, char * pchURLOrVideoID, uint32 cchURLSize, char * pchOriginalFileName, uint32 cchOriginalFileNameSize, EItemPreviewType * pPreviewType){
}

void bbSteamAPI_ISteamUGC_GetQueryUGCNumKeyValueTags(UGCQueryHandle_t handle, uint32 index){
}

void bbSteamAPI_ISteamUGC_GetQueryUGCKeyValueTag(UGCQueryHandle_t handle, uint32 index, uint32 keyValueTagIndex, char * pchKey, uint32 cchKeySize, char * pchValue, uint32 cchValueSize){
}

void bbSteamAPI_ISteamUGC_GetQueryFirstUGCKeyValueTag(UGCQueryHandle_t handle, uint32 index, const char * pchKey, char * pchValue, uint32 cchValueSize){
}

void bbSteamAPI_ISteamUGC_ReleaseQueryUGCRequest(UGCQueryHandle_t handle){
}

void bbSteamAPI_ISteamUGC_AddRequiredTag(UGCQueryHandle_t handle, const char * pTagName){
}

void bbSteamAPI_ISteamUGC_AddRequiredTagGroup(UGCQueryHandle_t handle, const SteamParamStringArray_t * pTagGroups){
}

void bbSteamAPI_ISteamUGC_AddExcludedTag(UGCQueryHandle_t handle, const char * pTagName){
}

void bbSteamAPI_ISteamUGC_SetReturnOnlyIDs(UGCQueryHandle_t handle, bool bReturnOnlyIDs){
}

void bbSteamAPI_ISteamUGC_SetReturnKeyValueTags(UGCQueryHandle_t handle, bool bReturnKeyValueTags){
}

void bbSteamAPI_ISteamUGC_SetReturnLongDescription(UGCQueryHandle_t handle, bool bReturnLongDescription){
}

void bbSteamAPI_ISteamUGC_SetReturnMetadata(UGCQueryHandle_t handle, bool bReturnMetadata){
}

void bbSteamAPI_ISteamUGC_SetReturnChildren(UGCQueryHandle_t handle, bool bReturnChildren){
}

void bbSteamAPI_ISteamUGC_SetReturnAdditionalPreviews(UGCQueryHandle_t handle, bool bReturnAdditionalPreviews){
}

void bbSteamAPI_ISteamUGC_SetReturnTotalOnly(UGCQueryHandle_t handle, bool bReturnTotalOnly){
}

void bbSteamAPI_ISteamUGC_SetReturnPlaytimeStats(UGCQueryHandle_t handle, uint32 unDays){
}

void bbSteamAPI_ISteamUGC_SetLanguage(UGCQueryHandle_t handle, const char * pchLanguage){
}

void bbSteamAPI_ISteamUGC_SetAllowCachedResponse(UGCQueryHandle_t handle, uint32 unMaxAgeSeconds){
}

void bbSteamAPI_ISteamUGC_SetCloudFileNameFilter(UGCQueryHandle_t handle, const char * pMatchCloudFileName){
}

void bbSteamAPI_ISteamUGC_SetMatchAnyTag(UGCQueryHandle_t handle, bool bMatchAnyTag){
}

void bbSteamAPI_ISteamUGC_SetSearchText(UGCQueryHandle_t handle, const char * pSearchText){
}

void bbSteamAPI_ISteamUGC_SetRankedByTrendDays(UGCQueryHandle_t handle, uint32 unDays){
}

void bbSteamAPI_ISteamUGC_AddRequiredKeyValueTag(UGCQueryHandle_t handle, const char * pKey, const char * pValue){
}

void bbSteamAPI_ISteamUGC_RequestUGCDetails(PublishedFileId_t nPublishedFileID, uint32 unMaxAgeSeconds){
}

void bbSteamAPI_ISteamUGC_CreateItem(AppId_t nConsumerAppId, EWorkshopFileType eFileType){
}

void bbSteamAPI_ISteamUGC_StartItemUpdate(AppId_t nConsumerAppId, PublishedFileId_t nPublishedFileID){
}

void bbSteamAPI_ISteamUGC_SetItemTitle(UGCUpdateHandle_t handle, const char * pchTitle){
}

void bbSteamAPI_ISteamUGC_SetItemDescription(UGCUpdateHandle_t handle, const char * pchDescription){
}

void bbSteamAPI_ISteamUGC_SetItemUpdateLanguage(UGCUpdateHandle_t handle, const char * pchLanguage){
}

void bbSteamAPI_ISteamUGC_SetItemMetadata(UGCUpdateHandle_t handle, const char * pchMetaData){
}

void bbSteamAPI_ISteamUGC_SetItemVisibility(UGCUpdateHandle_t handle, ERemoteStoragePublishedFileVisibility eVisibility){
}

void bbSteamAPI_ISteamUGC_SetItemTags(UGCUpdateHandle_t updateHandle, const SteamParamStringArray_t * pTags){
}

void bbSteamAPI_ISteamUGC_SetItemContent(UGCUpdateHandle_t handle, const char * pszContentFolder){
}

void bbSteamAPI_ISteamUGC_SetItemPreview(UGCUpdateHandle_t handle, const char * pszPreviewFile){
}

void bbSteamAPI_ISteamUGC_SetAllowLegacyUpload(UGCUpdateHandle_t handle, bool bAllowLegacyUpload){
}

void bbSteamAPI_ISteamUGC_RemoveAllItemKeyValueTags(UGCUpdateHandle_t handle){
}

void bbSteamAPI_ISteamUGC_RemoveItemKeyValueTags(UGCUpdateHandle_t handle, const char * pchKey){
}

void bbSteamAPI_ISteamUGC_AddItemKeyValueTag(UGCUpdateHandle_t handle, const char * pchKey, const char * pchValue){
}

void bbSteamAPI_ISteamUGC_AddItemPreviewFile(UGCUpdateHandle_t handle, const char * pszPreviewFile, EItemPreviewType type){
}

void bbSteamAPI_ISteamUGC_AddItemPreviewVideo(UGCUpdateHandle_t handle, const char * pszVideoID){
}

void bbSteamAPI_ISteamUGC_UpdateItemPreviewFile(UGCUpdateHandle_t handle, uint32 index, const char * pszPreviewFile){
}

void bbSteamAPI_ISteamUGC_UpdateItemPreviewVideo(UGCUpdateHandle_t handle, uint32 index, const char * pszVideoID){
}

void bbSteamAPI_ISteamUGC_RemoveItemPreview(UGCUpdateHandle_t handle, uint32 index){
}

void bbSteamAPI_ISteamUGC_SubmitItemUpdate(UGCUpdateHandle_t handle, const char * pchChangeNote){
}

void bbSteamAPI_ISteamUGC_GetItemUpdateProgress(UGCUpdateHandle_t handle, uint64 * punBytesProcessed, uint64 * punBytesTotal){
}

void bbSteamAPI_ISteamUGC_SetUserItemVote(PublishedFileId_t nPublishedFileID, bool bVoteUp){
}

void bbSteamAPI_ISteamUGC_GetUserItemVote(PublishedFileId_t nPublishedFileID){
}

void bbSteamAPI_ISteamUGC_AddItemToFavorites(AppId_t nAppId, PublishedFileId_t nPublishedFileID){
}

void bbSteamAPI_ISteamUGC_RemoveItemFromFavorites(AppId_t nAppId, PublishedFileId_t nPublishedFileID){
}

void bbSteamAPI_ISteamUGC_SubscribeItem(PublishedFileId_t nPublishedFileID){
}

void bbSteamAPI_ISteamUGC_UnsubscribeItem(PublishedFileId_t nPublishedFileID){
}

void bbSteamAPI_ISteamUGC_GetNumSubscribedItems(){
}

void bbSteamAPI_ISteamUGC_GetSubscribedItems(PublishedFileId_t * pvecPublishedFileID, uint32 cMaxEntries){
}

void bbSteamAPI_ISteamUGC_GetItemState(PublishedFileId_t nPublishedFileID){
}

void bbSteamAPI_ISteamUGC_GetItemInstallInfo(PublishedFileId_t nPublishedFileID, uint64 * punSizeOnDisk, char * pchFolder, uint32 cchFolderSize, uint32 * punTimeStamp){
}

void bbSteamAPI_ISteamUGC_GetItemDownloadInfo(PublishedFileId_t nPublishedFileID, uint64 * punBytesDownloaded, uint64 * punBytesTotal){
}

void bbSteamAPI_ISteamUGC_DownloadItem(PublishedFileId_t nPublishedFileID, bool bHighPriority){
}

void bbSteamAPI_ISteamUGC_BInitWorkshopForGameServer(DepotId_t unWorkshopDepotID, const char * pszFolder){
}

void bbSteamAPI_ISteamUGC_SuspendDownloads(bool bSuspend){
}

void bbSteamAPI_ISteamUGC_StartPlaytimeTracking(PublishedFileId_t * pvecPublishedFileID, uint32 unNumPublishedFileIDs){
}

void bbSteamAPI_ISteamUGC_StopPlaytimeTracking(PublishedFileId_t * pvecPublishedFileID, uint32 unNumPublishedFileIDs){
}

void bbSteamAPI_ISteamUGC_StopPlaytimeTrackingForAllItems(){
}

void bbSteamAPI_ISteamUGC_AddDependency(PublishedFileId_t nParentPublishedFileID, PublishedFileId_t nChildPublishedFileID){
}

void bbSteamAPI_ISteamUGC_RemoveDependency(PublishedFileId_t nParentPublishedFileID, PublishedFileId_t nChildPublishedFileID){
}

void bbSteamAPI_ISteamUGC_AddAppDependency(PublishedFileId_t nPublishedFileID, AppId_t nAppID){
}

void bbSteamAPI_ISteamUGC_RemoveAppDependency(PublishedFileId_t nPublishedFileID, AppId_t nAppID){
}

void bbSteamAPI_ISteamUGC_GetAppDependencies(PublishedFileId_t nPublishedFileID){
}

void bbSteamAPI_ISteamUGC_DeleteItem(PublishedFileId_t nPublishedFileID){
}

class ISteamAppList;
void bbSteamAPI_ISteamAppList_GetNumInstalledApps(){
}

void bbSteamAPI_ISteamAppList_GetInstalledApps(AppId_t * pvecAppID, uint32 unMaxAppIDs){
}

void bbSteamAPI_ISteamAppList_GetAppName(AppId_t nAppID, char * pchName, int cchNameMax){
}

void bbSteamAPI_ISteamAppList_GetAppInstallDir(AppId_t nAppID, char * pchDirectory, int cchNameMax){
}

void bbSteamAPI_ISteamAppList_GetAppBuildId(AppId_t nAppID){
}

class ISteamHTMLSurface;
void bbSteamAPI_ISteamHTMLSurface_Init(){
}

void bbSteamAPI_ISteamHTMLSurface_Shutdown(){
}

void bbSteamAPI_ISteamHTMLSurface_CreateBrowser(const char * pchUserAgent, const char * pchUserCSS){
}

void bbSteamAPI_ISteamHTMLSurface_RemoveBrowser(HHTMLBrowser unBrowserHandle){
}

void bbSteamAPI_ISteamHTMLSurface_LoadURL(HHTMLBrowser unBrowserHandle, const char * pchURL, const char * pchPostData){
}

void bbSteamAPI_ISteamHTMLSurface_SetSize(HHTMLBrowser unBrowserHandle, uint32 unWidth, uint32 unHeight){
}

void bbSteamAPI_ISteamHTMLSurface_StopLoad(HHTMLBrowser unBrowserHandle){
}

void bbSteamAPI_ISteamHTMLSurface_Reload(HHTMLBrowser unBrowserHandle){
}

void bbSteamAPI_ISteamHTMLSurface_GoBack(HHTMLBrowser unBrowserHandle){
}

void bbSteamAPI_ISteamHTMLSurface_GoForward(HHTMLBrowser unBrowserHandle){
}

void bbSteamAPI_ISteamHTMLSurface_AddHeader(HHTMLBrowser unBrowserHandle, const char * pchKey, const char * pchValue){
}

void bbSteamAPI_ISteamHTMLSurface_ExecuteJavascript(HHTMLBrowser unBrowserHandle, const char * pchScript){
}

void bbSteamAPI_ISteamHTMLSurface_MouseUp(HHTMLBrowser unBrowserHandle, ISteamHTMLSurface::EHTMLMouseButton eMouseButton){
}

void bbSteamAPI_ISteamHTMLSurface_MouseDown(HHTMLBrowser unBrowserHandle, ISteamHTMLSurface::EHTMLMouseButton eMouseButton){
}

void bbSteamAPI_ISteamHTMLSurface_MouseDoubleClick(HHTMLBrowser unBrowserHandle, ISteamHTMLSurface::EHTMLMouseButton eMouseButton){
}

void bbSteamAPI_ISteamHTMLSurface_MouseMove(HHTMLBrowser unBrowserHandle, int x, int y){
}

void bbSteamAPI_ISteamHTMLSurface_MouseWheel(HHTMLBrowser unBrowserHandle, int32 nDelta){
}

void bbSteamAPI_ISteamHTMLSurface_KeyDown(HHTMLBrowser unBrowserHandle, uint32 nNativeKeyCode, ISteamHTMLSurface::EHTMLKeyModifiers eHTMLKeyModifiers, bool bIsSystemKey){
}

void bbSteamAPI_ISteamHTMLSurface_KeyUp(HHTMLBrowser unBrowserHandle, uint32 nNativeKeyCode, ISteamHTMLSurface::EHTMLKeyModifiers eHTMLKeyModifiers){
}

void bbSteamAPI_ISteamHTMLSurface_KeyChar(HHTMLBrowser unBrowserHandle, uint32 cUnicodeChar, ISteamHTMLSurface::EHTMLKeyModifiers eHTMLKeyModifiers){
}

void bbSteamAPI_ISteamHTMLSurface_SetHorizontalScroll(HHTMLBrowser unBrowserHandle, uint32 nAbsolutePixelScroll){
}

void bbSteamAPI_ISteamHTMLSurface_SetVerticalScroll(HHTMLBrowser unBrowserHandle, uint32 nAbsolutePixelScroll){
}

void bbSteamAPI_ISteamHTMLSurface_SetKeyFocus(HHTMLBrowser unBrowserHandle, bool bHasKeyFocus){
}

void bbSteamAPI_ISteamHTMLSurface_ViewSource(HHTMLBrowser unBrowserHandle){
}

void bbSteamAPI_ISteamHTMLSurface_CopyToClipboard(HHTMLBrowser unBrowserHandle){
}

void bbSteamAPI_ISteamHTMLSurface_PasteFromClipboard(HHTMLBrowser unBrowserHandle){
}

void bbSteamAPI_ISteamHTMLSurface_Find(HHTMLBrowser unBrowserHandle, const char * pchSearchStr, bool bCurrentlyInFind, bool bReverse){
}

void bbSteamAPI_ISteamHTMLSurface_StopFind(HHTMLBrowser unBrowserHandle){
}

void bbSteamAPI_ISteamHTMLSurface_GetLinkAtPosition(HHTMLBrowser unBrowserHandle, int x, int y){
}

void bbSteamAPI_ISteamHTMLSurface_SetCookie(const char * pchHostname, const char * pchKey, const char * pchValue, const char * pchPath, RTime32 nExpires, bool bSecure, bool bHTTPOnly){
}

void bbSteamAPI_ISteamHTMLSurface_SetPageScaleFactor(HHTMLBrowser unBrowserHandle, float flZoom, int nPointX, int nPointY){
}

void bbSteamAPI_ISteamHTMLSurface_SetBackgroundMode(HHTMLBrowser unBrowserHandle, bool bBackgroundMode){
}

void bbSteamAPI_ISteamHTMLSurface_SetDPIScalingFactor(HHTMLBrowser unBrowserHandle, float flDPIScaling){
}

void bbSteamAPI_ISteamHTMLSurface_OpenDeveloperTools(HHTMLBrowser unBrowserHandle){
}

void bbSteamAPI_ISteamHTMLSurface_AllowStartRequest(HHTMLBrowser unBrowserHandle, bool bAllowed){
}

void bbSteamAPI_ISteamHTMLSurface_JSDialogResponse(HHTMLBrowser unBrowserHandle, bool bResult){
}

void bbSteamAPI_ISteamHTMLSurface_FileLoadDialogResponse(HHTMLBrowser unBrowserHandle, const char ** pchSelectedFiles){
}

class ISteamInventory;
void bbSteamAPI_ISteamInventory_GetResultStatus(SteamInventoryResult_t resultHandle){
}

void bbSteamAPI_ISteamInventory_GetResultItems(SteamInventoryResult_t resultHandle, SteamItemDetails_t * pOutItemsArray, uint32 * punOutItemsArraySize){
}

void bbSteamAPI_ISteamInventory_GetResultItemProperty(SteamInventoryResult_t resultHandle, uint32 unItemIndex, const char * pchPropertyName, char * pchValueBuffer, uint32 * punValueBufferSizeOut){
}

void bbSteamAPI_ISteamInventory_GetResultTimestamp(SteamInventoryResult_t resultHandle){
}

void bbSteamAPI_ISteamInventory_CheckResultSteamID(SteamInventoryResult_t resultHandle, CSteamID steamIDExpected){
}

void bbSteamAPI_ISteamInventory_DestroyResult(SteamInventoryResult_t resultHandle){
}

void bbSteamAPI_ISteamInventory_GetAllItems(SteamInventoryResult_t * pResultHandle){
}

void bbSteamAPI_ISteamInventory_GetItemsByID(SteamInventoryResult_t * pResultHandle, const SteamItemInstanceID_t * pInstanceIDs, uint32 unCountInstanceIDs){
}

void bbSteamAPI_ISteamInventory_SerializeResult(SteamInventoryResult_t resultHandle, void * pOutBuffer, uint32 * punOutBufferSize){
}

void bbSteamAPI_ISteamInventory_DeserializeResult(SteamInventoryResult_t * pOutResultHandle, const void * pBuffer, uint32 unBufferSize, bool bRESERVED_MUST_BE_FALSE){
}

void bbSteamAPI_ISteamInventory_GenerateItems(SteamInventoryResult_t * pResultHandle, const SteamItemDef_t * pArrayItemDefs, const uint32 * punArrayQuantity, uint32 unArrayLength){
}

void bbSteamAPI_ISteamInventory_GrantPromoItems(SteamInventoryResult_t * pResultHandle){
}

void bbSteamAPI_ISteamInventory_AddPromoItem(SteamInventoryResult_t * pResultHandle, SteamItemDef_t itemDef){
}

void bbSteamAPI_ISteamInventory_AddPromoItems(SteamInventoryResult_t * pResultHandle, const SteamItemDef_t * pArrayItemDefs, uint32 unArrayLength){
}

void bbSteamAPI_ISteamInventory_ConsumeItem(SteamInventoryResult_t * pResultHandle, SteamItemInstanceID_t itemConsume, uint32 unQuantity){
}

void bbSteamAPI_ISteamInventory_ExchangeItems(SteamInventoryResult_t * pResultHandle, const SteamItemDef_t * pArrayGenerate, const uint32 * punArrayGenerateQuantity, uint32 unArrayGenerateLength, const SteamItemInstanceID_t * pArrayDestroy, const uint32 * punArrayDestroyQuantity, uint32 unArrayDestroyLength){
}

void bbSteamAPI_ISteamInventory_TransferItemQuantity(SteamInventoryResult_t * pResultHandle, SteamItemInstanceID_t itemIdSource, uint32 unQuantity, SteamItemInstanceID_t itemIdDest){
}

void bbSteamAPI_ISteamInventory_SendItemDropHeartbeat(){
}

void bbSteamAPI_ISteamInventory_TriggerItemDrop(SteamInventoryResult_t * pResultHandle, SteamItemDef_t dropListDefinition){
}

void bbSteamAPI_ISteamInventory_TradeItems(SteamInventoryResult_t * pResultHandle, CSteamID steamIDTradePartner, const SteamItemInstanceID_t * pArrayGive, const uint32 * pArrayGiveQuantity, uint32 nArrayGiveLength, const SteamItemInstanceID_t * pArrayGet, const uint32 * pArrayGetQuantity, uint32 nArrayGetLength){
}

void bbSteamAPI_ISteamInventory_LoadItemDefinitions(){
}

void bbSteamAPI_ISteamInventory_GetItemDefinitionIDs(SteamItemDef_t * pItemDefIDs, uint32 * punItemDefIDsArraySize){
}

void bbSteamAPI_ISteamInventory_GetItemDefinitionProperty(SteamItemDef_t iDefinition, const char * pchPropertyName, char * pchValueBuffer, uint32 * punValueBufferSizeOut){
}

void bbSteamAPI_ISteamInventory_RequestEligiblePromoItemDefinitionsIDs(CSteamID steamID){
}

void bbSteamAPI_ISteamInventory_GetEligiblePromoItemDefinitionIDs(CSteamID steamID, SteamItemDef_t * pItemDefIDs, uint32 * punItemDefIDsArraySize){
}

void bbSteamAPI_ISteamInventory_StartPurchase(const SteamItemDef_t * pArrayItemDefs, const uint32 * punArrayQuantity, uint32 unArrayLength){
}

void bbSteamAPI_ISteamInventory_RequestPrices(){
}

void bbSteamAPI_ISteamInventory_GetNumItemsWithPrices(){
}

void bbSteamAPI_ISteamInventory_GetItemsWithPrices(SteamItemDef_t * pArrayItemDefs, uint64 * pCurrentPrices, uint64 * pBasePrices, uint32 unArrayLength){
}

void bbSteamAPI_ISteamInventory_GetItemPrice(SteamItemDef_t iDefinition, uint64 * pCurrentPrice, uint64 * pBasePrice){
}

void bbSteamAPI_ISteamInventory_StartUpdateProperties(){
}

void bbSteamAPI_ISteamInventory_RemoveProperty(SteamInventoryUpdateHandle_t handle, SteamItemInstanceID_t nItemID, const char * pchPropertyName){
}

void bbSteamAPI_ISteamInventory_SetPropertyString(SteamInventoryUpdateHandle_t handle, SteamItemInstanceID_t nItemID, const char * pchPropertyName, const char * pchPropertyValue){
}

void bbSteamAPI_ISteamInventory_SetPropertyBool(SteamInventoryUpdateHandle_t handle, SteamItemInstanceID_t nItemID, const char * pchPropertyName, bool bValue){
}

void bbSteamAPI_ISteamInventory_SetPropertyInt64(SteamInventoryUpdateHandle_t handle, SteamItemInstanceID_t nItemID, const char * pchPropertyName, int64 nValue){
}

void bbSteamAPI_ISteamInventory_SetPropertyFloat(SteamInventoryUpdateHandle_t handle, SteamItemInstanceID_t nItemID, const char * pchPropertyName, float flValue){
}

void bbSteamAPI_ISteamInventory_SubmitUpdateProperties(SteamInventoryUpdateHandle_t handle, SteamInventoryResult_t * pResultHandle){
}

class ISteamVideo;
void bbSteamAPI_ISteamVideo_GetVideoURL(AppId_t unVideoAppID){
}

void bbSteamAPI_ISteamVideo_IsBroadcasting(int * pnNumViewers){
}

void bbSteamAPI_ISteamVideo_GetOPFSettings(AppId_t unVideoAppID){
}

void bbSteamAPI_ISteamVideo_GetOPFStringForApp(AppId_t unVideoAppID, char * pchBuffer, int32 * pnBufferSize){
}

class ISteamTV;
void bbSteamAPI_ISteamTV_IsBroadcasting(int * pnNumViewers){
}

void bbSteamAPI_ISteamTV_AddBroadcastGameData(const char * pchKey, const char * pchValue){
}

void bbSteamAPI_ISteamTV_RemoveBroadcastGameData(const char * pchKey){
}

void bbSteamAPI_ISteamTV_AddTimelineMarker(const char * pchTemplateName, bool bPersistent, uint8 nColorR, uint8 nColorG, uint8 nColorB){
}

void bbSteamAPI_ISteamTV_RemoveTimelineMarker(){
}

void bbSteamAPI_ISteamTV_AddRegion(const char * pchElementName, const char * pchTimelineDataSection, const SteamTVRegion_t * pSteamTVRegion, ESteamTVRegionBehavior eSteamTVRegionBehavior){
}

void bbSteamAPI_ISteamTV_RemoveRegion(uint32 unRegionHandle){
}

class ISteamParentalSettings;
void bbSteamAPI_ISteamParentalSettings_BIsParentalLockEnabled(){
}

void bbSteamAPI_ISteamParentalSettings_BIsParentalLockLocked(){
}

void bbSteamAPI_ISteamParentalSettings_BIsAppBlocked(AppId_t nAppID){
}

void bbSteamAPI_ISteamParentalSettings_BIsAppInBlockList(AppId_t nAppID){
}

void bbSteamAPI_ISteamParentalSettings_BIsFeatureBlocked(EParentalFeature eFeature){
}

void bbSteamAPI_ISteamParentalSettings_BIsFeatureInBlockList(EParentalFeature eFeature){
}

class ISteamRemotePlay;
void bbSteamAPI_ISteamRemotePlay_GetSessionCount(){
}

void bbSteamAPI_ISteamRemotePlay_GetSessionID(int iSessionIndex){
}

void bbSteamAPI_ISteamRemotePlay_GetSessionSteamID(RemotePlaySessionID_t unSessionID){
}

void bbSteamAPI_ISteamRemotePlay_GetSessionClientName(RemotePlaySessionID_t unSessionID){
}

void bbSteamAPI_ISteamRemotePlay_GetSessionClientFormFactor(RemotePlaySessionID_t unSessionID){
}

void bbSteamAPI_ISteamRemotePlay_BGetSessionClientResolution(RemotePlaySessionID_t unSessionID, int * pnResolutionX, int * pnResolutionY){
}

void bbSteamAPI_ISteamRemotePlay_BSendRemotePlayTogetherInvite(CSteamID steamIDFriend){
}

class ISteamNetworkingSockets;
void bbSteamAPI_ISteamNetworkingSockets_CreateListenSocketIP(const SteamNetworkingIPAddr & localAddress, int nOptions, const SteamNetworkingConfigValue_t * pOptions){
}

void bbSteamAPI_ISteamNetworkingSockets_ConnectByIPAddress(const SteamNetworkingIPAddr & address, int nOptions, const SteamNetworkingConfigValue_t * pOptions){
}

void bbSteamAPI_ISteamNetworkingSockets_CreateListenSocketP2P(int nVirtualPort, int nOptions, const SteamNetworkingConfigValue_t * pOptions){
}

void bbSteamAPI_ISteamNetworkingSockets_ConnectP2P(const SteamNetworkingIdentity & identityRemote, int nVirtualPort, int nOptions, const SteamNetworkingConfigValue_t * pOptions){
}

void bbSteamAPI_ISteamNetworkingSockets_AcceptConnection(HSteamNetConnection hConn){
}

void bbSteamAPI_ISteamNetworkingSockets_CloseConnection(HSteamNetConnection hPeer, int nReason, const char * pszDebug, bool bEnableLinger){
}

void bbSteamAPI_ISteamNetworkingSockets_CloseListenSocket(HSteamListenSocket hSocket){
}

void bbSteamAPI_ISteamNetworkingSockets_SetConnectionUserData(HSteamNetConnection hPeer, int64 nUserData){
}

void bbSteamAPI_ISteamNetworkingSockets_GetConnectionUserData(HSteamNetConnection hPeer){
}

void bbSteamAPI_ISteamNetworkingSockets_SetConnectionName(HSteamNetConnection hPeer, const char * pszName){
}

void bbSteamAPI_ISteamNetworkingSockets_GetConnectionName(HSteamNetConnection hPeer, char * pszName, int nMaxLen){
}

void bbSteamAPI_ISteamNetworkingSockets_SendMessageToConnection(HSteamNetConnection hConn, const void * pData, uint32 cbData, int nSendFlags, int64 * pOutMessageNumber){
}

void bbSteamAPI_ISteamNetworkingSockets_SendMessages(int nMessages, SteamNetworkingMessage_t *const * pMessages, int64 * pOutMessageNumberOrResult){
}

void bbSteamAPI_ISteamNetworkingSockets_FlushMessagesOnConnection(HSteamNetConnection hConn){
}

void bbSteamAPI_ISteamNetworkingSockets_ReceiveMessagesOnConnection(HSteamNetConnection hConn, SteamNetworkingMessage_t ** ppOutMessages, int nMaxMessages){
}

void bbSteamAPI_ISteamNetworkingSockets_GetConnectionInfo(HSteamNetConnection hConn, SteamNetConnectionInfo_t * pInfo){
}

void bbSteamAPI_ISteamNetworkingSockets_GetQuickConnectionStatus(HSteamNetConnection hConn, SteamNetworkingQuickConnectionStatus * pStats){
}

void bbSteamAPI_ISteamNetworkingSockets_GetDetailedConnectionStatus(HSteamNetConnection hConn, char * pszBuf, int cbBuf){
}

void bbSteamAPI_ISteamNetworkingSockets_GetListenSocketAddress(HSteamListenSocket hSocket, SteamNetworkingIPAddr * address){
}

void bbSteamAPI_ISteamNetworkingSockets_CreateSocketPair(HSteamNetConnection * pOutConnection1, HSteamNetConnection * pOutConnection2, bool bUseNetworkLoopback, const SteamNetworkingIdentity * pIdentity1, const SteamNetworkingIdentity * pIdentity2){
}

void bbSteamAPI_ISteamNetworkingSockets_GetIdentity(SteamNetworkingIdentity * pIdentity){
}

void bbSteamAPI_ISteamNetworkingSockets_InitAuthentication(){
}

void bbSteamAPI_ISteamNetworkingSockets_GetAuthenticationStatus(SteamNetAuthenticationStatus_t * pDetails){
}

void bbSteamAPI_ISteamNetworkingSockets_CreatePollGroup(){
}

void bbSteamAPI_ISteamNetworkingSockets_DestroyPollGroup(HSteamNetPollGroup hPollGroup){
}

void bbSteamAPI_ISteamNetworkingSockets_SetConnectionPollGroup(HSteamNetConnection hConn, HSteamNetPollGroup hPollGroup){
}

void bbSteamAPI_ISteamNetworkingSockets_ReceiveMessagesOnPollGroup(HSteamNetPollGroup hPollGroup, SteamNetworkingMessage_t ** ppOutMessages, int nMaxMessages){
}

void bbSteamAPI_ISteamNetworkingSockets_ReceivedRelayAuthTicket(const void * pvTicket, int cbTicket, SteamDatagramRelayAuthTicket * pOutParsedTicket){
}

void bbSteamAPI_ISteamNetworkingSockets_FindRelayAuthTicketForServer(const SteamNetworkingIdentity & identityGameServer, int nVirtualPort, SteamDatagramRelayAuthTicket * pOutParsedTicket){
}

void bbSteamAPI_ISteamNetworkingSockets_ConnectToHostedDedicatedServer(const SteamNetworkingIdentity & identityTarget, int nVirtualPort, int nOptions, const SteamNetworkingConfigValue_t * pOptions){
}

void bbSteamAPI_ISteamNetworkingSockets_GetHostedDedicatedServerPort(){
}

void bbSteamAPI_ISteamNetworkingSockets_GetHostedDedicatedServerPOPID(){
}

void bbSteamAPI_ISteamNetworkingSockets_GetHostedDedicatedServerAddress(SteamDatagramHostedAddress * pRouting){
}

void bbSteamAPI_ISteamNetworkingSockets_CreateHostedDedicatedServerListenSocket(int nVirtualPort, int nOptions, const SteamNetworkingConfigValue_t * pOptions){
}

void bbSteamAPI_ISteamNetworkingSockets_GetGameCoordinatorServerLogin(SteamDatagramGameCoordinatorServerLogin * pLoginInfo, int * pcbSignedBlob, void * pBlob){
}

void bbSteamAPI_ISteamNetworkingSockets_ConnectP2PCustomSignaling(ISteamNetworkingConnectionCustomSignaling * pSignaling, const SteamNetworkingIdentity * pPeerIdentity, int nOptions, const SteamNetworkingConfigValue_t * pOptions){
}

void bbSteamAPI_ISteamNetworkingSockets_ReceivedP2PCustomSignal(const void * pMsg, int cbMsg, ISteamNetworkingCustomSignalingRecvContext * pContext){
}

void bbSteamAPI_ISteamNetworkingSockets_GetCertificateRequest(int * pcbBlob, void * pBlob, SteamNetworkingErrMsg & errMsg){
}

void bbSteamAPI_ISteamNetworkingSockets_SetCertificate(const void * pCertificate, int cbCertificate, SteamNetworkingErrMsg & errMsg){
}

class ISteamNetworkingConnectionCustomSignaling;
void bbSteamAPI_ISteamNetworkingConnectionCustomSignaling_SendSignal(HSteamNetConnection hConn, const SteamNetConnectionInfo_t & info, const void * pMsg, int cbMsg){
}

void bbSteamAPI_ISteamNetworkingConnectionCustomSignaling_Release(){
}

class ISteamNetworkingCustomSignalingRecvContext;
void bbSteamAPI_ISteamNetworkingCustomSignalingRecvContext_OnConnectRequest(HSteamNetConnection hConn, const SteamNetworkingIdentity & identityPeer){
}

void bbSteamAPI_ISteamNetworkingCustomSignalingRecvContext_SendRejectionSignal(const SteamNetworkingIdentity & identityPeer, const void * pMsg, int cbMsg){
}

class ISteamNetworkingUtils;
void bbSteamAPI_ISteamNetworkingUtils_AllocateMessage(int cbAllocateBuffer){
}

void bbSteamAPI_ISteamNetworkingUtils_InitRelayNetworkAccess(){
}

void bbSteamAPI_ISteamNetworkingUtils_GetRelayNetworkStatus(SteamRelayNetworkStatus_t * pDetails){
}

void bbSteamAPI_ISteamNetworkingUtils_GetLocalPingLocation(SteamNetworkPingLocation_t & result){
}

void bbSteamAPI_ISteamNetworkingUtils_EstimatePingTimeBetweenTwoLocations(const SteamNetworkPingLocation_t & location1, const SteamNetworkPingLocation_t & location2){
}

void bbSteamAPI_ISteamNetworkingUtils_EstimatePingTimeFromLocalHost(const SteamNetworkPingLocation_t & remoteLocation){
}

void bbSteamAPI_ISteamNetworkingUtils_ConvertPingLocationToString(const SteamNetworkPingLocation_t & location, char * pszBuf, int cchBufSize){
}

void bbSteamAPI_ISteamNetworkingUtils_ParsePingLocationString(const char * pszString, SteamNetworkPingLocation_t & result){
}

void bbSteamAPI_ISteamNetworkingUtils_CheckPingDataUpToDate(float flMaxAgeSeconds){
}

void bbSteamAPI_ISteamNetworkingUtils_GetPingToDataCenter(SteamNetworkingPOPID popID, SteamNetworkingPOPID * pViaRelayPoP){
}

void bbSteamAPI_ISteamNetworkingUtils_GetDirectPingToPOP(SteamNetworkingPOPID popID){
}

void bbSteamAPI_ISteamNetworkingUtils_GetPOPCount(){
}

void bbSteamAPI_ISteamNetworkingUtils_GetPOPList(SteamNetworkingPOPID * list, int nListSz){
}

void bbSteamAPI_ISteamNetworkingUtils_GetLocalTimestamp(){
}

void bbSteamAPI_ISteamNetworkingUtils_SetDebugOutputFunction(ESteamNetworkingSocketsDebugOutputType eDetailLevel, FSteamNetworkingSocketsDebugOutput pfnFunc){
}

void bbSteamAPI_ISteamNetworkingUtils_SetGlobalConfigValueInt32(ESteamNetworkingConfigValue eValue, int32 val){
}

void bbSteamAPI_ISteamNetworkingUtils_SetGlobalConfigValueFloat(ESteamNetworkingConfigValue eValue, float val){
}

void bbSteamAPI_ISteamNetworkingUtils_SetGlobalConfigValueString(ESteamNetworkingConfigValue eValue, const char * val){
}

void bbSteamAPI_ISteamNetworkingUtils_SetConnectionConfigValueInt32(HSteamNetConnection hConn, ESteamNetworkingConfigValue eValue, int32 val){
}

void bbSteamAPI_ISteamNetworkingUtils_SetConnectionConfigValueFloat(HSteamNetConnection hConn, ESteamNetworkingConfigValue eValue, float val){
}

void bbSteamAPI_ISteamNetworkingUtils_SetConnectionConfigValueString(HSteamNetConnection hConn, ESteamNetworkingConfigValue eValue, const char * val){
}

void bbSteamAPI_ISteamNetworkingUtils_SetConfigValue(ESteamNetworkingConfigValue eValue, ESteamNetworkingConfigScope eScopeType, intptr_t scopeObj, ESteamNetworkingConfigDataType eDataType, const void * pArg){
}

void bbSteamAPI_ISteamNetworkingUtils_SetConfigValueStruct(const SteamNetworkingConfigValue_t & opt, ESteamNetworkingConfigScope eScopeType, intptr_t scopeObj){
}

void bbSteamAPI_ISteamNetworkingUtils_GetConfigValue(ESteamNetworkingConfigValue eValue, ESteamNetworkingConfigScope eScopeType, intptr_t scopeObj, ESteamNetworkingConfigDataType * pOutDataType, void * pResult, size_t * cbResult){
}

void bbSteamAPI_ISteamNetworkingUtils_GetConfigValueInfo(ESteamNetworkingConfigValue eValue, const char ** pOutName, ESteamNetworkingConfigDataType * pOutDataType, ESteamNetworkingConfigScope * pOutScope, ESteamNetworkingConfigValue * pOutNextValue){
}

void bbSteamAPI_ISteamNetworkingUtils_GetFirstConfigValue(){
}

void bbSteamAPI_ISteamNetworkingUtils_SteamNetworkingIPAddr_ToString(const SteamNetworkingIPAddr & addr, char * buf, uint32 cbBuf, bool bWithPort){
}

void bbSteamAPI_ISteamNetworkingUtils_SteamNetworkingIPAddr_ParseString(SteamNetworkingIPAddr * pAddr, const char * pszStr){
}

void bbSteamAPI_ISteamNetworkingUtils_SteamNetworkingIdentity_ToString(const SteamNetworkingIdentity & identity, char * buf, uint32 cbBuf){
}

void bbSteamAPI_ISteamNetworkingUtils_SteamNetworkingIdentity_ParseString(SteamNetworkingIdentity * pIdentity, const char * pszStr){
}

class ISteamGameServer;
void bbSteamAPI_ISteamGameServer_SetProduct(const char * pszProduct){
}

void bbSteamAPI_ISteamGameServer_SetGameDescription(const char * pszGameDescription){
}

void bbSteamAPI_ISteamGameServer_SetModDir(const char * pszModDir){
}

void bbSteamAPI_ISteamGameServer_SetDedicatedServer(bool bDedicated){
}

void bbSteamAPI_ISteamGameServer_LogOn(const char * pszToken){
}

void bbSteamAPI_ISteamGameServer_LogOnAnonymous(){
}

void bbSteamAPI_ISteamGameServer_LogOff(){
}

void bbSteamAPI_ISteamGameServer_BLoggedOn(){
}

void bbSteamAPI_ISteamGameServer_BSecure(){
}

void bbSteamAPI_ISteamGameServer_GetSteamID(){
}

void bbSteamAPI_ISteamGameServer_WasRestartRequested(){
}

void bbSteamAPI_ISteamGameServer_SetMaxPlayerCount(int cPlayersMax){
}

void bbSteamAPI_ISteamGameServer_SetBotPlayerCount(int cBotplayers){
}

void bbSteamAPI_ISteamGameServer_SetServerName(const char * pszServerName){
}

void bbSteamAPI_ISteamGameServer_SetMapName(const char * pszMapName){
}

void bbSteamAPI_ISteamGameServer_SetPasswordProtected(bool bPasswordProtected){
}

void bbSteamAPI_ISteamGameServer_SetSpectatorPort(uint16 unSpectatorPort){
}

void bbSteamAPI_ISteamGameServer_SetSpectatorServerName(const char * pszSpectatorServerName){
}

void bbSteamAPI_ISteamGameServer_ClearAllKeyValues(){
}

void bbSteamAPI_ISteamGameServer_SetKeyValue(const char * pKey, const char * pValue){
}

void bbSteamAPI_ISteamGameServer_SetGameTags(const char * pchGameTags){
}

void bbSteamAPI_ISteamGameServer_SetGameData(const char * pchGameData){
}

void bbSteamAPI_ISteamGameServer_SetRegion(const char * pszRegion){
}

void bbSteamAPI_ISteamGameServer_SendUserConnectAndAuthenticate(uint32 unIPClient, const void * pvAuthBlob, uint32 cubAuthBlobSize, CSteamID * pSteamIDUser){
}

void bbSteamAPI_ISteamGameServer_CreateUnauthenticatedUserConnection(){
}

void bbSteamAPI_ISteamGameServer_SendUserDisconnect(CSteamID steamIDUser){
}

void bbSteamAPI_ISteamGameServer_BUpdateUserData(CSteamID steamIDUser, const char * pchPlayerName, uint32 uScore){
}

void bbSteamAPI_ISteamGameServer_GetAuthSessionTicket(void * pTicket, int cbMaxTicket, uint32 * pcbTicket){
}

void bbSteamAPI_ISteamGameServer_BeginAuthSession(const void * pAuthTicket, int cbAuthTicket, CSteamID steamID){
}

void bbSteamAPI_ISteamGameServer_EndAuthSession(CSteamID steamID){
}

void bbSteamAPI_ISteamGameServer_CancelAuthTicket(HAuthTicket hAuthTicket){
}

void bbSteamAPI_ISteamGameServer_UserHasLicenseForApp(CSteamID steamID, AppId_t appID){
}

void bbSteamAPI_ISteamGameServer_RequestUserGroupStatus(CSteamID steamIDUser, CSteamID steamIDGroup){
}

void bbSteamAPI_ISteamGameServer_GetGameplayStats(){
}

void bbSteamAPI_ISteamGameServer_GetServerReputation(){
}

void bbSteamAPI_ISteamGameServer_GetPublicIP(){
}

void bbSteamAPI_ISteamGameServer_HandleIncomingPacket(const void * pData, int cbData, uint32 srcIP, uint16 srcPort){
}

void bbSteamAPI_ISteamGameServer_GetNextOutgoingPacket(void * pOut, int cbMaxOut, uint32 * pNetAdr, uint16 * pPort){
}

void bbSteamAPI_ISteamGameServer_EnableHeartbeats(bool bActive){
}

void bbSteamAPI_ISteamGameServer_SetHeartbeatInterval(int iHeartbeatInterval){
}

void bbSteamAPI_ISteamGameServer_ForceHeartbeat(){
}

void bbSteamAPI_ISteamGameServer_AssociateWithClan(CSteamID steamIDClan){
}

void bbSteamAPI_ISteamGameServer_ComputeNewPlayerCompatibility(CSteamID steamIDNewPlayer){
}

class ISteamGameServerStats;
void bbSteamAPI_ISteamGameServerStats_RequestUserStats(CSteamID steamIDUser){
}

void bbSteamAPI_ISteamGameServerStats_GetUserStatInt32(CSteamID steamIDUser, const char * pchName, int32 * pData){
}

void bbSteamAPI_ISteamGameServerStats_GetUserStatFloat(CSteamID steamIDUser, const char * pchName, float * pData){
}

void bbSteamAPI_ISteamGameServerStats_GetUserAchievement(CSteamID steamIDUser, const char * pchName, bool * pbAchieved){
}

void bbSteamAPI_ISteamGameServerStats_SetUserStatInt32(CSteamID steamIDUser, const char * pchName, int32 nData){
}

void bbSteamAPI_ISteamGameServerStats_SetUserStatFloat(CSteamID steamIDUser, const char * pchName, float fData){
}

void bbSteamAPI_ISteamGameServerStats_UpdateUserAvgRateStat(CSteamID steamIDUser, const char * pchName, float flCountThisSession, double dSessionLength){
}

void bbSteamAPI_ISteamGameServerStats_SetUserAchievement(CSteamID steamIDUser, const char * pchName){
}

void bbSteamAPI_ISteamGameServerStats_ClearUserAchievement(CSteamID steamIDUser, const char * pchName){
}

void bbSteamAPI_ISteamGameServerStats_StoreUserStats(CSteamID steamIDUser){
}

