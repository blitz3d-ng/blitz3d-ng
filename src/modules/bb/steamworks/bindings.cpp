// AUTOGENERATED. DO NOT EDIT.
// RUN `ruby src/modules/bb/steamworks/generate.rb` TO UPDATE.

#include "steamworks.h"

HSteamPipe bbSteamAPI_ISteamClient_CreateSteamPipe( ISteamClient * Self ){
  return SteamAPI_ISteamClient_CreateSteamPipe( Self );
}

bool bbSteamAPI_ISteamClient_BReleaseSteamPipe( ISteamClient * Self, HSteamPipe hSteamPipe ){
  return SteamAPI_ISteamClient_BReleaseSteamPipe( Self,hSteamPipe );
}

HSteamUser bbSteamAPI_ISteamClient_ConnectToGlobalUser( ISteamClient * Self, HSteamPipe hSteamPipe ){
  return SteamAPI_ISteamClient_ConnectToGlobalUser( Self,hSteamPipe );
}

HSteamUser bbSteamAPI_ISteamClient_CreateLocalUser( ISteamClient * Self, HSteamPipe * phSteamPipe, EAccountType eAccountType ){
  return SteamAPI_ISteamClient_CreateLocalUser( Self,phSteamPipe,eAccountType );
}

void bbSteamAPI_ISteamClient_ReleaseUser( ISteamClient * Self, HSteamPipe hSteamPipe, HSteamUser hUser ){
  SteamAPI_ISteamClient_ReleaseUser( Self,hSteamPipe,hUser );
}

ISteamUser * bbSteamAPI_ISteamClient_GetISteamUser( ISteamClient * Self, HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char * pchVersion ){
  return SteamAPI_ISteamClient_GetISteamUser( Self,hSteamUser,hSteamPipe,pchVersion );
}

ISteamGameServer * bbSteamAPI_ISteamClient_GetISteamGameServer( ISteamClient * Self, HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char * pchVersion ){
  return SteamAPI_ISteamClient_GetISteamGameServer( Self,hSteamUser,hSteamPipe,pchVersion );
}

void bbSteamAPI_ISteamClient_SetLocalIPBinding( ISteamClient * Self, const SteamIPAddress_t & unIP, uint16 usPort ){
  SteamAPI_ISteamClient_SetLocalIPBinding( Self,unIP,usPort );
}

ISteamFriends * bbSteamAPI_ISteamClient_GetISteamFriends( ISteamClient * Self, HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char * pchVersion ){
  return SteamAPI_ISteamClient_GetISteamFriends( Self,hSteamUser,hSteamPipe,pchVersion );
}

ISteamUtils * bbSteamAPI_ISteamClient_GetISteamUtils( ISteamClient * Self, HSteamPipe hSteamPipe, const char * pchVersion ){
  return SteamAPI_ISteamClient_GetISteamUtils( Self,hSteamPipe,pchVersion );
}

ISteamMatchmaking * bbSteamAPI_ISteamClient_GetISteamMatchmaking( ISteamClient * Self, HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char * pchVersion ){
  return SteamAPI_ISteamClient_GetISteamMatchmaking( Self,hSteamUser,hSteamPipe,pchVersion );
}

ISteamMatchmakingServers * bbSteamAPI_ISteamClient_GetISteamMatchmakingServers( ISteamClient * Self, HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char * pchVersion ){
  return SteamAPI_ISteamClient_GetISteamMatchmakingServers( Self,hSteamUser,hSteamPipe,pchVersion );
}

void * bbSteamAPI_ISteamClient_GetISteamGenericInterface( ISteamClient * Self, HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char * pchVersion ){
  return SteamAPI_ISteamClient_GetISteamGenericInterface( Self,hSteamUser,hSteamPipe,pchVersion );
}

ISteamUserStats * bbSteamAPI_ISteamClient_GetISteamUserStats( ISteamClient * Self, HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char * pchVersion ){
  return SteamAPI_ISteamClient_GetISteamUserStats( Self,hSteamUser,hSteamPipe,pchVersion );
}

ISteamGameServerStats * bbSteamAPI_ISteamClient_GetISteamGameServerStats( ISteamClient * Self, HSteamUser hSteamuser, HSteamPipe hSteamPipe, const char * pchVersion ){
  return SteamAPI_ISteamClient_GetISteamGameServerStats( Self,hSteamuser,hSteamPipe,pchVersion );
}

ISteamApps * bbSteamAPI_ISteamClient_GetISteamApps( ISteamClient * Self, HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char * pchVersion ){
  return SteamAPI_ISteamClient_GetISteamApps( Self,hSteamUser,hSteamPipe,pchVersion );
}

ISteamNetworking * bbSteamAPI_ISteamClient_GetISteamNetworking( ISteamClient * Self, HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char * pchVersion ){
  return SteamAPI_ISteamClient_GetISteamNetworking( Self,hSteamUser,hSteamPipe,pchVersion );
}

ISteamRemoteStorage * bbSteamAPI_ISteamClient_GetISteamRemoteStorage( ISteamClient * Self, HSteamUser hSteamuser, HSteamPipe hSteamPipe, const char * pchVersion ){
  return SteamAPI_ISteamClient_GetISteamRemoteStorage( Self,hSteamuser,hSteamPipe,pchVersion );
}

ISteamScreenshots * bbSteamAPI_ISteamClient_GetISteamScreenshots( ISteamClient * Self, HSteamUser hSteamuser, HSteamPipe hSteamPipe, const char * pchVersion ){
  return SteamAPI_ISteamClient_GetISteamScreenshots( Self,hSteamuser,hSteamPipe,pchVersion );
}

ISteamGameSearch * bbSteamAPI_ISteamClient_GetISteamGameSearch( ISteamClient * Self, HSteamUser hSteamuser, HSteamPipe hSteamPipe, const char * pchVersion ){
  return SteamAPI_ISteamClient_GetISteamGameSearch( Self,hSteamuser,hSteamPipe,pchVersion );
}

uint32 bbSteamAPI_ISteamClient_GetIPCCallCount( ISteamClient * Self ){
  return SteamAPI_ISteamClient_GetIPCCallCount( Self );
}

void bbSteamAPI_ISteamClient_SetWarningMessageHook( ISteamClient * Self, SteamAPIWarningMessageHook_t pFunction ){
  SteamAPI_ISteamClient_SetWarningMessageHook( Self,pFunction );
}

bool bbSteamAPI_ISteamClient_BShutdownIfAllPipesClosed( ISteamClient * Self ){
  return SteamAPI_ISteamClient_BShutdownIfAllPipesClosed( Self );
}

ISteamHTTP * bbSteamAPI_ISteamClient_GetISteamHTTP( ISteamClient * Self, HSteamUser hSteamuser, HSteamPipe hSteamPipe, const char * pchVersion ){
  return SteamAPI_ISteamClient_GetISteamHTTP( Self,hSteamuser,hSteamPipe,pchVersion );
}

ISteamController * bbSteamAPI_ISteamClient_GetISteamController( ISteamClient * Self, HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char * pchVersion ){
  return SteamAPI_ISteamClient_GetISteamController( Self,hSteamUser,hSteamPipe,pchVersion );
}

ISteamUGC * bbSteamAPI_ISteamClient_GetISteamUGC( ISteamClient * Self, HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char * pchVersion ){
  return SteamAPI_ISteamClient_GetISteamUGC( Self,hSteamUser,hSteamPipe,pchVersion );
}

ISteamAppList * bbSteamAPI_ISteamClient_GetISteamAppList( ISteamClient * Self, HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char * pchVersion ){
  return SteamAPI_ISteamClient_GetISteamAppList( Self,hSteamUser,hSteamPipe,pchVersion );
}

ISteamMusic * bbSteamAPI_ISteamClient_GetISteamMusic( ISteamClient * Self, HSteamUser hSteamuser, HSteamPipe hSteamPipe, const char * pchVersion ){
  return SteamAPI_ISteamClient_GetISteamMusic( Self,hSteamuser,hSteamPipe,pchVersion );
}

ISteamMusicRemote * bbSteamAPI_ISteamClient_GetISteamMusicRemote( ISteamClient * Self, HSteamUser hSteamuser, HSteamPipe hSteamPipe, const char * pchVersion ){
  return SteamAPI_ISteamClient_GetISteamMusicRemote( Self,hSteamuser,hSteamPipe,pchVersion );
}

ISteamHTMLSurface * bbSteamAPI_ISteamClient_GetISteamHTMLSurface( ISteamClient * Self, HSteamUser hSteamuser, HSteamPipe hSteamPipe, const char * pchVersion ){
  return SteamAPI_ISteamClient_GetISteamHTMLSurface( Self,hSteamuser,hSteamPipe,pchVersion );
}

ISteamInventory * bbSteamAPI_ISteamClient_GetISteamInventory( ISteamClient * Self, HSteamUser hSteamuser, HSteamPipe hSteamPipe, const char * pchVersion ){
  return SteamAPI_ISteamClient_GetISteamInventory( Self,hSteamuser,hSteamPipe,pchVersion );
}

ISteamVideo * bbSteamAPI_ISteamClient_GetISteamVideo( ISteamClient * Self, HSteamUser hSteamuser, HSteamPipe hSteamPipe, const char * pchVersion ){
  return SteamAPI_ISteamClient_GetISteamVideo( Self,hSteamuser,hSteamPipe,pchVersion );
}

ISteamParentalSettings * bbSteamAPI_ISteamClient_GetISteamParentalSettings( ISteamClient * Self, HSteamUser hSteamuser, HSteamPipe hSteamPipe, const char * pchVersion ){
  return SteamAPI_ISteamClient_GetISteamParentalSettings( Self,hSteamuser,hSteamPipe,pchVersion );
}

ISteamInput * bbSteamAPI_ISteamClient_GetISteamInput( ISteamClient * Self, HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char * pchVersion ){
  return SteamAPI_ISteamClient_GetISteamInput( Self,hSteamUser,hSteamPipe,pchVersion );
}

ISteamParties * bbSteamAPI_ISteamClient_GetISteamParties( ISteamClient * Self, HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char * pchVersion ){
  return SteamAPI_ISteamClient_GetISteamParties( Self,hSteamUser,hSteamPipe,pchVersion );
}

ISteamRemotePlay * bbSteamAPI_ISteamClient_GetISteamRemotePlay( ISteamClient * Self, HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char * pchVersion ){
  return SteamAPI_ISteamClient_GetISteamRemotePlay( Self,hSteamUser,hSteamPipe,pchVersion );
}

HSteamUser bbSteamAPI_ISteamUser_GetHSteamUser( ISteamUser * Self ){
  return SteamAPI_ISteamUser_GetHSteamUser( Self );
}

bool bbSteamAPI_ISteamUser_BLoggedOn( ISteamUser * Self ){
  return SteamAPI_ISteamUser_BLoggedOn( Self );
}

CSteamID bbSteamAPI_ISteamUser_GetSteamID( ISteamUser * Self ){
  return SteamAPI_ISteamUser_GetSteamID( Self );
}

int bbSteamAPI_ISteamUser_InitiateGameConnection( ISteamUser * Self, void * pAuthBlob, int cbMaxAuthBlob, uint64_steamid steamIDGameServer, uint32 unIPServer, uint16 usPortServer, bool bSecure ){
  return SteamAPI_ISteamUser_InitiateGameConnection( Self,pAuthBlob,cbMaxAuthBlob,steamIDGameServer,unIPServer,usPortServer,bSecure );
}

void bbSteamAPI_ISteamUser_TerminateGameConnection( ISteamUser * Self, uint32 unIPServer, uint16 usPortServer ){
  SteamAPI_ISteamUser_TerminateGameConnection( Self,unIPServer,usPortServer );
}

void bbSteamAPI_ISteamUser_TrackAppUsageEvent( ISteamUser * Self, uint64_gameid gameID, int eAppUsageEvent, const char * pchExtraInfo ){
  SteamAPI_ISteamUser_TrackAppUsageEvent( Self,gameID,eAppUsageEvent,pchExtraInfo );
}

bool bbSteamAPI_ISteamUser_GetUserDataFolder( ISteamUser * Self, char * pchBuffer, int cubBuffer ){
  return SteamAPI_ISteamUser_GetUserDataFolder( Self,pchBuffer,cubBuffer );
}

void bbSteamAPI_ISteamUser_StartVoiceRecording( ISteamUser * Self ){
  SteamAPI_ISteamUser_StartVoiceRecording( Self );
}

void bbSteamAPI_ISteamUser_StopVoiceRecording( ISteamUser * Self ){
  SteamAPI_ISteamUser_StopVoiceRecording( Self );
}

EVoiceResult bbSteamAPI_ISteamUser_GetAvailableVoice( ISteamUser * Self, uint32 * pcbCompressed, uint32 * pcbUncompressed_Deprecated, uint32 nUncompressedVoiceDesiredSampleRate_Deprecated ){
  return SteamAPI_ISteamUser_GetAvailableVoice( Self,pcbCompressed,pcbUncompressed_Deprecated,nUncompressedVoiceDesiredSampleRate_Deprecated );
}

EVoiceResult bbSteamAPI_ISteamUser_GetVoice( ISteamUser * Self, bool bWantCompressed, void * pDestBuffer, uint32 cbDestBufferSize, uint32 * nBytesWritten, bool bWantUncompressed_Deprecated, void * pUncompressedDestBuffer_Deprecated, uint32 cbUncompressedDestBufferSize_Deprecated, uint32 * nUncompressBytesWritten_Deprecated, uint32 nUncompressedVoiceDesiredSampleRate_Deprecated ){
  return SteamAPI_ISteamUser_GetVoice( Self,bWantCompressed,pDestBuffer,cbDestBufferSize,nBytesWritten,bWantUncompressed_Deprecated,pUncompressedDestBuffer_Deprecated,cbUncompressedDestBufferSize_Deprecated,nUncompressBytesWritten_Deprecated,nUncompressedVoiceDesiredSampleRate_Deprecated );
}

EVoiceResult bbSteamAPI_ISteamUser_DecompressVoice( ISteamUser * Self, const void * pCompressed, uint32 cbCompressed, void * pDestBuffer, uint32 cbDestBufferSize, uint32 * nBytesWritten, uint32 nDesiredSampleRate ){
  return SteamAPI_ISteamUser_DecompressVoice( Self,pCompressed,cbCompressed,pDestBuffer,cbDestBufferSize,nBytesWritten,nDesiredSampleRate );
}

uint32 bbSteamAPI_ISteamUser_GetVoiceOptimalSampleRate( ISteamUser * Self ){
  return SteamAPI_ISteamUser_GetVoiceOptimalSampleRate( Self );
}

HAuthTicket bbSteamAPI_ISteamUser_GetAuthSessionTicket( ISteamUser * Self, void * pTicket, int cbMaxTicket, uint32 * pcbTicket ){
  return SteamAPI_ISteamUser_GetAuthSessionTicket( Self,pTicket,cbMaxTicket,pcbTicket );
}

EBeginAuthSessionResult bbSteamAPI_ISteamUser_BeginAuthSession( ISteamUser * Self, const void * pAuthTicket, int cbAuthTicket, uint64_steamid steamID ){
  return SteamAPI_ISteamUser_BeginAuthSession( Self,pAuthTicket,cbAuthTicket,steamID );
}

void bbSteamAPI_ISteamUser_EndAuthSession( ISteamUser * Self, uint64_steamid steamID ){
  SteamAPI_ISteamUser_EndAuthSession( Self,steamID );
}

void bbSteamAPI_ISteamUser_CancelAuthTicket( ISteamUser * Self, HAuthTicket hAuthTicket ){
  SteamAPI_ISteamUser_CancelAuthTicket( Self,hAuthTicket );
}

EUserHasLicenseForAppResult bbSteamAPI_ISteamUser_UserHasLicenseForApp( ISteamUser * Self, uint64_steamid steamID, AppId_t appID ){
  return SteamAPI_ISteamUser_UserHasLicenseForApp( Self,steamID,appID );
}

bool bbSteamAPI_ISteamUser_BIsBehindNAT( ISteamUser * Self ){
  return SteamAPI_ISteamUser_BIsBehindNAT( Self );
}

void bbSteamAPI_ISteamUser_AdvertiseGame( ISteamUser * Self, uint64_steamid steamIDGameServer, uint32 unIPServer, uint16 usPortServer ){
  SteamAPI_ISteamUser_AdvertiseGame( Self,steamIDGameServer,unIPServer,usPortServer );
}

SteamAPICall_t bbSteamAPI_ISteamUser_RequestEncryptedAppTicket( ISteamUser * Self, void * pDataToInclude, int cbDataToInclude ){
  return SteamAPI_ISteamUser_RequestEncryptedAppTicket( Self,pDataToInclude,cbDataToInclude );
}

bool bbSteamAPI_ISteamUser_GetEncryptedAppTicket( ISteamUser * Self, void * pTicket, int cbMaxTicket, uint32 * pcbTicket ){
  return SteamAPI_ISteamUser_GetEncryptedAppTicket( Self,pTicket,cbMaxTicket,pcbTicket );
}

int bbSteamAPI_ISteamUser_GetGameBadgeLevel( ISteamUser * Self, int nSeries, bool bFoil ){
  return SteamAPI_ISteamUser_GetGameBadgeLevel( Self,nSeries,bFoil );
}

int bbSteamAPI_ISteamUser_GetPlayerSteamLevel( ISteamUser * Self ){
  return SteamAPI_ISteamUser_GetPlayerSteamLevel( Self );
}

SteamAPICall_t bbSteamAPI_ISteamUser_RequestStoreAuthURL( ISteamUser * Self, const char * pchRedirectURL ){
  return SteamAPI_ISteamUser_RequestStoreAuthURL( Self,pchRedirectURL );
}

bool bbSteamAPI_ISteamUser_BIsPhoneVerified( ISteamUser * Self ){
  return SteamAPI_ISteamUser_BIsPhoneVerified( Self );
}

bool bbSteamAPI_ISteamUser_BIsTwoFactorEnabled( ISteamUser * Self ){
  return SteamAPI_ISteamUser_BIsTwoFactorEnabled( Self );
}

bool bbSteamAPI_ISteamUser_BIsPhoneIdentifying( ISteamUser * Self ){
  return SteamAPI_ISteamUser_BIsPhoneIdentifying( Self );
}

bool bbSteamAPI_ISteamUser_BIsPhoneRequiringVerification( ISteamUser * Self ){
  return SteamAPI_ISteamUser_BIsPhoneRequiringVerification( Self );
}

SteamAPICall_t bbSteamAPI_ISteamUser_GetMarketEligibility( ISteamUser * Self ){
  return SteamAPI_ISteamUser_GetMarketEligibility( Self );
}

SteamAPICall_t bbSteamAPI_ISteamUser_GetDurationControl( ISteamUser * Self ){
  return SteamAPI_ISteamUser_GetDurationControl( Self );
}

const char * bbSteamAPI_ISteamFriends_GetPersonaName( ISteamFriends * Self ){
  return SteamAPI_ISteamFriends_GetPersonaName( Self );
}

SteamAPICall_t bbSteamAPI_ISteamFriends_SetPersonaName( ISteamFriends * Self, const char * pchPersonaName ){
  return SteamAPI_ISteamFriends_SetPersonaName( Self,pchPersonaName );
}

EPersonaState bbSteamAPI_ISteamFriends_GetPersonaState( ISteamFriends * Self ){
  return SteamAPI_ISteamFriends_GetPersonaState( Self );
}

int bbSteamAPI_ISteamFriends_GetFriendCount( ISteamFriends * Self, int iFriendFlags ){
  return SteamAPI_ISteamFriends_GetFriendCount( Self,iFriendFlags );
}

CSteamID bbSteamAPI_ISteamFriends_GetFriendByIndex( ISteamFriends * Self, int iFriend, int iFriendFlags ){
  return SteamAPI_ISteamFriends_GetFriendByIndex( Self,iFriend,iFriendFlags );
}

EFriendRelationship bbSteamAPI_ISteamFriends_GetFriendRelationship( ISteamFriends * Self, uint64_steamid steamIDFriend ){
  return SteamAPI_ISteamFriends_GetFriendRelationship( Self,steamIDFriend );
}

EPersonaState bbSteamAPI_ISteamFriends_GetFriendPersonaState( ISteamFriends * Self, uint64_steamid steamIDFriend ){
  return SteamAPI_ISteamFriends_GetFriendPersonaState( Self,steamIDFriend );
}

const char * bbSteamAPI_ISteamFriends_GetFriendPersonaName( ISteamFriends * Self, uint64_steamid steamIDFriend ){
  return SteamAPI_ISteamFriends_GetFriendPersonaName( Self,steamIDFriend );
}

bool bbSteamAPI_ISteamFriends_GetFriendGamePlayed( ISteamFriends * Self, uint64_steamid steamIDFriend, FriendGameInfo_t * pFriendGameInfo ){
  return SteamAPI_ISteamFriends_GetFriendGamePlayed( Self,steamIDFriend,pFriendGameInfo );
}

const char * bbSteamAPI_ISteamFriends_GetFriendPersonaNameHistory( ISteamFriends * Self, uint64_steamid steamIDFriend, int iPersonaName ){
  return SteamAPI_ISteamFriends_GetFriendPersonaNameHistory( Self,steamIDFriend,iPersonaName );
}

int bbSteamAPI_ISteamFriends_GetFriendSteamLevel( ISteamFriends * Self, uint64_steamid steamIDFriend ){
  return SteamAPI_ISteamFriends_GetFriendSteamLevel( Self,steamIDFriend );
}

const char * bbSteamAPI_ISteamFriends_GetPlayerNickname( ISteamFriends * Self, uint64_steamid steamIDPlayer ){
  return SteamAPI_ISteamFriends_GetPlayerNickname( Self,steamIDPlayer );
}

int bbSteamAPI_ISteamFriends_GetFriendsGroupCount( ISteamFriends * Self ){
  return SteamAPI_ISteamFriends_GetFriendsGroupCount( Self );
}

FriendsGroupID_t bbSteamAPI_ISteamFriends_GetFriendsGroupIDByIndex( ISteamFriends * Self, int iFG ){
  return SteamAPI_ISteamFriends_GetFriendsGroupIDByIndex( Self,iFG );
}

const char * bbSteamAPI_ISteamFriends_GetFriendsGroupName( ISteamFriends * Self, FriendsGroupID_t friendsGroupID ){
  return SteamAPI_ISteamFriends_GetFriendsGroupName( Self,friendsGroupID );
}

int bbSteamAPI_ISteamFriends_GetFriendsGroupMembersCount( ISteamFriends * Self, FriendsGroupID_t friendsGroupID ){
  return SteamAPI_ISteamFriends_GetFriendsGroupMembersCount( Self,friendsGroupID );
}

void bbSteamAPI_ISteamFriends_GetFriendsGroupMembersList( ISteamFriends * Self, FriendsGroupID_t friendsGroupID, CSteamID * pOutSteamIDMembers, int nMembersCount ){
  SteamAPI_ISteamFriends_GetFriendsGroupMembersList( Self,friendsGroupID,pOutSteamIDMembers,nMembersCount );
}

bool bbSteamAPI_ISteamFriends_HasFriend( ISteamFriends * Self, uint64_steamid steamIDFriend, int iFriendFlags ){
  return SteamAPI_ISteamFriends_HasFriend( Self,steamIDFriend,iFriendFlags );
}

int bbSteamAPI_ISteamFriends_GetClanCount( ISteamFriends * Self ){
  return SteamAPI_ISteamFriends_GetClanCount( Self );
}

CSteamID bbSteamAPI_ISteamFriends_GetClanByIndex( ISteamFriends * Self, int iClan ){
  return SteamAPI_ISteamFriends_GetClanByIndex( Self,iClan );
}

const char * bbSteamAPI_ISteamFriends_GetClanName( ISteamFriends * Self, uint64_steamid steamIDClan ){
  return SteamAPI_ISteamFriends_GetClanName( Self,steamIDClan );
}

const char * bbSteamAPI_ISteamFriends_GetClanTag( ISteamFriends * Self, uint64_steamid steamIDClan ){
  return SteamAPI_ISteamFriends_GetClanTag( Self,steamIDClan );
}

bool bbSteamAPI_ISteamFriends_GetClanActivityCounts( ISteamFriends * Self, uint64_steamid steamIDClan, int * pnOnline, int * pnInGame, int * pnChatting ){
  return SteamAPI_ISteamFriends_GetClanActivityCounts( Self,steamIDClan,pnOnline,pnInGame,pnChatting );
}

SteamAPICall_t bbSteamAPI_ISteamFriends_DownloadClanActivityCounts( ISteamFriends * Self, CSteamID * psteamIDClans, int cClansToRequest ){
  return SteamAPI_ISteamFriends_DownloadClanActivityCounts( Self,psteamIDClans,cClansToRequest );
}

int bbSteamAPI_ISteamFriends_GetFriendCountFromSource( ISteamFriends * Self, uint64_steamid steamIDSource ){
  return SteamAPI_ISteamFriends_GetFriendCountFromSource( Self,steamIDSource );
}

CSteamID bbSteamAPI_ISteamFriends_GetFriendFromSourceByIndex( ISteamFriends * Self, uint64_steamid steamIDSource, int iFriend ){
  return SteamAPI_ISteamFriends_GetFriendFromSourceByIndex( Self,steamIDSource,iFriend );
}

bool bbSteamAPI_ISteamFriends_IsUserInSource( ISteamFriends * Self, uint64_steamid steamIDUser, uint64_steamid steamIDSource ){
  return SteamAPI_ISteamFriends_IsUserInSource( Self,steamIDUser,steamIDSource );
}

void bbSteamAPI_ISteamFriends_SetInGameVoiceSpeaking( ISteamFriends * Self, uint64_steamid steamIDUser, bool bSpeaking ){
  SteamAPI_ISteamFriends_SetInGameVoiceSpeaking( Self,steamIDUser,bSpeaking );
}

void bbSteamAPI_ISteamFriends_ActivateGameOverlay( ISteamFriends * Self, const char * pchDialog ){
  SteamAPI_ISteamFriends_ActivateGameOverlay( Self,pchDialog );
}

void bbSteamAPI_ISteamFriends_ActivateGameOverlayToUser( ISteamFriends * Self, const char * pchDialog, uint64_steamid steamID ){
  SteamAPI_ISteamFriends_ActivateGameOverlayToUser( Self,pchDialog,steamID );
}

void bbSteamAPI_ISteamFriends_ActivateGameOverlayToWebPage( ISteamFriends * Self, const char * pchURL, EActivateGameOverlayToWebPageMode eMode ){
  SteamAPI_ISteamFriends_ActivateGameOverlayToWebPage( Self,pchURL,eMode );
}

void bbSteamAPI_ISteamFriends_ActivateGameOverlayToStore( ISteamFriends * Self, AppId_t nAppID, EOverlayToStoreFlag eFlag ){
  SteamAPI_ISteamFriends_ActivateGameOverlayToStore( Self,nAppID,eFlag );
}

void bbSteamAPI_ISteamFriends_SetPlayedWith( ISteamFriends * Self, uint64_steamid steamIDUserPlayedWith ){
  SteamAPI_ISteamFriends_SetPlayedWith( Self,steamIDUserPlayedWith );
}

void bbSteamAPI_ISteamFriends_ActivateGameOverlayInviteDialog( ISteamFriends * Self, uint64_steamid steamIDLobby ){
  SteamAPI_ISteamFriends_ActivateGameOverlayInviteDialog( Self,steamIDLobby );
}

int bbSteamAPI_ISteamFriends_GetSmallFriendAvatar( ISteamFriends * Self, uint64_steamid steamIDFriend ){
  return SteamAPI_ISteamFriends_GetSmallFriendAvatar( Self,steamIDFriend );
}

int bbSteamAPI_ISteamFriends_GetMediumFriendAvatar( ISteamFriends * Self, uint64_steamid steamIDFriend ){
  return SteamAPI_ISteamFriends_GetMediumFriendAvatar( Self,steamIDFriend );
}

int bbSteamAPI_ISteamFriends_GetLargeFriendAvatar( ISteamFriends * Self, uint64_steamid steamIDFriend ){
  return SteamAPI_ISteamFriends_GetLargeFriendAvatar( Self,steamIDFriend );
}

bool bbSteamAPI_ISteamFriends_RequestUserInformation( ISteamFriends * Self, uint64_steamid steamIDUser, bool bRequireNameOnly ){
  return SteamAPI_ISteamFriends_RequestUserInformation( Self,steamIDUser,bRequireNameOnly );
}

SteamAPICall_t bbSteamAPI_ISteamFriends_RequestClanOfficerList( ISteamFriends * Self, uint64_steamid steamIDClan ){
  return SteamAPI_ISteamFriends_RequestClanOfficerList( Self,steamIDClan );
}

CSteamID bbSteamAPI_ISteamFriends_GetClanOwner( ISteamFriends * Self, uint64_steamid steamIDClan ){
  return SteamAPI_ISteamFriends_GetClanOwner( Self,steamIDClan );
}

int bbSteamAPI_ISteamFriends_GetClanOfficerCount( ISteamFriends * Self, uint64_steamid steamIDClan ){
  return SteamAPI_ISteamFriends_GetClanOfficerCount( Self,steamIDClan );
}

CSteamID bbSteamAPI_ISteamFriends_GetClanOfficerByIndex( ISteamFriends * Self, uint64_steamid steamIDClan, int iOfficer ){
  return SteamAPI_ISteamFriends_GetClanOfficerByIndex( Self,steamIDClan,iOfficer );
}

uint32 bbSteamAPI_ISteamFriends_GetUserRestrictions( ISteamFriends * Self ){
  return SteamAPI_ISteamFriends_GetUserRestrictions( Self );
}

bool bbSteamAPI_ISteamFriends_SetRichPresence( ISteamFriends * Self, const char * pchKey, const char * pchValue ){
  return SteamAPI_ISteamFriends_SetRichPresence( Self,pchKey,pchValue );
}

void bbSteamAPI_ISteamFriends_ClearRichPresence( ISteamFriends * Self ){
  SteamAPI_ISteamFriends_ClearRichPresence( Self );
}

const char * bbSteamAPI_ISteamFriends_GetFriendRichPresence( ISteamFriends * Self, uint64_steamid steamIDFriend, const char * pchKey ){
  return SteamAPI_ISteamFriends_GetFriendRichPresence( Self,steamIDFriend,pchKey );
}

int bbSteamAPI_ISteamFriends_GetFriendRichPresenceKeyCount( ISteamFriends * Self, uint64_steamid steamIDFriend ){
  return SteamAPI_ISteamFriends_GetFriendRichPresenceKeyCount( Self,steamIDFriend );
}

const char * bbSteamAPI_ISteamFriends_GetFriendRichPresenceKeyByIndex( ISteamFriends * Self, uint64_steamid steamIDFriend, int iKey ){
  return SteamAPI_ISteamFriends_GetFriendRichPresenceKeyByIndex( Self,steamIDFriend,iKey );
}

void bbSteamAPI_ISteamFriends_RequestFriendRichPresence( ISteamFriends * Self, uint64_steamid steamIDFriend ){
  SteamAPI_ISteamFriends_RequestFriendRichPresence( Self,steamIDFriend );
}

bool bbSteamAPI_ISteamFriends_InviteUserToGame( ISteamFriends * Self, uint64_steamid steamIDFriend, const char * pchConnectString ){
  return SteamAPI_ISteamFriends_InviteUserToGame( Self,steamIDFriend,pchConnectString );
}

int bbSteamAPI_ISteamFriends_GetCoplayFriendCount( ISteamFriends * Self ){
  return SteamAPI_ISteamFriends_GetCoplayFriendCount( Self );
}

CSteamID bbSteamAPI_ISteamFriends_GetCoplayFriend( ISteamFriends * Self, int iCoplayFriend ){
  return SteamAPI_ISteamFriends_GetCoplayFriend( Self,iCoplayFriend );
}

int bbSteamAPI_ISteamFriends_GetFriendCoplayTime( ISteamFriends * Self, uint64_steamid steamIDFriend ){
  return SteamAPI_ISteamFriends_GetFriendCoplayTime( Self,steamIDFriend );
}

AppId_t bbSteamAPI_ISteamFriends_GetFriendCoplayGame( ISteamFriends * Self, uint64_steamid steamIDFriend ){
  return SteamAPI_ISteamFriends_GetFriendCoplayGame( Self,steamIDFriend );
}

SteamAPICall_t bbSteamAPI_ISteamFriends_JoinClanChatRoom( ISteamFriends * Self, uint64_steamid steamIDClan ){
  return SteamAPI_ISteamFriends_JoinClanChatRoom( Self,steamIDClan );
}

bool bbSteamAPI_ISteamFriends_LeaveClanChatRoom( ISteamFriends * Self, uint64_steamid steamIDClan ){
  return SteamAPI_ISteamFriends_LeaveClanChatRoom( Self,steamIDClan );
}

int bbSteamAPI_ISteamFriends_GetClanChatMemberCount( ISteamFriends * Self, uint64_steamid steamIDClan ){
  return SteamAPI_ISteamFriends_GetClanChatMemberCount( Self,steamIDClan );
}

CSteamID bbSteamAPI_ISteamFriends_GetChatMemberByIndex( ISteamFriends * Self, uint64_steamid steamIDClan, int iUser ){
  return SteamAPI_ISteamFriends_GetChatMemberByIndex( Self,steamIDClan,iUser );
}

bool bbSteamAPI_ISteamFriends_SendClanChatMessage( ISteamFriends * Self, uint64_steamid steamIDClanChat, const char * pchText ){
  return SteamAPI_ISteamFriends_SendClanChatMessage( Self,steamIDClanChat,pchText );
}

int bbSteamAPI_ISteamFriends_GetClanChatMessage( ISteamFriends * Self, uint64_steamid steamIDClanChat, int iMessage, void * prgchText, int cchTextMax, EChatEntryType * peChatEntryType, CSteamID * psteamidChatter ){
  return SteamAPI_ISteamFriends_GetClanChatMessage( Self,steamIDClanChat,iMessage,prgchText,cchTextMax,peChatEntryType,psteamidChatter );
}

bool bbSteamAPI_ISteamFriends_IsClanChatAdmin( ISteamFriends * Self, uint64_steamid steamIDClanChat, uint64_steamid steamIDUser ){
  return SteamAPI_ISteamFriends_IsClanChatAdmin( Self,steamIDClanChat,steamIDUser );
}

bool bbSteamAPI_ISteamFriends_IsClanChatWindowOpenInSteam( ISteamFriends * Self, uint64_steamid steamIDClanChat ){
  return SteamAPI_ISteamFriends_IsClanChatWindowOpenInSteam( Self,steamIDClanChat );
}

bool bbSteamAPI_ISteamFriends_OpenClanChatWindowInSteam( ISteamFriends * Self, uint64_steamid steamIDClanChat ){
  return SteamAPI_ISteamFriends_OpenClanChatWindowInSteam( Self,steamIDClanChat );
}

bool bbSteamAPI_ISteamFriends_CloseClanChatWindowInSteam( ISteamFriends * Self, uint64_steamid steamIDClanChat ){
  return SteamAPI_ISteamFriends_CloseClanChatWindowInSteam( Self,steamIDClanChat );
}

bool bbSteamAPI_ISteamFriends_SetListenForFriendsMessages( ISteamFriends * Self, bool bInterceptEnabled ){
  return SteamAPI_ISteamFriends_SetListenForFriendsMessages( Self,bInterceptEnabled );
}

bool bbSteamAPI_ISteamFriends_ReplyToFriendMessage( ISteamFriends * Self, uint64_steamid steamIDFriend, const char * pchMsgToSend ){
  return SteamAPI_ISteamFriends_ReplyToFriendMessage( Self,steamIDFriend,pchMsgToSend );
}

int bbSteamAPI_ISteamFriends_GetFriendMessage( ISteamFriends * Self, uint64_steamid steamIDFriend, int iMessageID, void * pvData, int cubData, EChatEntryType * peChatEntryType ){
  return SteamAPI_ISteamFriends_GetFriendMessage( Self,steamIDFriend,iMessageID,pvData,cubData,peChatEntryType );
}

SteamAPICall_t bbSteamAPI_ISteamFriends_GetFollowerCount( ISteamFriends * Self, uint64_steamid steamID ){
  return SteamAPI_ISteamFriends_GetFollowerCount( Self,steamID );
}

SteamAPICall_t bbSteamAPI_ISteamFriends_IsFollowing( ISteamFriends * Self, uint64_steamid steamID ){
  return SteamAPI_ISteamFriends_IsFollowing( Self,steamID );
}

SteamAPICall_t bbSteamAPI_ISteamFriends_EnumerateFollowingList( ISteamFriends * Self, uint32 unStartIndex ){
  return SteamAPI_ISteamFriends_EnumerateFollowingList( Self,unStartIndex );
}

bool bbSteamAPI_ISteamFriends_IsClanPublic( ISteamFriends * Self, uint64_steamid steamIDClan ){
  return SteamAPI_ISteamFriends_IsClanPublic( Self,steamIDClan );
}

bool bbSteamAPI_ISteamFriends_IsClanOfficialGameGroup( ISteamFriends * Self, uint64_steamid steamIDClan ){
  return SteamAPI_ISteamFriends_IsClanOfficialGameGroup( Self,steamIDClan );
}

int bbSteamAPI_ISteamFriends_GetNumChatsWithUnreadPriorityMessages( ISteamFriends * Self ){
  return SteamAPI_ISteamFriends_GetNumChatsWithUnreadPriorityMessages( Self );
}

void bbSteamAPI_ISteamFriends_ActivateGameOverlayRemotePlayTogetherInviteDialog( ISteamFriends * Self, uint64_steamid steamIDLobby ){
  SteamAPI_ISteamFriends_ActivateGameOverlayRemotePlayTogetherInviteDialog( Self,steamIDLobby );
}

uint32 bbSteamAPI_ISteamUtils_GetSecondsSinceAppActive( ISteamUtils * Self ){
  return SteamAPI_ISteamUtils_GetSecondsSinceAppActive( Self );
}

uint32 bbSteamAPI_ISteamUtils_GetSecondsSinceComputerActive( ISteamUtils * Self ){
  return SteamAPI_ISteamUtils_GetSecondsSinceComputerActive( Self );
}

EUniverse bbSteamAPI_ISteamUtils_GetConnectedUniverse( ISteamUtils * Self ){
  return SteamAPI_ISteamUtils_GetConnectedUniverse( Self );
}

uint32 bbSteamAPI_ISteamUtils_GetServerRealTime( ISteamUtils * Self ){
  return SteamAPI_ISteamUtils_GetServerRealTime( Self );
}

const char * bbSteamAPI_ISteamUtils_GetIPCountry( ISteamUtils * Self ){
  return SteamAPI_ISteamUtils_GetIPCountry( Self );
}

bool bbSteamAPI_ISteamUtils_GetImageSize( ISteamUtils * Self, int iImage, uint32 * pnWidth, uint32 * pnHeight ){
  return SteamAPI_ISteamUtils_GetImageSize( Self,iImage,pnWidth,pnHeight );
}

bool bbSteamAPI_ISteamUtils_GetImageRGBA( ISteamUtils * Self, int iImage, uint8 * pubDest, int nDestBufferSize ){
  return SteamAPI_ISteamUtils_GetImageRGBA( Self,iImage,pubDest,nDestBufferSize );
}

bool bbSteamAPI_ISteamUtils_GetCSERIPPort( ISteamUtils * Self, uint32 * unIP, uint16 * usPort ){
  return SteamAPI_ISteamUtils_GetCSERIPPort( Self,unIP,usPort );
}

uint8 bbSteamAPI_ISteamUtils_GetCurrentBatteryPower( ISteamUtils * Self ){
  return SteamAPI_ISteamUtils_GetCurrentBatteryPower( Self );
}

uint32 bbSteamAPI_ISteamUtils_GetAppID( ISteamUtils * Self ){
  return SteamAPI_ISteamUtils_GetAppID( Self );
}

void bbSteamAPI_ISteamUtils_SetOverlayNotificationPosition( ISteamUtils * Self, ENotificationPosition eNotificationPosition ){
  SteamAPI_ISteamUtils_SetOverlayNotificationPosition( Self,eNotificationPosition );
}

bool bbSteamAPI_ISteamUtils_IsAPICallCompleted( ISteamUtils * Self, SteamAPICall_t hSteamAPICall, bool * pbFailed ){
  return SteamAPI_ISteamUtils_IsAPICallCompleted( Self,hSteamAPICall,pbFailed );
}

ESteamAPICallFailure bbSteamAPI_ISteamUtils_GetAPICallFailureReason( ISteamUtils * Self, SteamAPICall_t hSteamAPICall ){
  return SteamAPI_ISteamUtils_GetAPICallFailureReason( Self,hSteamAPICall );
}

bool bbSteamAPI_ISteamUtils_GetAPICallResult( ISteamUtils * Self, SteamAPICall_t hSteamAPICall, void * pCallback, int cubCallback, int iCallbackExpected, bool * pbFailed ){
  return SteamAPI_ISteamUtils_GetAPICallResult( Self,hSteamAPICall,pCallback,cubCallback,iCallbackExpected,pbFailed );
}

uint32 bbSteamAPI_ISteamUtils_GetIPCCallCount( ISteamUtils * Self ){
  return SteamAPI_ISteamUtils_GetIPCCallCount( Self );
}

void bbSteamAPI_ISteamUtils_SetWarningMessageHook( ISteamUtils * Self, SteamAPIWarningMessageHook_t pFunction ){
  SteamAPI_ISteamUtils_SetWarningMessageHook( Self,pFunction );
}

bool bbSteamAPI_ISteamUtils_IsOverlayEnabled( ISteamUtils * Self ){
  return SteamAPI_ISteamUtils_IsOverlayEnabled( Self );
}

bool bbSteamAPI_ISteamUtils_BOverlayNeedsPresent( ISteamUtils * Self ){
  return SteamAPI_ISteamUtils_BOverlayNeedsPresent( Self );
}

SteamAPICall_t bbSteamAPI_ISteamUtils_CheckFileSignature( ISteamUtils * Self, const char * szFileName ){
  return SteamAPI_ISteamUtils_CheckFileSignature( Self,szFileName );
}

bool bbSteamAPI_ISteamUtils_ShowGamepadTextInput( ISteamUtils * Self, EGamepadTextInputMode eInputMode, EGamepadTextInputLineMode eLineInputMode, const char * pchDescription, uint32 unCharMax, const char * pchExistingText ){
  return SteamAPI_ISteamUtils_ShowGamepadTextInput( Self,eInputMode,eLineInputMode,pchDescription,unCharMax,pchExistingText );
}

uint32 bbSteamAPI_ISteamUtils_GetEnteredGamepadTextLength( ISteamUtils * Self ){
  return SteamAPI_ISteamUtils_GetEnteredGamepadTextLength( Self );
}

bool bbSteamAPI_ISteamUtils_GetEnteredGamepadTextInput( ISteamUtils * Self, char * pchText, uint32 cchText ){
  return SteamAPI_ISteamUtils_GetEnteredGamepadTextInput( Self,pchText,cchText );
}

const char * bbSteamAPI_ISteamUtils_GetSteamUILanguage( ISteamUtils * Self ){
  return SteamAPI_ISteamUtils_GetSteamUILanguage( Self );
}

bool bbSteamAPI_ISteamUtils_IsSteamRunningInVR( ISteamUtils * Self ){
  return SteamAPI_ISteamUtils_IsSteamRunningInVR( Self );
}

void bbSteamAPI_ISteamUtils_SetOverlayNotificationInset( ISteamUtils * Self, int nHorizontalInset, int nVerticalInset ){
  SteamAPI_ISteamUtils_SetOverlayNotificationInset( Self,nHorizontalInset,nVerticalInset );
}

bool bbSteamAPI_ISteamUtils_IsSteamInBigPictureMode( ISteamUtils * Self ){
  return SteamAPI_ISteamUtils_IsSteamInBigPictureMode( Self );
}

void bbSteamAPI_ISteamUtils_StartVRDashboard( ISteamUtils * Self ){
  SteamAPI_ISteamUtils_StartVRDashboard( Self );
}

bool bbSteamAPI_ISteamUtils_IsVRHeadsetStreamingEnabled( ISteamUtils * Self ){
  return SteamAPI_ISteamUtils_IsVRHeadsetStreamingEnabled( Self );
}

void bbSteamAPI_ISteamUtils_SetVRHeadsetStreamingEnabled( ISteamUtils * Self, bool bEnabled ){
  SteamAPI_ISteamUtils_SetVRHeadsetStreamingEnabled( Self,bEnabled );
}

bool bbSteamAPI_ISteamUtils_IsSteamChinaLauncher( ISteamUtils * Self ){
  return SteamAPI_ISteamUtils_IsSteamChinaLauncher( Self );
}

bool bbSteamAPI_ISteamUtils_InitFilterText( ISteamUtils * Self ){
  return SteamAPI_ISteamUtils_InitFilterText( Self );
}

int bbSteamAPI_ISteamUtils_FilterText( ISteamUtils * Self, char * pchOutFilteredText, uint32 nByteSizeOutFilteredText, const char * pchInputMessage, bool bLegalOnly ){
  return SteamAPI_ISteamUtils_FilterText( Self,pchOutFilteredText,nByteSizeOutFilteredText,pchInputMessage,bLegalOnly );
}

ESteamIPv6ConnectivityState bbSteamAPI_ISteamUtils_GetIPv6ConnectivityState( ISteamUtils * Self, ESteamIPv6ConnectivityProtocol eProtocol ){
  return SteamAPI_ISteamUtils_GetIPv6ConnectivityState( Self,eProtocol );
}

int bbSteamAPI_ISteamMatchmaking_GetFavoriteGameCount( ISteamMatchmaking * Self ){
  return SteamAPI_ISteamMatchmaking_GetFavoriteGameCount( Self );
}

bool bbSteamAPI_ISteamMatchmaking_GetFavoriteGame( ISteamMatchmaking * Self, int iGame, AppId_t * pnAppID, uint32 * pnIP, uint16 * pnConnPort, uint16 * pnQueryPort, uint32 * punFlags, uint32 * pRTime32LastPlayedOnServer ){
  return SteamAPI_ISteamMatchmaking_GetFavoriteGame( Self,iGame,pnAppID,pnIP,pnConnPort,pnQueryPort,punFlags,pRTime32LastPlayedOnServer );
}

int bbSteamAPI_ISteamMatchmaking_AddFavoriteGame( ISteamMatchmaking * Self, AppId_t nAppID, uint32 nIP, uint16 nConnPort, uint16 nQueryPort, uint32 unFlags, uint32 rTime32LastPlayedOnServer ){
  return SteamAPI_ISteamMatchmaking_AddFavoriteGame( Self,nAppID,nIP,nConnPort,nQueryPort,unFlags,rTime32LastPlayedOnServer );
}

bool bbSteamAPI_ISteamMatchmaking_RemoveFavoriteGame( ISteamMatchmaking * Self, AppId_t nAppID, uint32 nIP, uint16 nConnPort, uint16 nQueryPort, uint32 unFlags ){
  return SteamAPI_ISteamMatchmaking_RemoveFavoriteGame( Self,nAppID,nIP,nConnPort,nQueryPort,unFlags );
}

SteamAPICall_t bbSteamAPI_ISteamMatchmaking_RequestLobbyList( ISteamMatchmaking * Self ){
  return SteamAPI_ISteamMatchmaking_RequestLobbyList( Self );
}

void bbSteamAPI_ISteamMatchmaking_AddRequestLobbyListStringFilter( ISteamMatchmaking * Self, const char * pchKeyToMatch, const char * pchValueToMatch, ELobbyComparison eComparisonType ){
  SteamAPI_ISteamMatchmaking_AddRequestLobbyListStringFilter( Self,pchKeyToMatch,pchValueToMatch,eComparisonType );
}

void bbSteamAPI_ISteamMatchmaking_AddRequestLobbyListNumericalFilter( ISteamMatchmaking * Self, const char * pchKeyToMatch, int nValueToMatch, ELobbyComparison eComparisonType ){
  SteamAPI_ISteamMatchmaking_AddRequestLobbyListNumericalFilter( Self,pchKeyToMatch,nValueToMatch,eComparisonType );
}

void bbSteamAPI_ISteamMatchmaking_AddRequestLobbyListNearValueFilter( ISteamMatchmaking * Self, const char * pchKeyToMatch, int nValueToBeCloseTo ){
  SteamAPI_ISteamMatchmaking_AddRequestLobbyListNearValueFilter( Self,pchKeyToMatch,nValueToBeCloseTo );
}

void bbSteamAPI_ISteamMatchmaking_AddRequestLobbyListFilterSlotsAvailable( ISteamMatchmaking * Self, int nSlotsAvailable ){
  SteamAPI_ISteamMatchmaking_AddRequestLobbyListFilterSlotsAvailable( Self,nSlotsAvailable );
}

void bbSteamAPI_ISteamMatchmaking_AddRequestLobbyListDistanceFilter( ISteamMatchmaking * Self, ELobbyDistanceFilter eLobbyDistanceFilter ){
  SteamAPI_ISteamMatchmaking_AddRequestLobbyListDistanceFilter( Self,eLobbyDistanceFilter );
}

void bbSteamAPI_ISteamMatchmaking_AddRequestLobbyListResultCountFilter( ISteamMatchmaking * Self, int cMaxResults ){
  SteamAPI_ISteamMatchmaking_AddRequestLobbyListResultCountFilter( Self,cMaxResults );
}

void bbSteamAPI_ISteamMatchmaking_AddRequestLobbyListCompatibleMembersFilter( ISteamMatchmaking * Self, uint64_steamid steamIDLobby ){
  SteamAPI_ISteamMatchmaking_AddRequestLobbyListCompatibleMembersFilter( Self,steamIDLobby );
}

CSteamID bbSteamAPI_ISteamMatchmaking_GetLobbyByIndex( ISteamMatchmaking * Self, int iLobby ){
  return SteamAPI_ISteamMatchmaking_GetLobbyByIndex( Self,iLobby );
}

SteamAPICall_t bbSteamAPI_ISteamMatchmaking_CreateLobby( ISteamMatchmaking * Self, ELobbyType eLobbyType, int cMaxMembers ){
  return SteamAPI_ISteamMatchmaking_CreateLobby( Self,eLobbyType,cMaxMembers );
}

SteamAPICall_t bbSteamAPI_ISteamMatchmaking_JoinLobby( ISteamMatchmaking * Self, uint64_steamid steamIDLobby ){
  return SteamAPI_ISteamMatchmaking_JoinLobby( Self,steamIDLobby );
}

void bbSteamAPI_ISteamMatchmaking_LeaveLobby( ISteamMatchmaking * Self, uint64_steamid steamIDLobby ){
  SteamAPI_ISteamMatchmaking_LeaveLobby( Self,steamIDLobby );
}

bool bbSteamAPI_ISteamMatchmaking_InviteUserToLobby( ISteamMatchmaking * Self, uint64_steamid steamIDLobby, uint64_steamid steamIDInvitee ){
  return SteamAPI_ISteamMatchmaking_InviteUserToLobby( Self,steamIDLobby,steamIDInvitee );
}

int bbSteamAPI_ISteamMatchmaking_GetNumLobbyMembers( ISteamMatchmaking * Self, uint64_steamid steamIDLobby ){
  return SteamAPI_ISteamMatchmaking_GetNumLobbyMembers( Self,steamIDLobby );
}

CSteamID bbSteamAPI_ISteamMatchmaking_GetLobbyMemberByIndex( ISteamMatchmaking * Self, uint64_steamid steamIDLobby, int iMember ){
  return SteamAPI_ISteamMatchmaking_GetLobbyMemberByIndex( Self,steamIDLobby,iMember );
}

const char * bbSteamAPI_ISteamMatchmaking_GetLobbyData( ISteamMatchmaking * Self, uint64_steamid steamIDLobby, const char * pchKey ){
  return SteamAPI_ISteamMatchmaking_GetLobbyData( Self,steamIDLobby,pchKey );
}

bool bbSteamAPI_ISteamMatchmaking_SetLobbyData( ISteamMatchmaking * Self, uint64_steamid steamIDLobby, const char * pchKey, const char * pchValue ){
  return SteamAPI_ISteamMatchmaking_SetLobbyData( Self,steamIDLobby,pchKey,pchValue );
}

int bbSteamAPI_ISteamMatchmaking_GetLobbyDataCount( ISteamMatchmaking * Self, uint64_steamid steamIDLobby ){
  return SteamAPI_ISteamMatchmaking_GetLobbyDataCount( Self,steamIDLobby );
}

bool bbSteamAPI_ISteamMatchmaking_GetLobbyDataByIndex( ISteamMatchmaking * Self, uint64_steamid steamIDLobby, int iLobbyData, char * pchKey, int cchKeyBufferSize, char * pchValue, int cchValueBufferSize ){
  return SteamAPI_ISteamMatchmaking_GetLobbyDataByIndex( Self,steamIDLobby,iLobbyData,pchKey,cchKeyBufferSize,pchValue,cchValueBufferSize );
}

bool bbSteamAPI_ISteamMatchmaking_DeleteLobbyData( ISteamMatchmaking * Self, uint64_steamid steamIDLobby, const char * pchKey ){
  return SteamAPI_ISteamMatchmaking_DeleteLobbyData( Self,steamIDLobby,pchKey );
}

const char * bbSteamAPI_ISteamMatchmaking_GetLobbyMemberData( ISteamMatchmaking * Self, uint64_steamid steamIDLobby, uint64_steamid steamIDUser, const char * pchKey ){
  return SteamAPI_ISteamMatchmaking_GetLobbyMemberData( Self,steamIDLobby,steamIDUser,pchKey );
}

void bbSteamAPI_ISteamMatchmaking_SetLobbyMemberData( ISteamMatchmaking * Self, uint64_steamid steamIDLobby, const char * pchKey, const char * pchValue ){
  SteamAPI_ISteamMatchmaking_SetLobbyMemberData( Self,steamIDLobby,pchKey,pchValue );
}

bool bbSteamAPI_ISteamMatchmaking_SendLobbyChatMsg( ISteamMatchmaking * Self, uint64_steamid steamIDLobby, const void * pvMsgBody, int cubMsgBody ){
  return SteamAPI_ISteamMatchmaking_SendLobbyChatMsg( Self,steamIDLobby,pvMsgBody,cubMsgBody );
}

int bbSteamAPI_ISteamMatchmaking_GetLobbyChatEntry( ISteamMatchmaking * Self, uint64_steamid steamIDLobby, int iChatID, CSteamID * pSteamIDUser, void * pvData, int cubData, EChatEntryType * peChatEntryType ){
  return SteamAPI_ISteamMatchmaking_GetLobbyChatEntry( Self,steamIDLobby,iChatID,pSteamIDUser,pvData,cubData,peChatEntryType );
}

bool bbSteamAPI_ISteamMatchmaking_RequestLobbyData( ISteamMatchmaking * Self, uint64_steamid steamIDLobby ){
  return SteamAPI_ISteamMatchmaking_RequestLobbyData( Self,steamIDLobby );
}

void bbSteamAPI_ISteamMatchmaking_SetLobbyGameServer( ISteamMatchmaking * Self, uint64_steamid steamIDLobby, uint32 unGameServerIP, uint16 unGameServerPort, uint64_steamid steamIDGameServer ){
  SteamAPI_ISteamMatchmaking_SetLobbyGameServer( Self,steamIDLobby,unGameServerIP,unGameServerPort,steamIDGameServer );
}

bool bbSteamAPI_ISteamMatchmaking_GetLobbyGameServer( ISteamMatchmaking * Self, uint64_steamid steamIDLobby, uint32 * punGameServerIP, uint16 * punGameServerPort, CSteamID * psteamIDGameServer ){
  return SteamAPI_ISteamMatchmaking_GetLobbyGameServer( Self,steamIDLobby,punGameServerIP,punGameServerPort,psteamIDGameServer );
}

bool bbSteamAPI_ISteamMatchmaking_SetLobbyMemberLimit( ISteamMatchmaking * Self, uint64_steamid steamIDLobby, int cMaxMembers ){
  return SteamAPI_ISteamMatchmaking_SetLobbyMemberLimit( Self,steamIDLobby,cMaxMembers );
}

int bbSteamAPI_ISteamMatchmaking_GetLobbyMemberLimit( ISteamMatchmaking * Self, uint64_steamid steamIDLobby ){
  return SteamAPI_ISteamMatchmaking_GetLobbyMemberLimit( Self,steamIDLobby );
}

bool bbSteamAPI_ISteamMatchmaking_SetLobbyType( ISteamMatchmaking * Self, uint64_steamid steamIDLobby, ELobbyType eLobbyType ){
  return SteamAPI_ISteamMatchmaking_SetLobbyType( Self,steamIDLobby,eLobbyType );
}

bool bbSteamAPI_ISteamMatchmaking_SetLobbyJoinable( ISteamMatchmaking * Self, uint64_steamid steamIDLobby, bool bLobbyJoinable ){
  return SteamAPI_ISteamMatchmaking_SetLobbyJoinable( Self,steamIDLobby,bLobbyJoinable );
}

CSteamID bbSteamAPI_ISteamMatchmaking_GetLobbyOwner( ISteamMatchmaking * Self, uint64_steamid steamIDLobby ){
  return SteamAPI_ISteamMatchmaking_GetLobbyOwner( Self,steamIDLobby );
}

bool bbSteamAPI_ISteamMatchmaking_SetLobbyOwner( ISteamMatchmaking * Self, uint64_steamid steamIDLobby, uint64_steamid steamIDNewOwner ){
  return SteamAPI_ISteamMatchmaking_SetLobbyOwner( Self,steamIDLobby,steamIDNewOwner );
}

bool bbSteamAPI_ISteamMatchmaking_SetLinkedLobby( ISteamMatchmaking * Self, uint64_steamid steamIDLobby, uint64_steamid steamIDLobbyDependent ){
  return SteamAPI_ISteamMatchmaking_SetLinkedLobby( Self,steamIDLobby,steamIDLobbyDependent );
}

void bbSteamAPI_ISteamMatchmakingServerListResponse_ServerResponded( ISteamMatchmakingServerListResponse * Self, HServerListRequest hRequest, int iServer ){
  SteamAPI_ISteamMatchmakingServerListResponse_ServerResponded( Self,hRequest,iServer );
}

void bbSteamAPI_ISteamMatchmakingServerListResponse_ServerFailedToRespond( ISteamMatchmakingServerListResponse * Self, HServerListRequest hRequest, int iServer ){
  SteamAPI_ISteamMatchmakingServerListResponse_ServerFailedToRespond( Self,hRequest,iServer );
}

void bbSteamAPI_ISteamMatchmakingServerListResponse_RefreshComplete( ISteamMatchmakingServerListResponse * Self, HServerListRequest hRequest, EMatchMakingServerResponse response ){
  SteamAPI_ISteamMatchmakingServerListResponse_RefreshComplete( Self,hRequest,response );
}

void bbSteamAPI_ISteamMatchmakingPingResponse_ServerResponded( ISteamMatchmakingPingResponse * Self, gameserveritem_t & server ){
  SteamAPI_ISteamMatchmakingPingResponse_ServerResponded( Self,server );
}

void bbSteamAPI_ISteamMatchmakingPingResponse_ServerFailedToRespond( ISteamMatchmakingPingResponse * Self ){
  SteamAPI_ISteamMatchmakingPingResponse_ServerFailedToRespond( Self );
}

void bbSteamAPI_ISteamMatchmakingPlayersResponse_AddPlayerToList( ISteamMatchmakingPlayersResponse * Self, const char * pchName, int nScore, float flTimePlayed ){
  SteamAPI_ISteamMatchmakingPlayersResponse_AddPlayerToList( Self,pchName,nScore,flTimePlayed );
}

void bbSteamAPI_ISteamMatchmakingPlayersResponse_PlayersFailedToRespond( ISteamMatchmakingPlayersResponse * Self ){
  SteamAPI_ISteamMatchmakingPlayersResponse_PlayersFailedToRespond( Self );
}

void bbSteamAPI_ISteamMatchmakingPlayersResponse_PlayersRefreshComplete( ISteamMatchmakingPlayersResponse * Self ){
  SteamAPI_ISteamMatchmakingPlayersResponse_PlayersRefreshComplete( Self );
}

void bbSteamAPI_ISteamMatchmakingRulesResponse_RulesResponded( ISteamMatchmakingRulesResponse * Self, const char * pchRule, const char * pchValue ){
  SteamAPI_ISteamMatchmakingRulesResponse_RulesResponded( Self,pchRule,pchValue );
}

void bbSteamAPI_ISteamMatchmakingRulesResponse_RulesFailedToRespond( ISteamMatchmakingRulesResponse * Self ){
  SteamAPI_ISteamMatchmakingRulesResponse_RulesFailedToRespond( Self );
}

void bbSteamAPI_ISteamMatchmakingRulesResponse_RulesRefreshComplete( ISteamMatchmakingRulesResponse * Self ){
  SteamAPI_ISteamMatchmakingRulesResponse_RulesRefreshComplete( Self );
}

HServerListRequest bbSteamAPI_ISteamMatchmakingServers_RequestInternetServerList( ISteamMatchmakingServers * Self, AppId_t iApp, MatchMakingKeyValuePair_t ** ppchFilters, uint32 nFilters, ISteamMatchmakingServerListResponse * pRequestServersResponse ){
  return SteamAPI_ISteamMatchmakingServers_RequestInternetServerList( Self,iApp,ppchFilters,nFilters,pRequestServersResponse );
}

HServerListRequest bbSteamAPI_ISteamMatchmakingServers_RequestLANServerList( ISteamMatchmakingServers * Self, AppId_t iApp, ISteamMatchmakingServerListResponse * pRequestServersResponse ){
  return SteamAPI_ISteamMatchmakingServers_RequestLANServerList( Self,iApp,pRequestServersResponse );
}

HServerListRequest bbSteamAPI_ISteamMatchmakingServers_RequestFriendsServerList( ISteamMatchmakingServers * Self, AppId_t iApp, MatchMakingKeyValuePair_t ** ppchFilters, uint32 nFilters, ISteamMatchmakingServerListResponse * pRequestServersResponse ){
  return SteamAPI_ISteamMatchmakingServers_RequestFriendsServerList( Self,iApp,ppchFilters,nFilters,pRequestServersResponse );
}

HServerListRequest bbSteamAPI_ISteamMatchmakingServers_RequestFavoritesServerList( ISteamMatchmakingServers * Self, AppId_t iApp, MatchMakingKeyValuePair_t ** ppchFilters, uint32 nFilters, ISteamMatchmakingServerListResponse * pRequestServersResponse ){
  return SteamAPI_ISteamMatchmakingServers_RequestFavoritesServerList( Self,iApp,ppchFilters,nFilters,pRequestServersResponse );
}

HServerListRequest bbSteamAPI_ISteamMatchmakingServers_RequestHistoryServerList( ISteamMatchmakingServers * Self, AppId_t iApp, MatchMakingKeyValuePair_t ** ppchFilters, uint32 nFilters, ISteamMatchmakingServerListResponse * pRequestServersResponse ){
  return SteamAPI_ISteamMatchmakingServers_RequestHistoryServerList( Self,iApp,ppchFilters,nFilters,pRequestServersResponse );
}

HServerListRequest bbSteamAPI_ISteamMatchmakingServers_RequestSpectatorServerList( ISteamMatchmakingServers * Self, AppId_t iApp, MatchMakingKeyValuePair_t ** ppchFilters, uint32 nFilters, ISteamMatchmakingServerListResponse * pRequestServersResponse ){
  return SteamAPI_ISteamMatchmakingServers_RequestSpectatorServerList( Self,iApp,ppchFilters,nFilters,pRequestServersResponse );
}

void bbSteamAPI_ISteamMatchmakingServers_ReleaseRequest( ISteamMatchmakingServers * Self, HServerListRequest hServerListRequest ){
  SteamAPI_ISteamMatchmakingServers_ReleaseRequest( Self,hServerListRequest );
}

gameserveritem_t * bbSteamAPI_ISteamMatchmakingServers_GetServerDetails( ISteamMatchmakingServers * Self, HServerListRequest hRequest, int iServer ){
  return SteamAPI_ISteamMatchmakingServers_GetServerDetails( Self,hRequest,iServer );
}

void bbSteamAPI_ISteamMatchmakingServers_CancelQuery( ISteamMatchmakingServers * Self, HServerListRequest hRequest ){
  SteamAPI_ISteamMatchmakingServers_CancelQuery( Self,hRequest );
}

void bbSteamAPI_ISteamMatchmakingServers_RefreshQuery( ISteamMatchmakingServers * Self, HServerListRequest hRequest ){
  SteamAPI_ISteamMatchmakingServers_RefreshQuery( Self,hRequest );
}

bool bbSteamAPI_ISteamMatchmakingServers_IsRefreshing( ISteamMatchmakingServers * Self, HServerListRequest hRequest ){
  return SteamAPI_ISteamMatchmakingServers_IsRefreshing( Self,hRequest );
}

int bbSteamAPI_ISteamMatchmakingServers_GetServerCount( ISteamMatchmakingServers * Self, HServerListRequest hRequest ){
  return SteamAPI_ISteamMatchmakingServers_GetServerCount( Self,hRequest );
}

void bbSteamAPI_ISteamMatchmakingServers_RefreshServer( ISteamMatchmakingServers * Self, HServerListRequest hRequest, int iServer ){
  SteamAPI_ISteamMatchmakingServers_RefreshServer( Self,hRequest,iServer );
}

HServerQuery bbSteamAPI_ISteamMatchmakingServers_PingServer( ISteamMatchmakingServers * Self, uint32 unIP, uint16 usPort, ISteamMatchmakingPingResponse * pRequestServersResponse ){
  return SteamAPI_ISteamMatchmakingServers_PingServer( Self,unIP,usPort,pRequestServersResponse );
}

HServerQuery bbSteamAPI_ISteamMatchmakingServers_PlayerDetails( ISteamMatchmakingServers * Self, uint32 unIP, uint16 usPort, ISteamMatchmakingPlayersResponse * pRequestServersResponse ){
  return SteamAPI_ISteamMatchmakingServers_PlayerDetails( Self,unIP,usPort,pRequestServersResponse );
}

HServerQuery bbSteamAPI_ISteamMatchmakingServers_ServerRules( ISteamMatchmakingServers * Self, uint32 unIP, uint16 usPort, ISteamMatchmakingRulesResponse * pRequestServersResponse ){
  return SteamAPI_ISteamMatchmakingServers_ServerRules( Self,unIP,usPort,pRequestServersResponse );
}

void bbSteamAPI_ISteamMatchmakingServers_CancelServerQuery( ISteamMatchmakingServers * Self, HServerQuery hServerQuery ){
  SteamAPI_ISteamMatchmakingServers_CancelServerQuery( Self,hServerQuery );
}

EGameSearchErrorCode_t bbSteamAPI_ISteamGameSearch_AddGameSearchParams( ISteamGameSearch * Self, const char * pchKeyToFind, const char * pchValuesToFind ){
  return SteamAPI_ISteamGameSearch_AddGameSearchParams( Self,pchKeyToFind,pchValuesToFind );
}

EGameSearchErrorCode_t bbSteamAPI_ISteamGameSearch_SearchForGameWithLobby( ISteamGameSearch * Self, uint64_steamid steamIDLobby, int nPlayerMin, int nPlayerMax ){
  return SteamAPI_ISteamGameSearch_SearchForGameWithLobby( Self,steamIDLobby,nPlayerMin,nPlayerMax );
}

EGameSearchErrorCode_t bbSteamAPI_ISteamGameSearch_SearchForGameSolo( ISteamGameSearch * Self, int nPlayerMin, int nPlayerMax ){
  return SteamAPI_ISteamGameSearch_SearchForGameSolo( Self,nPlayerMin,nPlayerMax );
}

EGameSearchErrorCode_t bbSteamAPI_ISteamGameSearch_AcceptGame( ISteamGameSearch * Self ){
  return SteamAPI_ISteamGameSearch_AcceptGame( Self );
}

EGameSearchErrorCode_t bbSteamAPI_ISteamGameSearch_DeclineGame( ISteamGameSearch * Self ){
  return SteamAPI_ISteamGameSearch_DeclineGame( Self );
}

EGameSearchErrorCode_t bbSteamAPI_ISteamGameSearch_RetrieveConnectionDetails( ISteamGameSearch * Self, uint64_steamid steamIDHost, char * pchConnectionDetails, int cubConnectionDetails ){
  return SteamAPI_ISteamGameSearch_RetrieveConnectionDetails( Self,steamIDHost,pchConnectionDetails,cubConnectionDetails );
}

EGameSearchErrorCode_t bbSteamAPI_ISteamGameSearch_EndGameSearch( ISteamGameSearch * Self ){
  return SteamAPI_ISteamGameSearch_EndGameSearch( Self );
}

EGameSearchErrorCode_t bbSteamAPI_ISteamGameSearch_SetGameHostParams( ISteamGameSearch * Self, const char * pchKey, const char * pchValue ){
  return SteamAPI_ISteamGameSearch_SetGameHostParams( Self,pchKey,pchValue );
}

EGameSearchErrorCode_t bbSteamAPI_ISteamGameSearch_SetConnectionDetails( ISteamGameSearch * Self, const char * pchConnectionDetails, int cubConnectionDetails ){
  return SteamAPI_ISteamGameSearch_SetConnectionDetails( Self,pchConnectionDetails,cubConnectionDetails );
}

EGameSearchErrorCode_t bbSteamAPI_ISteamGameSearch_RequestPlayersForGame( ISteamGameSearch * Self, int nPlayerMin, int nPlayerMax, int nMaxTeamSize ){
  return SteamAPI_ISteamGameSearch_RequestPlayersForGame( Self,nPlayerMin,nPlayerMax,nMaxTeamSize );
}

EGameSearchErrorCode_t bbSteamAPI_ISteamGameSearch_HostConfirmGameStart( ISteamGameSearch * Self, uint64 ullUniqueGameID ){
  return SteamAPI_ISteamGameSearch_HostConfirmGameStart( Self,ullUniqueGameID );
}

EGameSearchErrorCode_t bbSteamAPI_ISteamGameSearch_CancelRequestPlayersForGame( ISteamGameSearch * Self ){
  return SteamAPI_ISteamGameSearch_CancelRequestPlayersForGame( Self );
}

EGameSearchErrorCode_t bbSteamAPI_ISteamGameSearch_SubmitPlayerResult( ISteamGameSearch * Self, uint64 ullUniqueGameID, uint64_steamid steamIDPlayer, EPlayerResult_t EPlayerResult ){
  return SteamAPI_ISteamGameSearch_SubmitPlayerResult( Self,ullUniqueGameID,steamIDPlayer,EPlayerResult );
}

EGameSearchErrorCode_t bbSteamAPI_ISteamGameSearch_EndGame( ISteamGameSearch * Self, uint64 ullUniqueGameID ){
  return SteamAPI_ISteamGameSearch_EndGame( Self,ullUniqueGameID );
}

uint32 bbSteamAPI_ISteamParties_GetNumActiveBeacons( ISteamParties * Self ){
  return SteamAPI_ISteamParties_GetNumActiveBeacons( Self );
}

PartyBeaconID_t bbSteamAPI_ISteamParties_GetBeaconByIndex( ISteamParties * Self, uint32 unIndex ){
  return SteamAPI_ISteamParties_GetBeaconByIndex( Self,unIndex );
}

bool bbSteamAPI_ISteamParties_GetBeaconDetails( ISteamParties * Self, PartyBeaconID_t ulBeaconID, CSteamID * pSteamIDBeaconOwner, SteamPartyBeaconLocation_t * pLocation, char * pchMetadata, int cchMetadata ){
  return SteamAPI_ISteamParties_GetBeaconDetails( Self,ulBeaconID,pSteamIDBeaconOwner,pLocation,pchMetadata,cchMetadata );
}

SteamAPICall_t bbSteamAPI_ISteamParties_JoinParty( ISteamParties * Self, PartyBeaconID_t ulBeaconID ){
  return SteamAPI_ISteamParties_JoinParty( Self,ulBeaconID );
}

bool bbSteamAPI_ISteamParties_GetNumAvailableBeaconLocations( ISteamParties * Self, uint32 * puNumLocations ){
  return SteamAPI_ISteamParties_GetNumAvailableBeaconLocations( Self,puNumLocations );
}

bool bbSteamAPI_ISteamParties_GetAvailableBeaconLocations( ISteamParties * Self, SteamPartyBeaconLocation_t * pLocationList, uint32 uMaxNumLocations ){
  return SteamAPI_ISteamParties_GetAvailableBeaconLocations( Self,pLocationList,uMaxNumLocations );
}

SteamAPICall_t bbSteamAPI_ISteamParties_CreateBeacon( ISteamParties * Self, uint32 unOpenSlots, SteamPartyBeaconLocation_t * pBeaconLocation, const char * pchConnectString, const char * pchMetadata ){
  return SteamAPI_ISteamParties_CreateBeacon( Self,unOpenSlots,pBeaconLocation,pchConnectString,pchMetadata );
}

void bbSteamAPI_ISteamParties_OnReservationCompleted( ISteamParties * Self, PartyBeaconID_t ulBeacon, uint64_steamid steamIDUser ){
  SteamAPI_ISteamParties_OnReservationCompleted( Self,ulBeacon,steamIDUser );
}

void bbSteamAPI_ISteamParties_CancelReservation( ISteamParties * Self, PartyBeaconID_t ulBeacon, uint64_steamid steamIDUser ){
  SteamAPI_ISteamParties_CancelReservation( Self,ulBeacon,steamIDUser );
}

SteamAPICall_t bbSteamAPI_ISteamParties_ChangeNumOpenSlots( ISteamParties * Self, PartyBeaconID_t ulBeacon, uint32 unOpenSlots ){
  return SteamAPI_ISteamParties_ChangeNumOpenSlots( Self,ulBeacon,unOpenSlots );
}

bool bbSteamAPI_ISteamParties_DestroyBeacon( ISteamParties * Self, PartyBeaconID_t ulBeacon ){
  return SteamAPI_ISteamParties_DestroyBeacon( Self,ulBeacon );
}

bool bbSteamAPI_ISteamParties_GetBeaconLocationData( ISteamParties * Self, SteamPartyBeaconLocation_t BeaconLocation, ESteamPartyBeaconLocationData eData, char * pchDataStringOut, int cchDataStringOut ){
  return SteamAPI_ISteamParties_GetBeaconLocationData( Self,BeaconLocation,eData,pchDataStringOut,cchDataStringOut );
}

bool bbSteamAPI_ISteamRemoteStorage_FileWrite( ISteamRemoteStorage * Self, const char * pchFile, const void * pvData, int32 cubData ){
  return SteamAPI_ISteamRemoteStorage_FileWrite( Self,pchFile,pvData,cubData );
}

int32 bbSteamAPI_ISteamRemoteStorage_FileRead( ISteamRemoteStorage * Self, const char * pchFile, void * pvData, int32 cubDataToRead ){
  return SteamAPI_ISteamRemoteStorage_FileRead( Self,pchFile,pvData,cubDataToRead );
}

SteamAPICall_t bbSteamAPI_ISteamRemoteStorage_FileWriteAsync( ISteamRemoteStorage * Self, const char * pchFile, const void * pvData, uint32 cubData ){
  return SteamAPI_ISteamRemoteStorage_FileWriteAsync( Self,pchFile,pvData,cubData );
}

SteamAPICall_t bbSteamAPI_ISteamRemoteStorage_FileReadAsync( ISteamRemoteStorage * Self, const char * pchFile, uint32 nOffset, uint32 cubToRead ){
  return SteamAPI_ISteamRemoteStorage_FileReadAsync( Self,pchFile,nOffset,cubToRead );
}

bool bbSteamAPI_ISteamRemoteStorage_FileReadAsyncComplete( ISteamRemoteStorage * Self, SteamAPICall_t hReadCall, void * pvBuffer, uint32 cubToRead ){
  return SteamAPI_ISteamRemoteStorage_FileReadAsyncComplete( Self,hReadCall,pvBuffer,cubToRead );
}

bool bbSteamAPI_ISteamRemoteStorage_FileForget( ISteamRemoteStorage * Self, const char * pchFile ){
  return SteamAPI_ISteamRemoteStorage_FileForget( Self,pchFile );
}

bool bbSteamAPI_ISteamRemoteStorage_FileDelete( ISteamRemoteStorage * Self, const char * pchFile ){
  return SteamAPI_ISteamRemoteStorage_FileDelete( Self,pchFile );
}

SteamAPICall_t bbSteamAPI_ISteamRemoteStorage_FileShare( ISteamRemoteStorage * Self, const char * pchFile ){
  return SteamAPI_ISteamRemoteStorage_FileShare( Self,pchFile );
}

bool bbSteamAPI_ISteamRemoteStorage_SetSyncPlatforms( ISteamRemoteStorage * Self, const char * pchFile, ERemoteStoragePlatform eRemoteStoragePlatform ){
  return SteamAPI_ISteamRemoteStorage_SetSyncPlatforms( Self,pchFile,eRemoteStoragePlatform );
}

UGCFileWriteStreamHandle_t bbSteamAPI_ISteamRemoteStorage_FileWriteStreamOpen( ISteamRemoteStorage * Self, const char * pchFile ){
  return SteamAPI_ISteamRemoteStorage_FileWriteStreamOpen( Self,pchFile );
}

bool bbSteamAPI_ISteamRemoteStorage_FileWriteStreamWriteChunk( ISteamRemoteStorage * Self, UGCFileWriteStreamHandle_t writeHandle, const void * pvData, int32 cubData ){
  return SteamAPI_ISteamRemoteStorage_FileWriteStreamWriteChunk( Self,writeHandle,pvData,cubData );
}

bool bbSteamAPI_ISteamRemoteStorage_FileWriteStreamClose( ISteamRemoteStorage * Self, UGCFileWriteStreamHandle_t writeHandle ){
  return SteamAPI_ISteamRemoteStorage_FileWriteStreamClose( Self,writeHandle );
}

bool bbSteamAPI_ISteamRemoteStorage_FileWriteStreamCancel( ISteamRemoteStorage * Self, UGCFileWriteStreamHandle_t writeHandle ){
  return SteamAPI_ISteamRemoteStorage_FileWriteStreamCancel( Self,writeHandle );
}

bool bbSteamAPI_ISteamRemoteStorage_FileExists( ISteamRemoteStorage * Self, const char * pchFile ){
  return SteamAPI_ISteamRemoteStorage_FileExists( Self,pchFile );
}

bool bbSteamAPI_ISteamRemoteStorage_FilePersisted( ISteamRemoteStorage * Self, const char * pchFile ){
  return SteamAPI_ISteamRemoteStorage_FilePersisted( Self,pchFile );
}

int32 bbSteamAPI_ISteamRemoteStorage_GetFileSize( ISteamRemoteStorage * Self, const char * pchFile ){
  return SteamAPI_ISteamRemoteStorage_GetFileSize( Self,pchFile );
}

int64 bbSteamAPI_ISteamRemoteStorage_GetFileTimestamp( ISteamRemoteStorage * Self, const char * pchFile ){
  return SteamAPI_ISteamRemoteStorage_GetFileTimestamp( Self,pchFile );
}

ERemoteStoragePlatform bbSteamAPI_ISteamRemoteStorage_GetSyncPlatforms( ISteamRemoteStorage * Self, const char * pchFile ){
  return SteamAPI_ISteamRemoteStorage_GetSyncPlatforms( Self,pchFile );
}

int32 bbSteamAPI_ISteamRemoteStorage_GetFileCount( ISteamRemoteStorage * Self ){
  return SteamAPI_ISteamRemoteStorage_GetFileCount( Self );
}

const char * bbSteamAPI_ISteamRemoteStorage_GetFileNameAndSize( ISteamRemoteStorage * Self, int iFile, int32 * pnFileSizeInBytes ){
  return SteamAPI_ISteamRemoteStorage_GetFileNameAndSize( Self,iFile,pnFileSizeInBytes );
}

bool bbSteamAPI_ISteamRemoteStorage_GetQuota( ISteamRemoteStorage * Self, uint64 * pnTotalBytes, uint64 * puAvailableBytes ){
  return SteamAPI_ISteamRemoteStorage_GetQuota( Self,pnTotalBytes,puAvailableBytes );
}

bool bbSteamAPI_ISteamRemoteStorage_IsCloudEnabledForAccount( ISteamRemoteStorage * Self ){
  return SteamAPI_ISteamRemoteStorage_IsCloudEnabledForAccount( Self );
}

bool bbSteamAPI_ISteamRemoteStorage_IsCloudEnabledForApp( ISteamRemoteStorage * Self ){
  return SteamAPI_ISteamRemoteStorage_IsCloudEnabledForApp( Self );
}

void bbSteamAPI_ISteamRemoteStorage_SetCloudEnabledForApp( ISteamRemoteStorage * Self, bool bEnabled ){
  SteamAPI_ISteamRemoteStorage_SetCloudEnabledForApp( Self,bEnabled );
}

SteamAPICall_t bbSteamAPI_ISteamRemoteStorage_UGCDownload( ISteamRemoteStorage * Self, UGCHandle_t hContent, uint32 unPriority ){
  return SteamAPI_ISteamRemoteStorage_UGCDownload( Self,hContent,unPriority );
}

bool bbSteamAPI_ISteamRemoteStorage_GetUGCDownloadProgress( ISteamRemoteStorage * Self, UGCHandle_t hContent, int32 * pnBytesDownloaded, int32 * pnBytesExpected ){
  return SteamAPI_ISteamRemoteStorage_GetUGCDownloadProgress( Self,hContent,pnBytesDownloaded,pnBytesExpected );
}

bool bbSteamAPI_ISteamRemoteStorage_GetUGCDetails( ISteamRemoteStorage * Self, UGCHandle_t hContent, AppId_t * pnAppID, char ** ppchName, int32 * pnFileSizeInBytes, CSteamID * pSteamIDOwner ){
  return SteamAPI_ISteamRemoteStorage_GetUGCDetails( Self,hContent,pnAppID,ppchName,pnFileSizeInBytes,pSteamIDOwner );
}

int32 bbSteamAPI_ISteamRemoteStorage_UGCRead( ISteamRemoteStorage * Self, UGCHandle_t hContent, void * pvData, int32 cubDataToRead, uint32 cOffset, EUGCReadAction eAction ){
  return SteamAPI_ISteamRemoteStorage_UGCRead( Self,hContent,pvData,cubDataToRead,cOffset,eAction );
}

int32 bbSteamAPI_ISteamRemoteStorage_GetCachedUGCCount( ISteamRemoteStorage * Self ){
  return SteamAPI_ISteamRemoteStorage_GetCachedUGCCount( Self );
}

UGCHandle_t bbSteamAPI_ISteamRemoteStorage_GetCachedUGCHandle( ISteamRemoteStorage * Self, int32 iCachedContent ){
  return SteamAPI_ISteamRemoteStorage_GetCachedUGCHandle( Self,iCachedContent );
}

SteamAPICall_t bbSteamAPI_ISteamRemoteStorage_PublishWorkshopFile( ISteamRemoteStorage * Self, const char * pchFile, const char * pchPreviewFile, AppId_t nConsumerAppId, const char * pchTitle, const char * pchDescription, ERemoteStoragePublishedFileVisibility eVisibility, SteamParamStringArray_t * pTags, EWorkshopFileType eWorkshopFileType ){
  return SteamAPI_ISteamRemoteStorage_PublishWorkshopFile( Self,pchFile,pchPreviewFile,nConsumerAppId,pchTitle,pchDescription,eVisibility,pTags,eWorkshopFileType );
}

PublishedFileUpdateHandle_t bbSteamAPI_ISteamRemoteStorage_CreatePublishedFileUpdateRequest( ISteamRemoteStorage * Self, PublishedFileId_t unPublishedFileId ){
  return SteamAPI_ISteamRemoteStorage_CreatePublishedFileUpdateRequest( Self,unPublishedFileId );
}

bool bbSteamAPI_ISteamRemoteStorage_UpdatePublishedFileFile( ISteamRemoteStorage * Self, PublishedFileUpdateHandle_t updateHandle, const char * pchFile ){
  return SteamAPI_ISteamRemoteStorage_UpdatePublishedFileFile( Self,updateHandle,pchFile );
}

bool bbSteamAPI_ISteamRemoteStorage_UpdatePublishedFilePreviewFile( ISteamRemoteStorage * Self, PublishedFileUpdateHandle_t updateHandle, const char * pchPreviewFile ){
  return SteamAPI_ISteamRemoteStorage_UpdatePublishedFilePreviewFile( Self,updateHandle,pchPreviewFile );
}

bool bbSteamAPI_ISteamRemoteStorage_UpdatePublishedFileTitle( ISteamRemoteStorage * Self, PublishedFileUpdateHandle_t updateHandle, const char * pchTitle ){
  return SteamAPI_ISteamRemoteStorage_UpdatePublishedFileTitle( Self,updateHandle,pchTitle );
}

bool bbSteamAPI_ISteamRemoteStorage_UpdatePublishedFileDescription( ISteamRemoteStorage * Self, PublishedFileUpdateHandle_t updateHandle, const char * pchDescription ){
  return SteamAPI_ISteamRemoteStorage_UpdatePublishedFileDescription( Self,updateHandle,pchDescription );
}

bool bbSteamAPI_ISteamRemoteStorage_UpdatePublishedFileVisibility( ISteamRemoteStorage * Self, PublishedFileUpdateHandle_t updateHandle, ERemoteStoragePublishedFileVisibility eVisibility ){
  return SteamAPI_ISteamRemoteStorage_UpdatePublishedFileVisibility( Self,updateHandle,eVisibility );
}

bool bbSteamAPI_ISteamRemoteStorage_UpdatePublishedFileTags( ISteamRemoteStorage * Self, PublishedFileUpdateHandle_t updateHandle, SteamParamStringArray_t * pTags ){
  return SteamAPI_ISteamRemoteStorage_UpdatePublishedFileTags( Self,updateHandle,pTags );
}

SteamAPICall_t bbSteamAPI_ISteamRemoteStorage_CommitPublishedFileUpdate( ISteamRemoteStorage * Self, PublishedFileUpdateHandle_t updateHandle ){
  return SteamAPI_ISteamRemoteStorage_CommitPublishedFileUpdate( Self,updateHandle );
}

SteamAPICall_t bbSteamAPI_ISteamRemoteStorage_GetPublishedFileDetails( ISteamRemoteStorage * Self, PublishedFileId_t unPublishedFileId, uint32 unMaxSecondsOld ){
  return SteamAPI_ISteamRemoteStorage_GetPublishedFileDetails( Self,unPublishedFileId,unMaxSecondsOld );
}

SteamAPICall_t bbSteamAPI_ISteamRemoteStorage_DeletePublishedFile( ISteamRemoteStorage * Self, PublishedFileId_t unPublishedFileId ){
  return SteamAPI_ISteamRemoteStorage_DeletePublishedFile( Self,unPublishedFileId );
}

SteamAPICall_t bbSteamAPI_ISteamRemoteStorage_EnumerateUserPublishedFiles( ISteamRemoteStorage * Self, uint32 unStartIndex ){
  return SteamAPI_ISteamRemoteStorage_EnumerateUserPublishedFiles( Self,unStartIndex );
}

SteamAPICall_t bbSteamAPI_ISteamRemoteStorage_SubscribePublishedFile( ISteamRemoteStorage * Self, PublishedFileId_t unPublishedFileId ){
  return SteamAPI_ISteamRemoteStorage_SubscribePublishedFile( Self,unPublishedFileId );
}

SteamAPICall_t bbSteamAPI_ISteamRemoteStorage_EnumerateUserSubscribedFiles( ISteamRemoteStorage * Self, uint32 unStartIndex ){
  return SteamAPI_ISteamRemoteStorage_EnumerateUserSubscribedFiles( Self,unStartIndex );
}

SteamAPICall_t bbSteamAPI_ISteamRemoteStorage_UnsubscribePublishedFile( ISteamRemoteStorage * Self, PublishedFileId_t unPublishedFileId ){
  return SteamAPI_ISteamRemoteStorage_UnsubscribePublishedFile( Self,unPublishedFileId );
}

bool bbSteamAPI_ISteamRemoteStorage_UpdatePublishedFileSetChangeDescription( ISteamRemoteStorage * Self, PublishedFileUpdateHandle_t updateHandle, const char * pchChangeDescription ){
  return SteamAPI_ISteamRemoteStorage_UpdatePublishedFileSetChangeDescription( Self,updateHandle,pchChangeDescription );
}

SteamAPICall_t bbSteamAPI_ISteamRemoteStorage_GetPublishedItemVoteDetails( ISteamRemoteStorage * Self, PublishedFileId_t unPublishedFileId ){
  return SteamAPI_ISteamRemoteStorage_GetPublishedItemVoteDetails( Self,unPublishedFileId );
}

SteamAPICall_t bbSteamAPI_ISteamRemoteStorage_UpdateUserPublishedItemVote( ISteamRemoteStorage * Self, PublishedFileId_t unPublishedFileId, bool bVoteUp ){
  return SteamAPI_ISteamRemoteStorage_UpdateUserPublishedItemVote( Self,unPublishedFileId,bVoteUp );
}

SteamAPICall_t bbSteamAPI_ISteamRemoteStorage_GetUserPublishedItemVoteDetails( ISteamRemoteStorage * Self, PublishedFileId_t unPublishedFileId ){
  return SteamAPI_ISteamRemoteStorage_GetUserPublishedItemVoteDetails( Self,unPublishedFileId );
}

SteamAPICall_t bbSteamAPI_ISteamRemoteStorage_EnumerateUserSharedWorkshopFiles( ISteamRemoteStorage * Self, uint64_steamid steamId, uint32 unStartIndex, SteamParamStringArray_t * pRequiredTags, SteamParamStringArray_t * pExcludedTags ){
  return SteamAPI_ISteamRemoteStorage_EnumerateUserSharedWorkshopFiles( Self,steamId,unStartIndex,pRequiredTags,pExcludedTags );
}

SteamAPICall_t bbSteamAPI_ISteamRemoteStorage_PublishVideo( ISteamRemoteStorage * Self, EWorkshopVideoProvider eVideoProvider, const char * pchVideoAccount, const char * pchVideoIdentifier, const char * pchPreviewFile, AppId_t nConsumerAppId, const char * pchTitle, const char * pchDescription, ERemoteStoragePublishedFileVisibility eVisibility, SteamParamStringArray_t * pTags ){
  return SteamAPI_ISteamRemoteStorage_PublishVideo( Self,eVideoProvider,pchVideoAccount,pchVideoIdentifier,pchPreviewFile,nConsumerAppId,pchTitle,pchDescription,eVisibility,pTags );
}

SteamAPICall_t bbSteamAPI_ISteamRemoteStorage_SetUserPublishedFileAction( ISteamRemoteStorage * Self, PublishedFileId_t unPublishedFileId, EWorkshopFileAction eAction ){
  return SteamAPI_ISteamRemoteStorage_SetUserPublishedFileAction( Self,unPublishedFileId,eAction );
}

SteamAPICall_t bbSteamAPI_ISteamRemoteStorage_EnumeratePublishedFilesByUserAction( ISteamRemoteStorage * Self, EWorkshopFileAction eAction, uint32 unStartIndex ){
  return SteamAPI_ISteamRemoteStorage_EnumeratePublishedFilesByUserAction( Self,eAction,unStartIndex );
}

SteamAPICall_t bbSteamAPI_ISteamRemoteStorage_EnumeratePublishedWorkshopFiles( ISteamRemoteStorage * Self, EWorkshopEnumerationType eEnumerationType, uint32 unStartIndex, uint32 unCount, uint32 unDays, SteamParamStringArray_t * pTags, SteamParamStringArray_t * pUserTags ){
  return SteamAPI_ISteamRemoteStorage_EnumeratePublishedWorkshopFiles( Self,eEnumerationType,unStartIndex,unCount,unDays,pTags,pUserTags );
}

SteamAPICall_t bbSteamAPI_ISteamRemoteStorage_UGCDownloadToLocation( ISteamRemoteStorage * Self, UGCHandle_t hContent, const char * pchLocation, uint32 unPriority ){
  return SteamAPI_ISteamRemoteStorage_UGCDownloadToLocation( Self,hContent,pchLocation,unPriority );
}

bool bbSteamAPI_ISteamUserStats_RequestCurrentStats( ISteamUserStats * Self ){
  return SteamAPI_ISteamUserStats_RequestCurrentStats( Self );
}

bool bbSteamAPI_ISteamUserStats_GetStatInt32( ISteamUserStats * Self, const char * pchName, int32 * pData ){
  return SteamAPI_ISteamUserStats_GetStatInt32( Self,pchName,pData );
}

bool bbSteamAPI_ISteamUserStats_GetStatFloat( ISteamUserStats * Self, const char * pchName, float * pData ){
  return SteamAPI_ISteamUserStats_GetStatFloat( Self,pchName,pData );
}

bool bbSteamAPI_ISteamUserStats_SetStatInt32( ISteamUserStats * Self, const char * pchName, int32 nData ){
  return SteamAPI_ISteamUserStats_SetStatInt32( Self,pchName,nData );
}

bool bbSteamAPI_ISteamUserStats_SetStatFloat( ISteamUserStats * Self, const char * pchName, float fData ){
  return SteamAPI_ISteamUserStats_SetStatFloat( Self,pchName,fData );
}

bool bbSteamAPI_ISteamUserStats_UpdateAvgRateStat( ISteamUserStats * Self, const char * pchName, float flCountThisSession, double dSessionLength ){
  return SteamAPI_ISteamUserStats_UpdateAvgRateStat( Self,pchName,flCountThisSession,dSessionLength );
}

bool bbSteamAPI_ISteamUserStats_GetAchievement( ISteamUserStats * Self, const char * pchName, bool * pbAchieved ){
  return SteamAPI_ISteamUserStats_GetAchievement( Self,pchName,pbAchieved );
}

bool bbSteamAPI_ISteamUserStats_SetAchievement( ISteamUserStats * Self, const char * pchName ){
  return SteamAPI_ISteamUserStats_SetAchievement( Self,pchName );
}

bool bbSteamAPI_ISteamUserStats_ClearAchievement( ISteamUserStats * Self, const char * pchName ){
  return SteamAPI_ISteamUserStats_ClearAchievement( Self,pchName );
}

bool bbSteamAPI_ISteamUserStats_GetAchievementAndUnlockTime( ISteamUserStats * Self, const char * pchName, bool * pbAchieved, uint32 * punUnlockTime ){
  return SteamAPI_ISteamUserStats_GetAchievementAndUnlockTime( Self,pchName,pbAchieved,punUnlockTime );
}

bool bbSteamAPI_ISteamUserStats_StoreStats( ISteamUserStats * Self ){
  return SteamAPI_ISteamUserStats_StoreStats( Self );
}

int bbSteamAPI_ISteamUserStats_GetAchievementIcon( ISteamUserStats * Self, const char * pchName ){
  return SteamAPI_ISteamUserStats_GetAchievementIcon( Self,pchName );
}

const char * bbSteamAPI_ISteamUserStats_GetAchievementDisplayAttribute( ISteamUserStats * Self, const char * pchName, const char * pchKey ){
  return SteamAPI_ISteamUserStats_GetAchievementDisplayAttribute( Self,pchName,pchKey );
}

bool bbSteamAPI_ISteamUserStats_IndicateAchievementProgress( ISteamUserStats * Self, const char * pchName, uint32 nCurProgress, uint32 nMaxProgress ){
  return SteamAPI_ISteamUserStats_IndicateAchievementProgress( Self,pchName,nCurProgress,nMaxProgress );
}

uint32 bbSteamAPI_ISteamUserStats_GetNumAchievements( ISteamUserStats * Self ){
  return SteamAPI_ISteamUserStats_GetNumAchievements( Self );
}

const char * bbSteamAPI_ISteamUserStats_GetAchievementName( ISteamUserStats * Self, uint32 iAchievement ){
  return SteamAPI_ISteamUserStats_GetAchievementName( Self,iAchievement );
}

SteamAPICall_t bbSteamAPI_ISteamUserStats_RequestUserStats( ISteamUserStats * Self, uint64_steamid steamIDUser ){
  return SteamAPI_ISteamUserStats_RequestUserStats( Self,steamIDUser );
}

bool bbSteamAPI_ISteamUserStats_GetUserStatInt32( ISteamUserStats * Self, uint64_steamid steamIDUser, const char * pchName, int32 * pData ){
  return SteamAPI_ISteamUserStats_GetUserStatInt32( Self,steamIDUser,pchName,pData );
}

bool bbSteamAPI_ISteamUserStats_GetUserStatFloat( ISteamUserStats * Self, uint64_steamid steamIDUser, const char * pchName, float * pData ){
  return SteamAPI_ISteamUserStats_GetUserStatFloat( Self,steamIDUser,pchName,pData );
}

bool bbSteamAPI_ISteamUserStats_GetUserAchievement( ISteamUserStats * Self, uint64_steamid steamIDUser, const char * pchName, bool * pbAchieved ){
  return SteamAPI_ISteamUserStats_GetUserAchievement( Self,steamIDUser,pchName,pbAchieved );
}

bool bbSteamAPI_ISteamUserStats_GetUserAchievementAndUnlockTime( ISteamUserStats * Self, uint64_steamid steamIDUser, const char * pchName, bool * pbAchieved, uint32 * punUnlockTime ){
  return SteamAPI_ISteamUserStats_GetUserAchievementAndUnlockTime( Self,steamIDUser,pchName,pbAchieved,punUnlockTime );
}

bool bbSteamAPI_ISteamUserStats_ResetAllStats( ISteamUserStats * Self, bool bAchievementsToo ){
  return SteamAPI_ISteamUserStats_ResetAllStats( Self,bAchievementsToo );
}

SteamAPICall_t bbSteamAPI_ISteamUserStats_FindOrCreateLeaderboard( ISteamUserStats * Self, const char * pchLeaderboardName, ELeaderboardSortMethod eLeaderboardSortMethod, ELeaderboardDisplayType eLeaderboardDisplayType ){
  return SteamAPI_ISteamUserStats_FindOrCreateLeaderboard( Self,pchLeaderboardName,eLeaderboardSortMethod,eLeaderboardDisplayType );
}

SteamAPICall_t bbSteamAPI_ISteamUserStats_FindLeaderboard( ISteamUserStats * Self, const char * pchLeaderboardName ){
  return SteamAPI_ISteamUserStats_FindLeaderboard( Self,pchLeaderboardName );
}

const char * bbSteamAPI_ISteamUserStats_GetLeaderboardName( ISteamUserStats * Self, SteamLeaderboard_t hSteamLeaderboard ){
  return SteamAPI_ISteamUserStats_GetLeaderboardName( Self,hSteamLeaderboard );
}

int bbSteamAPI_ISteamUserStats_GetLeaderboardEntryCount( ISteamUserStats * Self, SteamLeaderboard_t hSteamLeaderboard ){
  return SteamAPI_ISteamUserStats_GetLeaderboardEntryCount( Self,hSteamLeaderboard );
}

ELeaderboardSortMethod bbSteamAPI_ISteamUserStats_GetLeaderboardSortMethod( ISteamUserStats * Self, SteamLeaderboard_t hSteamLeaderboard ){
  return SteamAPI_ISteamUserStats_GetLeaderboardSortMethod( Self,hSteamLeaderboard );
}

ELeaderboardDisplayType bbSteamAPI_ISteamUserStats_GetLeaderboardDisplayType( ISteamUserStats * Self, SteamLeaderboard_t hSteamLeaderboard ){
  return SteamAPI_ISteamUserStats_GetLeaderboardDisplayType( Self,hSteamLeaderboard );
}

SteamAPICall_t bbSteamAPI_ISteamUserStats_DownloadLeaderboardEntries( ISteamUserStats * Self, SteamLeaderboard_t hSteamLeaderboard, ELeaderboardDataRequest eLeaderboardDataRequest, int nRangeStart, int nRangeEnd ){
  return SteamAPI_ISteamUserStats_DownloadLeaderboardEntries( Self,hSteamLeaderboard,eLeaderboardDataRequest,nRangeStart,nRangeEnd );
}

SteamAPICall_t bbSteamAPI_ISteamUserStats_DownloadLeaderboardEntriesForUsers( ISteamUserStats * Self, SteamLeaderboard_t hSteamLeaderboard, CSteamID * prgUsers, int cUsers ){
  return SteamAPI_ISteamUserStats_DownloadLeaderboardEntriesForUsers( Self,hSteamLeaderboard,prgUsers,cUsers );
}

bool bbSteamAPI_ISteamUserStats_GetDownloadedLeaderboardEntry( ISteamUserStats * Self, SteamLeaderboardEntries_t hSteamLeaderboardEntries, int index, LeaderboardEntry_t * pLeaderboardEntry, int32 * pDetails, int cDetailsMax ){
  return SteamAPI_ISteamUserStats_GetDownloadedLeaderboardEntry( Self,hSteamLeaderboardEntries,index,pLeaderboardEntry,pDetails,cDetailsMax );
}

SteamAPICall_t bbSteamAPI_ISteamUserStats_UploadLeaderboardScore( ISteamUserStats * Self, SteamLeaderboard_t hSteamLeaderboard, ELeaderboardUploadScoreMethod eLeaderboardUploadScoreMethod, int32 nScore, const int32 * pScoreDetails, int cScoreDetailsCount ){
  return SteamAPI_ISteamUserStats_UploadLeaderboardScore( Self,hSteamLeaderboard,eLeaderboardUploadScoreMethod,nScore,pScoreDetails,cScoreDetailsCount );
}

SteamAPICall_t bbSteamAPI_ISteamUserStats_AttachLeaderboardUGC( ISteamUserStats * Self, SteamLeaderboard_t hSteamLeaderboard, UGCHandle_t hUGC ){
  return SteamAPI_ISteamUserStats_AttachLeaderboardUGC( Self,hSteamLeaderboard,hUGC );
}

SteamAPICall_t bbSteamAPI_ISteamUserStats_GetNumberOfCurrentPlayers( ISteamUserStats * Self ){
  return SteamAPI_ISteamUserStats_GetNumberOfCurrentPlayers( Self );
}

SteamAPICall_t bbSteamAPI_ISteamUserStats_RequestGlobalAchievementPercentages( ISteamUserStats * Self ){
  return SteamAPI_ISteamUserStats_RequestGlobalAchievementPercentages( Self );
}

int bbSteamAPI_ISteamUserStats_GetMostAchievedAchievementInfo( ISteamUserStats * Self, char * pchName, uint32 unNameBufLen, float * pflPercent, bool * pbAchieved ){
  return SteamAPI_ISteamUserStats_GetMostAchievedAchievementInfo( Self,pchName,unNameBufLen,pflPercent,pbAchieved );
}

int bbSteamAPI_ISteamUserStats_GetNextMostAchievedAchievementInfo( ISteamUserStats * Self, int iIteratorPrevious, char * pchName, uint32 unNameBufLen, float * pflPercent, bool * pbAchieved ){
  return SteamAPI_ISteamUserStats_GetNextMostAchievedAchievementInfo( Self,iIteratorPrevious,pchName,unNameBufLen,pflPercent,pbAchieved );
}

bool bbSteamAPI_ISteamUserStats_GetAchievementAchievedPercent( ISteamUserStats * Self, const char * pchName, float * pflPercent ){
  return SteamAPI_ISteamUserStats_GetAchievementAchievedPercent( Self,pchName,pflPercent );
}

SteamAPICall_t bbSteamAPI_ISteamUserStats_RequestGlobalStats( ISteamUserStats * Self, int nHistoryDays ){
  return SteamAPI_ISteamUserStats_RequestGlobalStats( Self,nHistoryDays );
}

bool bbSteamAPI_ISteamUserStats_GetGlobalStatInt64( ISteamUserStats * Self, const char * pchStatName, int64 * pData ){
  return SteamAPI_ISteamUserStats_GetGlobalStatInt64( Self,pchStatName,pData );
}

bool bbSteamAPI_ISteamUserStats_GetGlobalStatDouble( ISteamUserStats * Self, const char * pchStatName, double * pData ){
  return SteamAPI_ISteamUserStats_GetGlobalStatDouble( Self,pchStatName,pData );
}

int32 bbSteamAPI_ISteamUserStats_GetGlobalStatHistoryInt64( ISteamUserStats * Self, const char * pchStatName, int64 * pData, uint32 cubData ){
  return SteamAPI_ISteamUserStats_GetGlobalStatHistoryInt64( Self,pchStatName,pData,cubData );
}

int32 bbSteamAPI_ISteamUserStats_GetGlobalStatHistoryDouble( ISteamUserStats * Self, const char * pchStatName, double * pData, uint32 cubData ){
  return SteamAPI_ISteamUserStats_GetGlobalStatHistoryDouble( Self,pchStatName,pData,cubData );
}

bool bbSteamAPI_ISteamApps_BIsSubscribed( ISteamApps * Self ){
  return SteamAPI_ISteamApps_BIsSubscribed( Self );
}

bool bbSteamAPI_ISteamApps_BIsLowViolence( ISteamApps * Self ){
  return SteamAPI_ISteamApps_BIsLowViolence( Self );
}

bool bbSteamAPI_ISteamApps_BIsCybercafe( ISteamApps * Self ){
  return SteamAPI_ISteamApps_BIsCybercafe( Self );
}

bool bbSteamAPI_ISteamApps_BIsVACBanned( ISteamApps * Self ){
  return SteamAPI_ISteamApps_BIsVACBanned( Self );
}

const char * bbSteamAPI_ISteamApps_GetCurrentGameLanguage( ISteamApps * Self ){
  return SteamAPI_ISteamApps_GetCurrentGameLanguage( Self );
}

const char * bbSteamAPI_ISteamApps_GetAvailableGameLanguages( ISteamApps * Self ){
  return SteamAPI_ISteamApps_GetAvailableGameLanguages( Self );
}

bool bbSteamAPI_ISteamApps_BIsSubscribedApp( ISteamApps * Self, AppId_t appID ){
  return SteamAPI_ISteamApps_BIsSubscribedApp( Self,appID );
}

bool bbSteamAPI_ISteamApps_BIsDlcInstalled( ISteamApps * Self, AppId_t appID ){
  return SteamAPI_ISteamApps_BIsDlcInstalled( Self,appID );
}

uint32 bbSteamAPI_ISteamApps_GetEarliestPurchaseUnixTime( ISteamApps * Self, AppId_t nAppID ){
  return SteamAPI_ISteamApps_GetEarliestPurchaseUnixTime( Self,nAppID );
}

bool bbSteamAPI_ISteamApps_BIsSubscribedFromFreeWeekend( ISteamApps * Self ){
  return SteamAPI_ISteamApps_BIsSubscribedFromFreeWeekend( Self );
}

int bbSteamAPI_ISteamApps_GetDLCCount( ISteamApps * Self ){
  return SteamAPI_ISteamApps_GetDLCCount( Self );
}

bool bbSteamAPI_ISteamApps_BGetDLCDataByIndex( ISteamApps * Self, int iDLC, AppId_t * pAppID, bool * pbAvailable, char * pchName, int cchNameBufferSize ){
  return SteamAPI_ISteamApps_BGetDLCDataByIndex( Self,iDLC,pAppID,pbAvailable,pchName,cchNameBufferSize );
}

void bbSteamAPI_ISteamApps_InstallDLC( ISteamApps * Self, AppId_t nAppID ){
  SteamAPI_ISteamApps_InstallDLC( Self,nAppID );
}

void bbSteamAPI_ISteamApps_UninstallDLC( ISteamApps * Self, AppId_t nAppID ){
  SteamAPI_ISteamApps_UninstallDLC( Self,nAppID );
}

void bbSteamAPI_ISteamApps_RequestAppProofOfPurchaseKey( ISteamApps * Self, AppId_t nAppID ){
  SteamAPI_ISteamApps_RequestAppProofOfPurchaseKey( Self,nAppID );
}

bool bbSteamAPI_ISteamApps_GetCurrentBetaName( ISteamApps * Self, char * pchName, int cchNameBufferSize ){
  return SteamAPI_ISteamApps_GetCurrentBetaName( Self,pchName,cchNameBufferSize );
}

bool bbSteamAPI_ISteamApps_MarkContentCorrupt( ISteamApps * Self, bool bMissingFilesOnly ){
  return SteamAPI_ISteamApps_MarkContentCorrupt( Self,bMissingFilesOnly );
}

uint32 bbSteamAPI_ISteamApps_GetInstalledDepots( ISteamApps * Self, AppId_t appID, DepotId_t * pvecDepots, uint32 cMaxDepots ){
  return SteamAPI_ISteamApps_GetInstalledDepots( Self,appID,pvecDepots,cMaxDepots );
}

uint32 bbSteamAPI_ISteamApps_GetAppInstallDir( ISteamApps * Self, AppId_t appID, char * pchFolder, uint32 cchFolderBufferSize ){
  return SteamAPI_ISteamApps_GetAppInstallDir( Self,appID,pchFolder,cchFolderBufferSize );
}

bool bbSteamAPI_ISteamApps_BIsAppInstalled( ISteamApps * Self, AppId_t appID ){
  return SteamAPI_ISteamApps_BIsAppInstalled( Self,appID );
}

CSteamID bbSteamAPI_ISteamApps_GetAppOwner( ISteamApps * Self ){
  return SteamAPI_ISteamApps_GetAppOwner( Self );
}

const char * bbSteamAPI_ISteamApps_GetLaunchQueryParam( ISteamApps * Self, const char * pchKey ){
  return SteamAPI_ISteamApps_GetLaunchQueryParam( Self,pchKey );
}

bool bbSteamAPI_ISteamApps_GetDlcDownloadProgress( ISteamApps * Self, AppId_t nAppID, uint64 * punBytesDownloaded, uint64 * punBytesTotal ){
  return SteamAPI_ISteamApps_GetDlcDownloadProgress( Self,nAppID,punBytesDownloaded,punBytesTotal );
}

int bbSteamAPI_ISteamApps_GetAppBuildId( ISteamApps * Self ){
  return SteamAPI_ISteamApps_GetAppBuildId( Self );
}

void bbSteamAPI_ISteamApps_RequestAllProofOfPurchaseKeys( ISteamApps * Self ){
  SteamAPI_ISteamApps_RequestAllProofOfPurchaseKeys( Self );
}

SteamAPICall_t bbSteamAPI_ISteamApps_GetFileDetails( ISteamApps * Self, const char * pszFileName ){
  return SteamAPI_ISteamApps_GetFileDetails( Self,pszFileName );
}

int bbSteamAPI_ISteamApps_GetLaunchCommandLine( ISteamApps * Self, char * pszCommandLine, int cubCommandLine ){
  return SteamAPI_ISteamApps_GetLaunchCommandLine( Self,pszCommandLine,cubCommandLine );
}

bool bbSteamAPI_ISteamApps_BIsSubscribedFromFamilySharing( ISteamApps * Self ){
  return SteamAPI_ISteamApps_BIsSubscribedFromFamilySharing( Self );
}

bool bbSteamAPI_ISteamNetworking_SendP2PPacket( ISteamNetworking * Self, uint64_steamid steamIDRemote, const void * pubData, uint32 cubData, EP2PSend eP2PSendType, int nChannel ){
  return SteamAPI_ISteamNetworking_SendP2PPacket( Self,steamIDRemote,pubData,cubData,eP2PSendType,nChannel );
}

bool bbSteamAPI_ISteamNetworking_IsP2PPacketAvailable( ISteamNetworking * Self, uint32 * pcubMsgSize, int nChannel ){
  return SteamAPI_ISteamNetworking_IsP2PPacketAvailable( Self,pcubMsgSize,nChannel );
}

bool bbSteamAPI_ISteamNetworking_ReadP2PPacket( ISteamNetworking * Self, void * pubDest, uint32 cubDest, uint32 * pcubMsgSize, CSteamID * psteamIDRemote, int nChannel ){
  return SteamAPI_ISteamNetworking_ReadP2PPacket( Self,pubDest,cubDest,pcubMsgSize,psteamIDRemote,nChannel );
}

bool bbSteamAPI_ISteamNetworking_AcceptP2PSessionWithUser( ISteamNetworking * Self, uint64_steamid steamIDRemote ){
  return SteamAPI_ISteamNetworking_AcceptP2PSessionWithUser( Self,steamIDRemote );
}

bool bbSteamAPI_ISteamNetworking_CloseP2PSessionWithUser( ISteamNetworking * Self, uint64_steamid steamIDRemote ){
  return SteamAPI_ISteamNetworking_CloseP2PSessionWithUser( Self,steamIDRemote );
}

bool bbSteamAPI_ISteamNetworking_CloseP2PChannelWithUser( ISteamNetworking * Self, uint64_steamid steamIDRemote, int nChannel ){
  return SteamAPI_ISteamNetworking_CloseP2PChannelWithUser( Self,steamIDRemote,nChannel );
}

bool bbSteamAPI_ISteamNetworking_GetP2PSessionState( ISteamNetworking * Self, uint64_steamid steamIDRemote, P2PSessionState_t * pConnectionState ){
  return SteamAPI_ISteamNetworking_GetP2PSessionState( Self,steamIDRemote,pConnectionState );
}

bool bbSteamAPI_ISteamNetworking_AllowP2PPacketRelay( ISteamNetworking * Self, bool bAllow ){
  return SteamAPI_ISteamNetworking_AllowP2PPacketRelay( Self,bAllow );
}

SNetListenSocket_t bbSteamAPI_ISteamNetworking_CreateListenSocket( ISteamNetworking * Self, int nVirtualP2PPort, SteamIPAddress_t nIP, uint16 nPort, bool bAllowUseOfPacketRelay ){
  return SteamAPI_ISteamNetworking_CreateListenSocket( Self,nVirtualP2PPort,nIP,nPort,bAllowUseOfPacketRelay );
}

SNetSocket_t bbSteamAPI_ISteamNetworking_CreateP2PConnectionSocket( ISteamNetworking * Self, uint64_steamid steamIDTarget, int nVirtualPort, int nTimeoutSec, bool bAllowUseOfPacketRelay ){
  return SteamAPI_ISteamNetworking_CreateP2PConnectionSocket( Self,steamIDTarget,nVirtualPort,nTimeoutSec,bAllowUseOfPacketRelay );
}

SNetSocket_t bbSteamAPI_ISteamNetworking_CreateConnectionSocket( ISteamNetworking * Self, SteamIPAddress_t nIP, uint16 nPort, int nTimeoutSec ){
  return SteamAPI_ISteamNetworking_CreateConnectionSocket( Self,nIP,nPort,nTimeoutSec );
}

bool bbSteamAPI_ISteamNetworking_DestroySocket( ISteamNetworking * Self, SNetSocket_t hSocket, bool bNotifyRemoteEnd ){
  return SteamAPI_ISteamNetworking_DestroySocket( Self,hSocket,bNotifyRemoteEnd );
}

bool bbSteamAPI_ISteamNetworking_DestroyListenSocket( ISteamNetworking * Self, SNetListenSocket_t hSocket, bool bNotifyRemoteEnd ){
  return SteamAPI_ISteamNetworking_DestroyListenSocket( Self,hSocket,bNotifyRemoteEnd );
}

bool bbSteamAPI_ISteamNetworking_SendDataOnSocket( ISteamNetworking * Self, SNetSocket_t hSocket, void * pubData, uint32 cubData, bool bReliable ){
  return SteamAPI_ISteamNetworking_SendDataOnSocket( Self,hSocket,pubData,cubData,bReliable );
}

bool bbSteamAPI_ISteamNetworking_IsDataAvailableOnSocket( ISteamNetworking * Self, SNetSocket_t hSocket, uint32 * pcubMsgSize ){
  return SteamAPI_ISteamNetworking_IsDataAvailableOnSocket( Self,hSocket,pcubMsgSize );
}

bool bbSteamAPI_ISteamNetworking_RetrieveDataFromSocket( ISteamNetworking * Self, SNetSocket_t hSocket, void * pubDest, uint32 cubDest, uint32 * pcubMsgSize ){
  return SteamAPI_ISteamNetworking_RetrieveDataFromSocket( Self,hSocket,pubDest,cubDest,pcubMsgSize );
}

bool bbSteamAPI_ISteamNetworking_IsDataAvailable( ISteamNetworking * Self, SNetListenSocket_t hListenSocket, uint32 * pcubMsgSize, SNetSocket_t * phSocket ){
  return SteamAPI_ISteamNetworking_IsDataAvailable( Self,hListenSocket,pcubMsgSize,phSocket );
}

bool bbSteamAPI_ISteamNetworking_RetrieveData( ISteamNetworking * Self, SNetListenSocket_t hListenSocket, void * pubDest, uint32 cubDest, uint32 * pcubMsgSize, SNetSocket_t * phSocket ){
  return SteamAPI_ISteamNetworking_RetrieveData( Self,hListenSocket,pubDest,cubDest,pcubMsgSize,phSocket );
}

bool bbSteamAPI_ISteamNetworking_GetSocketInfo( ISteamNetworking * Self, SNetSocket_t hSocket, CSteamID * pSteamIDRemote, int * peSocketStatus, SteamIPAddress_t * punIPRemote, uint16 * punPortRemote ){
  return SteamAPI_ISteamNetworking_GetSocketInfo( Self,hSocket,pSteamIDRemote,peSocketStatus,punIPRemote,punPortRemote );
}

bool bbSteamAPI_ISteamNetworking_GetListenSocketInfo( ISteamNetworking * Self, SNetListenSocket_t hListenSocket, SteamIPAddress_t * pnIP, uint16 * pnPort ){
  return SteamAPI_ISteamNetworking_GetListenSocketInfo( Self,hListenSocket,pnIP,pnPort );
}

ESNetSocketConnectionType bbSteamAPI_ISteamNetworking_GetSocketConnectionType( ISteamNetworking * Self, SNetSocket_t hSocket ){
  return SteamAPI_ISteamNetworking_GetSocketConnectionType( Self,hSocket );
}

int bbSteamAPI_ISteamNetworking_GetMaxPacketSize( ISteamNetworking * Self, SNetSocket_t hSocket ){
  return SteamAPI_ISteamNetworking_GetMaxPacketSize( Self,hSocket );
}

ScreenshotHandle bbSteamAPI_ISteamScreenshots_WriteScreenshot( ISteamScreenshots * Self, void * pubRGB, uint32 cubRGB, int nWidth, int nHeight ){
  return SteamAPI_ISteamScreenshots_WriteScreenshot( Self,pubRGB,cubRGB,nWidth,nHeight );
}

ScreenshotHandle bbSteamAPI_ISteamScreenshots_AddScreenshotToLibrary( ISteamScreenshots * Self, const char * pchFilename, const char * pchThumbnailFilename, int nWidth, int nHeight ){
  return SteamAPI_ISteamScreenshots_AddScreenshotToLibrary( Self,pchFilename,pchThumbnailFilename,nWidth,nHeight );
}

void bbSteamAPI_ISteamScreenshots_TriggerScreenshot( ISteamScreenshots * Self ){
  SteamAPI_ISteamScreenshots_TriggerScreenshot( Self );
}

void bbSteamAPI_ISteamScreenshots_HookScreenshots( ISteamScreenshots * Self, bool bHook ){
  SteamAPI_ISteamScreenshots_HookScreenshots( Self,bHook );
}

bool bbSteamAPI_ISteamScreenshots_SetLocation( ISteamScreenshots * Self, ScreenshotHandle hScreenshot, const char * pchLocation ){
  return SteamAPI_ISteamScreenshots_SetLocation( Self,hScreenshot,pchLocation );
}

bool bbSteamAPI_ISteamScreenshots_TagUser( ISteamScreenshots * Self, ScreenshotHandle hScreenshot, uint64_steamid steamID ){
  return SteamAPI_ISteamScreenshots_TagUser( Self,hScreenshot,steamID );
}

bool bbSteamAPI_ISteamScreenshots_TagPublishedFile( ISteamScreenshots * Self, ScreenshotHandle hScreenshot, PublishedFileId_t unPublishedFileID ){
  return SteamAPI_ISteamScreenshots_TagPublishedFile( Self,hScreenshot,unPublishedFileID );
}

bool bbSteamAPI_ISteamScreenshots_IsScreenshotsHooked( ISteamScreenshots * Self ){
  return SteamAPI_ISteamScreenshots_IsScreenshotsHooked( Self );
}

ScreenshotHandle bbSteamAPI_ISteamScreenshots_AddVRScreenshotToLibrary( ISteamScreenshots * Self, EVRScreenshotType eType, const char * pchFilename, const char * pchVRFilename ){
  return SteamAPI_ISteamScreenshots_AddVRScreenshotToLibrary( Self,eType,pchFilename,pchVRFilename );
}

bool bbSteamAPI_ISteamMusic_BIsEnabled( ISteamMusic * Self ){
  return SteamAPI_ISteamMusic_BIsEnabled( Self );
}

bool bbSteamAPI_ISteamMusic_BIsPlaying( ISteamMusic * Self ){
  return SteamAPI_ISteamMusic_BIsPlaying( Self );
}

AudioPlayback_Status bbSteamAPI_ISteamMusic_GetPlaybackStatus( ISteamMusic * Self ){
  return SteamAPI_ISteamMusic_GetPlaybackStatus( Self );
}

void bbSteamAPI_ISteamMusic_Play( ISteamMusic * Self ){
  SteamAPI_ISteamMusic_Play( Self );
}

void bbSteamAPI_ISteamMusic_Pause( ISteamMusic * Self ){
  SteamAPI_ISteamMusic_Pause( Self );
}

void bbSteamAPI_ISteamMusic_PlayPrevious( ISteamMusic * Self ){
  SteamAPI_ISteamMusic_PlayPrevious( Self );
}

void bbSteamAPI_ISteamMusic_PlayNext( ISteamMusic * Self ){
  SteamAPI_ISteamMusic_PlayNext( Self );
}

void bbSteamAPI_ISteamMusic_SetVolume( ISteamMusic * Self, float flVolume ){
  SteamAPI_ISteamMusic_SetVolume( Self,flVolume );
}

float bbSteamAPI_ISteamMusic_GetVolume( ISteamMusic * Self ){
  return SteamAPI_ISteamMusic_GetVolume( Self );
}

bool bbSteamAPI_ISteamMusicRemote_RegisterSteamMusicRemote( ISteamMusicRemote * Self, const char * pchName ){
  return SteamAPI_ISteamMusicRemote_RegisterSteamMusicRemote( Self,pchName );
}

bool bbSteamAPI_ISteamMusicRemote_DeregisterSteamMusicRemote( ISteamMusicRemote * Self ){
  return SteamAPI_ISteamMusicRemote_DeregisterSteamMusicRemote( Self );
}

bool bbSteamAPI_ISteamMusicRemote_BIsCurrentMusicRemote( ISteamMusicRemote * Self ){
  return SteamAPI_ISteamMusicRemote_BIsCurrentMusicRemote( Self );
}

bool bbSteamAPI_ISteamMusicRemote_BActivationSuccess( ISteamMusicRemote * Self, bool bValue ){
  return SteamAPI_ISteamMusicRemote_BActivationSuccess( Self,bValue );
}

bool bbSteamAPI_ISteamMusicRemote_SetDisplayName( ISteamMusicRemote * Self, const char * pchDisplayName ){
  return SteamAPI_ISteamMusicRemote_SetDisplayName( Self,pchDisplayName );
}

bool bbSteamAPI_ISteamMusicRemote_SetPNGIcon_64x64( ISteamMusicRemote * Self, void * pvBuffer, uint32 cbBufferLength ){
  return SteamAPI_ISteamMusicRemote_SetPNGIcon_64x64( Self,pvBuffer,cbBufferLength );
}

bool bbSteamAPI_ISteamMusicRemote_EnablePlayPrevious( ISteamMusicRemote * Self, bool bValue ){
  return SteamAPI_ISteamMusicRemote_EnablePlayPrevious( Self,bValue );
}

bool bbSteamAPI_ISteamMusicRemote_EnablePlayNext( ISteamMusicRemote * Self, bool bValue ){
  return SteamAPI_ISteamMusicRemote_EnablePlayNext( Self,bValue );
}

bool bbSteamAPI_ISteamMusicRemote_EnableShuffled( ISteamMusicRemote * Self, bool bValue ){
  return SteamAPI_ISteamMusicRemote_EnableShuffled( Self,bValue );
}

bool bbSteamAPI_ISteamMusicRemote_EnableLooped( ISteamMusicRemote * Self, bool bValue ){
  return SteamAPI_ISteamMusicRemote_EnableLooped( Self,bValue );
}

bool bbSteamAPI_ISteamMusicRemote_EnableQueue( ISteamMusicRemote * Self, bool bValue ){
  return SteamAPI_ISteamMusicRemote_EnableQueue( Self,bValue );
}

bool bbSteamAPI_ISteamMusicRemote_EnablePlaylists( ISteamMusicRemote * Self, bool bValue ){
  return SteamAPI_ISteamMusicRemote_EnablePlaylists( Self,bValue );
}

bool bbSteamAPI_ISteamMusicRemote_UpdatePlaybackStatus( ISteamMusicRemote * Self, AudioPlayback_Status nStatus ){
  return SteamAPI_ISteamMusicRemote_UpdatePlaybackStatus( Self,nStatus );
}

bool bbSteamAPI_ISteamMusicRemote_UpdateShuffled( ISteamMusicRemote * Self, bool bValue ){
  return SteamAPI_ISteamMusicRemote_UpdateShuffled( Self,bValue );
}

bool bbSteamAPI_ISteamMusicRemote_UpdateLooped( ISteamMusicRemote * Self, bool bValue ){
  return SteamAPI_ISteamMusicRemote_UpdateLooped( Self,bValue );
}

bool bbSteamAPI_ISteamMusicRemote_UpdateVolume( ISteamMusicRemote * Self, float flValue ){
  return SteamAPI_ISteamMusicRemote_UpdateVolume( Self,flValue );
}

bool bbSteamAPI_ISteamMusicRemote_CurrentEntryWillChange( ISteamMusicRemote * Self ){
  return SteamAPI_ISteamMusicRemote_CurrentEntryWillChange( Self );
}

bool bbSteamAPI_ISteamMusicRemote_CurrentEntryIsAvailable( ISteamMusicRemote * Self, bool bAvailable ){
  return SteamAPI_ISteamMusicRemote_CurrentEntryIsAvailable( Self,bAvailable );
}

bool bbSteamAPI_ISteamMusicRemote_UpdateCurrentEntryText( ISteamMusicRemote * Self, const char * pchText ){
  return SteamAPI_ISteamMusicRemote_UpdateCurrentEntryText( Self,pchText );
}

bool bbSteamAPI_ISteamMusicRemote_UpdateCurrentEntryElapsedSeconds( ISteamMusicRemote * Self, int nValue ){
  return SteamAPI_ISteamMusicRemote_UpdateCurrentEntryElapsedSeconds( Self,nValue );
}

bool bbSteamAPI_ISteamMusicRemote_UpdateCurrentEntryCoverArt( ISteamMusicRemote * Self, void * pvBuffer, uint32 cbBufferLength ){
  return SteamAPI_ISteamMusicRemote_UpdateCurrentEntryCoverArt( Self,pvBuffer,cbBufferLength );
}

bool bbSteamAPI_ISteamMusicRemote_CurrentEntryDidChange( ISteamMusicRemote * Self ){
  return SteamAPI_ISteamMusicRemote_CurrentEntryDidChange( Self );
}

bool bbSteamAPI_ISteamMusicRemote_QueueWillChange( ISteamMusicRemote * Self ){
  return SteamAPI_ISteamMusicRemote_QueueWillChange( Self );
}

bool bbSteamAPI_ISteamMusicRemote_ResetQueueEntries( ISteamMusicRemote * Self ){
  return SteamAPI_ISteamMusicRemote_ResetQueueEntries( Self );
}

bool bbSteamAPI_ISteamMusicRemote_SetQueueEntry( ISteamMusicRemote * Self, int nID, int nPosition, const char * pchEntryText ){
  return SteamAPI_ISteamMusicRemote_SetQueueEntry( Self,nID,nPosition,pchEntryText );
}

bool bbSteamAPI_ISteamMusicRemote_SetCurrentQueueEntry( ISteamMusicRemote * Self, int nID ){
  return SteamAPI_ISteamMusicRemote_SetCurrentQueueEntry( Self,nID );
}

bool bbSteamAPI_ISteamMusicRemote_QueueDidChange( ISteamMusicRemote * Self ){
  return SteamAPI_ISteamMusicRemote_QueueDidChange( Self );
}

bool bbSteamAPI_ISteamMusicRemote_PlaylistWillChange( ISteamMusicRemote * Self ){
  return SteamAPI_ISteamMusicRemote_PlaylistWillChange( Self );
}

bool bbSteamAPI_ISteamMusicRemote_ResetPlaylistEntries( ISteamMusicRemote * Self ){
  return SteamAPI_ISteamMusicRemote_ResetPlaylistEntries( Self );
}

bool bbSteamAPI_ISteamMusicRemote_SetPlaylistEntry( ISteamMusicRemote * Self, int nID, int nPosition, const char * pchEntryText ){
  return SteamAPI_ISteamMusicRemote_SetPlaylistEntry( Self,nID,nPosition,pchEntryText );
}

bool bbSteamAPI_ISteamMusicRemote_SetCurrentPlaylistEntry( ISteamMusicRemote * Self, int nID ){
  return SteamAPI_ISteamMusicRemote_SetCurrentPlaylistEntry( Self,nID );
}

bool bbSteamAPI_ISteamMusicRemote_PlaylistDidChange( ISteamMusicRemote * Self ){
  return SteamAPI_ISteamMusicRemote_PlaylistDidChange( Self );
}

HTTPRequestHandle bbSteamAPI_ISteamHTTP_CreateHTTPRequest( ISteamHTTP * Self, EHTTPMethod eHTTPRequestMethod, const char * pchAbsoluteURL ){
  return SteamAPI_ISteamHTTP_CreateHTTPRequest( Self,eHTTPRequestMethod,pchAbsoluteURL );
}

bool bbSteamAPI_ISteamHTTP_SetHTTPRequestContextValue( ISteamHTTP * Self, HTTPRequestHandle hRequest, uint64 ulContextValue ){
  return SteamAPI_ISteamHTTP_SetHTTPRequestContextValue( Self,hRequest,ulContextValue );
}

bool bbSteamAPI_ISteamHTTP_SetHTTPRequestNetworkActivityTimeout( ISteamHTTP * Self, HTTPRequestHandle hRequest, uint32 unTimeoutSeconds ){
  return SteamAPI_ISteamHTTP_SetHTTPRequestNetworkActivityTimeout( Self,hRequest,unTimeoutSeconds );
}

bool bbSteamAPI_ISteamHTTP_SetHTTPRequestHeaderValue( ISteamHTTP * Self, HTTPRequestHandle hRequest, const char * pchHeaderName, const char * pchHeaderValue ){
  return SteamAPI_ISteamHTTP_SetHTTPRequestHeaderValue( Self,hRequest,pchHeaderName,pchHeaderValue );
}

bool bbSteamAPI_ISteamHTTP_SetHTTPRequestGetOrPostParameter( ISteamHTTP * Self, HTTPRequestHandle hRequest, const char * pchParamName, const char * pchParamValue ){
  return SteamAPI_ISteamHTTP_SetHTTPRequestGetOrPostParameter( Self,hRequest,pchParamName,pchParamValue );
}

bool bbSteamAPI_ISteamHTTP_SendHTTPRequest( ISteamHTTP * Self, HTTPRequestHandle hRequest, SteamAPICall_t * pCallHandle ){
  return SteamAPI_ISteamHTTP_SendHTTPRequest( Self,hRequest,pCallHandle );
}

bool bbSteamAPI_ISteamHTTP_SendHTTPRequestAndStreamResponse( ISteamHTTP * Self, HTTPRequestHandle hRequest, SteamAPICall_t * pCallHandle ){
  return SteamAPI_ISteamHTTP_SendHTTPRequestAndStreamResponse( Self,hRequest,pCallHandle );
}

bool bbSteamAPI_ISteamHTTP_DeferHTTPRequest( ISteamHTTP * Self, HTTPRequestHandle hRequest ){
  return SteamAPI_ISteamHTTP_DeferHTTPRequest( Self,hRequest );
}

bool bbSteamAPI_ISteamHTTP_PrioritizeHTTPRequest( ISteamHTTP * Self, HTTPRequestHandle hRequest ){
  return SteamAPI_ISteamHTTP_PrioritizeHTTPRequest( Self,hRequest );
}

bool bbSteamAPI_ISteamHTTP_GetHTTPResponseHeaderSize( ISteamHTTP * Self, HTTPRequestHandle hRequest, const char * pchHeaderName, uint32 * unResponseHeaderSize ){
  return SteamAPI_ISteamHTTP_GetHTTPResponseHeaderSize( Self,hRequest,pchHeaderName,unResponseHeaderSize );
}

bool bbSteamAPI_ISteamHTTP_GetHTTPResponseHeaderValue( ISteamHTTP * Self, HTTPRequestHandle hRequest, const char * pchHeaderName, uint8 * pHeaderValueBuffer, uint32 unBufferSize ){
  return SteamAPI_ISteamHTTP_GetHTTPResponseHeaderValue( Self,hRequest,pchHeaderName,pHeaderValueBuffer,unBufferSize );
}

bool bbSteamAPI_ISteamHTTP_GetHTTPResponseBodySize( ISteamHTTP * Self, HTTPRequestHandle hRequest, uint32 * unBodySize ){
  return SteamAPI_ISteamHTTP_GetHTTPResponseBodySize( Self,hRequest,unBodySize );
}

bool bbSteamAPI_ISteamHTTP_GetHTTPResponseBodyData( ISteamHTTP * Self, HTTPRequestHandle hRequest, uint8 * pBodyDataBuffer, uint32 unBufferSize ){
  return SteamAPI_ISteamHTTP_GetHTTPResponseBodyData( Self,hRequest,pBodyDataBuffer,unBufferSize );
}

bool bbSteamAPI_ISteamHTTP_GetHTTPStreamingResponseBodyData( ISteamHTTP * Self, HTTPRequestHandle hRequest, uint32 cOffset, uint8 * pBodyDataBuffer, uint32 unBufferSize ){
  return SteamAPI_ISteamHTTP_GetHTTPStreamingResponseBodyData( Self,hRequest,cOffset,pBodyDataBuffer,unBufferSize );
}

bool bbSteamAPI_ISteamHTTP_ReleaseHTTPRequest( ISteamHTTP * Self, HTTPRequestHandle hRequest ){
  return SteamAPI_ISteamHTTP_ReleaseHTTPRequest( Self,hRequest );
}

bool bbSteamAPI_ISteamHTTP_GetHTTPDownloadProgressPct( ISteamHTTP * Self, HTTPRequestHandle hRequest, float * pflPercentOut ){
  return SteamAPI_ISteamHTTP_GetHTTPDownloadProgressPct( Self,hRequest,pflPercentOut );
}

bool bbSteamAPI_ISteamHTTP_SetHTTPRequestRawPostBody( ISteamHTTP * Self, HTTPRequestHandle hRequest, const char * pchContentType, uint8 * pubBody, uint32 unBodyLen ){
  return SteamAPI_ISteamHTTP_SetHTTPRequestRawPostBody( Self,hRequest,pchContentType,pubBody,unBodyLen );
}

HTTPCookieContainerHandle bbSteamAPI_ISteamHTTP_CreateCookieContainer( ISteamHTTP * Self, bool bAllowResponsesToModify ){
  return SteamAPI_ISteamHTTP_CreateCookieContainer( Self,bAllowResponsesToModify );
}

bool bbSteamAPI_ISteamHTTP_ReleaseCookieContainer( ISteamHTTP * Self, HTTPCookieContainerHandle hCookieContainer ){
  return SteamAPI_ISteamHTTP_ReleaseCookieContainer( Self,hCookieContainer );
}

bool bbSteamAPI_ISteamHTTP_SetCookie( ISteamHTTP * Self, HTTPCookieContainerHandle hCookieContainer, const char * pchHost, const char * pchUrl, const char * pchCookie ){
  return SteamAPI_ISteamHTTP_SetCookie( Self,hCookieContainer,pchHost,pchUrl,pchCookie );
}

bool bbSteamAPI_ISteamHTTP_SetHTTPRequestCookieContainer( ISteamHTTP * Self, HTTPRequestHandle hRequest, HTTPCookieContainerHandle hCookieContainer ){
  return SteamAPI_ISteamHTTP_SetHTTPRequestCookieContainer( Self,hRequest,hCookieContainer );
}

bool bbSteamAPI_ISteamHTTP_SetHTTPRequestUserAgentInfo( ISteamHTTP * Self, HTTPRequestHandle hRequest, const char * pchUserAgentInfo ){
  return SteamAPI_ISteamHTTP_SetHTTPRequestUserAgentInfo( Self,hRequest,pchUserAgentInfo );
}

bool bbSteamAPI_ISteamHTTP_SetHTTPRequestRequiresVerifiedCertificate( ISteamHTTP * Self, HTTPRequestHandle hRequest, bool bRequireVerifiedCertificate ){
  return SteamAPI_ISteamHTTP_SetHTTPRequestRequiresVerifiedCertificate( Self,hRequest,bRequireVerifiedCertificate );
}

bool bbSteamAPI_ISteamHTTP_SetHTTPRequestAbsoluteTimeoutMS( ISteamHTTP * Self, HTTPRequestHandle hRequest, uint32 unMilliseconds ){
  return SteamAPI_ISteamHTTP_SetHTTPRequestAbsoluteTimeoutMS( Self,hRequest,unMilliseconds );
}

bool bbSteamAPI_ISteamHTTP_GetHTTPRequestWasTimedOut( ISteamHTTP * Self, HTTPRequestHandle hRequest, bool * pbWasTimedOut ){
  return SteamAPI_ISteamHTTP_GetHTTPRequestWasTimedOut( Self,hRequest,pbWasTimedOut );
}

bool bbSteamAPI_ISteamInput_Init( ISteamInput * Self ){
  return SteamAPI_ISteamInput_Init( Self );
}

bool bbSteamAPI_ISteamInput_Shutdown( ISteamInput * Self ){
  return SteamAPI_ISteamInput_Shutdown( Self );
}

void bbSteamAPI_ISteamInput_RunFrame( ISteamInput * Self ){
  SteamAPI_ISteamInput_RunFrame( Self );
}

int bbSteamAPI_ISteamInput_GetConnectedControllers( ISteamInput * Self, InputHandle_t * handlesOut ){
  return SteamAPI_ISteamInput_GetConnectedControllers( Self,handlesOut );
}

InputActionSetHandle_t bbSteamAPI_ISteamInput_GetActionSetHandle( ISteamInput * Self, const char * pszActionSetName ){
  return SteamAPI_ISteamInput_GetActionSetHandle( Self,pszActionSetName );
}

void bbSteamAPI_ISteamInput_ActivateActionSet( ISteamInput * Self, InputHandle_t inputHandle, InputActionSetHandle_t actionSetHandle ){
  SteamAPI_ISteamInput_ActivateActionSet( Self,inputHandle,actionSetHandle );
}

InputActionSetHandle_t bbSteamAPI_ISteamInput_GetCurrentActionSet( ISteamInput * Self, InputHandle_t inputHandle ){
  return SteamAPI_ISteamInput_GetCurrentActionSet( Self,inputHandle );
}

void bbSteamAPI_ISteamInput_ActivateActionSetLayer( ISteamInput * Self, InputHandle_t inputHandle, InputActionSetHandle_t actionSetLayerHandle ){
  SteamAPI_ISteamInput_ActivateActionSetLayer( Self,inputHandle,actionSetLayerHandle );
}

void bbSteamAPI_ISteamInput_DeactivateActionSetLayer( ISteamInput * Self, InputHandle_t inputHandle, InputActionSetHandle_t actionSetLayerHandle ){
  SteamAPI_ISteamInput_DeactivateActionSetLayer( Self,inputHandle,actionSetLayerHandle );
}

void bbSteamAPI_ISteamInput_DeactivateAllActionSetLayers( ISteamInput * Self, InputHandle_t inputHandle ){
  SteamAPI_ISteamInput_DeactivateAllActionSetLayers( Self,inputHandle );
}

int bbSteamAPI_ISteamInput_GetActiveActionSetLayers( ISteamInput * Self, InputHandle_t inputHandle, InputActionSetHandle_t * handlesOut ){
  return SteamAPI_ISteamInput_GetActiveActionSetLayers( Self,inputHandle,handlesOut );
}

InputDigitalActionHandle_t bbSteamAPI_ISteamInput_GetDigitalActionHandle( ISteamInput * Self, const char * pszActionName ){
  return SteamAPI_ISteamInput_GetDigitalActionHandle( Self,pszActionName );
}

InputDigitalActionData_t bbSteamAPI_ISteamInput_GetDigitalActionData( ISteamInput * Self, InputHandle_t inputHandle, InputDigitalActionHandle_t digitalActionHandle ){
  return SteamAPI_ISteamInput_GetDigitalActionData( Self,inputHandle,digitalActionHandle );
}

int bbSteamAPI_ISteamInput_GetDigitalActionOrigins( ISteamInput * Self, InputHandle_t inputHandle, InputActionSetHandle_t actionSetHandle, InputDigitalActionHandle_t digitalActionHandle, EInputActionOrigin * originsOut ){
  return SteamAPI_ISteamInput_GetDigitalActionOrigins( Self,inputHandle,actionSetHandle,digitalActionHandle,originsOut );
}

InputAnalogActionHandle_t bbSteamAPI_ISteamInput_GetAnalogActionHandle( ISteamInput * Self, const char * pszActionName ){
  return SteamAPI_ISteamInput_GetAnalogActionHandle( Self,pszActionName );
}

InputAnalogActionData_t bbSteamAPI_ISteamInput_GetAnalogActionData( ISteamInput * Self, InputHandle_t inputHandle, InputAnalogActionHandle_t analogActionHandle ){
  return SteamAPI_ISteamInput_GetAnalogActionData( Self,inputHandle,analogActionHandle );
}

int bbSteamAPI_ISteamInput_GetAnalogActionOrigins( ISteamInput * Self, InputHandle_t inputHandle, InputActionSetHandle_t actionSetHandle, InputAnalogActionHandle_t analogActionHandle, EInputActionOrigin * originsOut ){
  return SteamAPI_ISteamInput_GetAnalogActionOrigins( Self,inputHandle,actionSetHandle,analogActionHandle,originsOut );
}

const char * bbSteamAPI_ISteamInput_GetGlyphForActionOrigin( ISteamInput * Self, EInputActionOrigin eOrigin ){
  return SteamAPI_ISteamInput_GetGlyphForActionOrigin( Self,eOrigin );
}

const char * bbSteamAPI_ISteamInput_GetStringForActionOrigin( ISteamInput * Self, EInputActionOrigin eOrigin ){
  return SteamAPI_ISteamInput_GetStringForActionOrigin( Self,eOrigin );
}

void bbSteamAPI_ISteamInput_StopAnalogActionMomentum( ISteamInput * Self, InputHandle_t inputHandle, InputAnalogActionHandle_t eAction ){
  SteamAPI_ISteamInput_StopAnalogActionMomentum( Self,inputHandle,eAction );
}

InputMotionData_t bbSteamAPI_ISteamInput_GetMotionData( ISteamInput * Self, InputHandle_t inputHandle ){
  return SteamAPI_ISteamInput_GetMotionData( Self,inputHandle );
}

void bbSteamAPI_ISteamInput_TriggerVibration( ISteamInput * Self, InputHandle_t inputHandle, unsigned short usLeftSpeed, unsigned short usRightSpeed ){
  SteamAPI_ISteamInput_TriggerVibration( Self,inputHandle,usLeftSpeed,usRightSpeed );
}

void bbSteamAPI_ISteamInput_SetLEDColor( ISteamInput * Self, InputHandle_t inputHandle, uint8 nColorR, uint8 nColorG, uint8 nColorB, unsigned int nFlags ){
  SteamAPI_ISteamInput_SetLEDColor( Self,inputHandle,nColorR,nColorG,nColorB,nFlags );
}

void bbSteamAPI_ISteamInput_TriggerHapticPulse( ISteamInput * Self, InputHandle_t inputHandle, ESteamControllerPad eTargetPad, unsigned short usDurationMicroSec ){
  SteamAPI_ISteamInput_TriggerHapticPulse( Self,inputHandle,eTargetPad,usDurationMicroSec );
}

void bbSteamAPI_ISteamInput_TriggerRepeatedHapticPulse( ISteamInput * Self, InputHandle_t inputHandle, ESteamControllerPad eTargetPad, unsigned short usDurationMicroSec, unsigned short usOffMicroSec, unsigned short unRepeat, unsigned int nFlags ){
  SteamAPI_ISteamInput_TriggerRepeatedHapticPulse( Self,inputHandle,eTargetPad,usDurationMicroSec,usOffMicroSec,unRepeat,nFlags );
}

bool bbSteamAPI_ISteamInput_ShowBindingPanel( ISteamInput * Self, InputHandle_t inputHandle ){
  return SteamAPI_ISteamInput_ShowBindingPanel( Self,inputHandle );
}

ESteamInputType bbSteamAPI_ISteamInput_GetInputTypeForHandle( ISteamInput * Self, InputHandle_t inputHandle ){
  return SteamAPI_ISteamInput_GetInputTypeForHandle( Self,inputHandle );
}

InputHandle_t bbSteamAPI_ISteamInput_GetControllerForGamepadIndex( ISteamInput * Self, int nIndex ){
  return SteamAPI_ISteamInput_GetControllerForGamepadIndex( Self,nIndex );
}

int bbSteamAPI_ISteamInput_GetGamepadIndexForController( ISteamInput * Self, InputHandle_t ulinputHandle ){
  return SteamAPI_ISteamInput_GetGamepadIndexForController( Self,ulinputHandle );
}

const char * bbSteamAPI_ISteamInput_GetStringForXboxOrigin( ISteamInput * Self, EXboxOrigin eOrigin ){
  return SteamAPI_ISteamInput_GetStringForXboxOrigin( Self,eOrigin );
}

const char * bbSteamAPI_ISteamInput_GetGlyphForXboxOrigin( ISteamInput * Self, EXboxOrigin eOrigin ){
  return SteamAPI_ISteamInput_GetGlyphForXboxOrigin( Self,eOrigin );
}

EInputActionOrigin bbSteamAPI_ISteamInput_GetActionOriginFromXboxOrigin( ISteamInput * Self, InputHandle_t inputHandle, EXboxOrigin eOrigin ){
  return SteamAPI_ISteamInput_GetActionOriginFromXboxOrigin( Self,inputHandle,eOrigin );
}

EInputActionOrigin bbSteamAPI_ISteamInput_TranslateActionOrigin( ISteamInput * Self, ESteamInputType eDestinationInputType, EInputActionOrigin eSourceOrigin ){
  return SteamAPI_ISteamInput_TranslateActionOrigin( Self,eDestinationInputType,eSourceOrigin );
}

bool bbSteamAPI_ISteamInput_GetDeviceBindingRevision( ISteamInput * Self, InputHandle_t inputHandle, int * pMajor, int * pMinor ){
  return SteamAPI_ISteamInput_GetDeviceBindingRevision( Self,inputHandle,pMajor,pMinor );
}

uint32 bbSteamAPI_ISteamInput_GetRemotePlaySessionID( ISteamInput * Self, InputHandle_t inputHandle ){
  return SteamAPI_ISteamInput_GetRemotePlaySessionID( Self,inputHandle );
}

bool bbSteamAPI_ISteamController_Init( ISteamController * Self ){
  return SteamAPI_ISteamController_Init( Self );
}

bool bbSteamAPI_ISteamController_Shutdown( ISteamController * Self ){
  return SteamAPI_ISteamController_Shutdown( Self );
}

void bbSteamAPI_ISteamController_RunFrame( ISteamController * Self ){
  SteamAPI_ISteamController_RunFrame( Self );
}

int bbSteamAPI_ISteamController_GetConnectedControllers( ISteamController * Self, ControllerHandle_t * handlesOut ){
  return SteamAPI_ISteamController_GetConnectedControllers( Self,handlesOut );
}

ControllerActionSetHandle_t bbSteamAPI_ISteamController_GetActionSetHandle( ISteamController * Self, const char * pszActionSetName ){
  return SteamAPI_ISteamController_GetActionSetHandle( Self,pszActionSetName );
}

void bbSteamAPI_ISteamController_ActivateActionSet( ISteamController * Self, ControllerHandle_t controllerHandle, ControllerActionSetHandle_t actionSetHandle ){
  SteamAPI_ISteamController_ActivateActionSet( Self,controllerHandle,actionSetHandle );
}

ControllerActionSetHandle_t bbSteamAPI_ISteamController_GetCurrentActionSet( ISteamController * Self, ControllerHandle_t controllerHandle ){
  return SteamAPI_ISteamController_GetCurrentActionSet( Self,controllerHandle );
}

void bbSteamAPI_ISteamController_ActivateActionSetLayer( ISteamController * Self, ControllerHandle_t controllerHandle, ControllerActionSetHandle_t actionSetLayerHandle ){
  SteamAPI_ISteamController_ActivateActionSetLayer( Self,controllerHandle,actionSetLayerHandle );
}

void bbSteamAPI_ISteamController_DeactivateActionSetLayer( ISteamController * Self, ControllerHandle_t controllerHandle, ControllerActionSetHandle_t actionSetLayerHandle ){
  SteamAPI_ISteamController_DeactivateActionSetLayer( Self,controllerHandle,actionSetLayerHandle );
}

void bbSteamAPI_ISteamController_DeactivateAllActionSetLayers( ISteamController * Self, ControllerHandle_t controllerHandle ){
  SteamAPI_ISteamController_DeactivateAllActionSetLayers( Self,controllerHandle );
}

int bbSteamAPI_ISteamController_GetActiveActionSetLayers( ISteamController * Self, ControllerHandle_t controllerHandle, ControllerActionSetHandle_t * handlesOut ){
  return SteamAPI_ISteamController_GetActiveActionSetLayers( Self,controllerHandle,handlesOut );
}

ControllerDigitalActionHandle_t bbSteamAPI_ISteamController_GetDigitalActionHandle( ISteamController * Self, const char * pszActionName ){
  return SteamAPI_ISteamController_GetDigitalActionHandle( Self,pszActionName );
}

InputDigitalActionData_t bbSteamAPI_ISteamController_GetDigitalActionData( ISteamController * Self, ControllerHandle_t controllerHandle, ControllerDigitalActionHandle_t digitalActionHandle ){
  return SteamAPI_ISteamController_GetDigitalActionData( Self,controllerHandle,digitalActionHandle );
}

int bbSteamAPI_ISteamController_GetDigitalActionOrigins( ISteamController * Self, ControllerHandle_t controllerHandle, ControllerActionSetHandle_t actionSetHandle, ControllerDigitalActionHandle_t digitalActionHandle, EControllerActionOrigin * originsOut ){
  return SteamAPI_ISteamController_GetDigitalActionOrigins( Self,controllerHandle,actionSetHandle,digitalActionHandle,originsOut );
}

ControllerAnalogActionHandle_t bbSteamAPI_ISteamController_GetAnalogActionHandle( ISteamController * Self, const char * pszActionName ){
  return SteamAPI_ISteamController_GetAnalogActionHandle( Self,pszActionName );
}

InputAnalogActionData_t bbSteamAPI_ISteamController_GetAnalogActionData( ISteamController * Self, ControllerHandle_t controllerHandle, ControllerAnalogActionHandle_t analogActionHandle ){
  return SteamAPI_ISteamController_GetAnalogActionData( Self,controllerHandle,analogActionHandle );
}

int bbSteamAPI_ISteamController_GetAnalogActionOrigins( ISteamController * Self, ControllerHandle_t controllerHandle, ControllerActionSetHandle_t actionSetHandle, ControllerAnalogActionHandle_t analogActionHandle, EControllerActionOrigin * originsOut ){
  return SteamAPI_ISteamController_GetAnalogActionOrigins( Self,controllerHandle,actionSetHandle,analogActionHandle,originsOut );
}

const char * bbSteamAPI_ISteamController_GetGlyphForActionOrigin( ISteamController * Self, EControllerActionOrigin eOrigin ){
  return SteamAPI_ISteamController_GetGlyphForActionOrigin( Self,eOrigin );
}

const char * bbSteamAPI_ISteamController_GetStringForActionOrigin( ISteamController * Self, EControllerActionOrigin eOrigin ){
  return SteamAPI_ISteamController_GetStringForActionOrigin( Self,eOrigin );
}

void bbSteamAPI_ISteamController_StopAnalogActionMomentum( ISteamController * Self, ControllerHandle_t controllerHandle, ControllerAnalogActionHandle_t eAction ){
  SteamAPI_ISteamController_StopAnalogActionMomentum( Self,controllerHandle,eAction );
}

InputMotionData_t bbSteamAPI_ISteamController_GetMotionData( ISteamController * Self, ControllerHandle_t controllerHandle ){
  return SteamAPI_ISteamController_GetMotionData( Self,controllerHandle );
}

void bbSteamAPI_ISteamController_TriggerHapticPulse( ISteamController * Self, ControllerHandle_t controllerHandle, ESteamControllerPad eTargetPad, unsigned short usDurationMicroSec ){
  SteamAPI_ISteamController_TriggerHapticPulse( Self,controllerHandle,eTargetPad,usDurationMicroSec );
}

void bbSteamAPI_ISteamController_TriggerRepeatedHapticPulse( ISteamController * Self, ControllerHandle_t controllerHandle, ESteamControllerPad eTargetPad, unsigned short usDurationMicroSec, unsigned short usOffMicroSec, unsigned short unRepeat, unsigned int nFlags ){
  SteamAPI_ISteamController_TriggerRepeatedHapticPulse( Self,controllerHandle,eTargetPad,usDurationMicroSec,usOffMicroSec,unRepeat,nFlags );
}

void bbSteamAPI_ISteamController_TriggerVibration( ISteamController * Self, ControllerHandle_t controllerHandle, unsigned short usLeftSpeed, unsigned short usRightSpeed ){
  SteamAPI_ISteamController_TriggerVibration( Self,controllerHandle,usLeftSpeed,usRightSpeed );
}

void bbSteamAPI_ISteamController_SetLEDColor( ISteamController * Self, ControllerHandle_t controllerHandle, uint8 nColorR, uint8 nColorG, uint8 nColorB, unsigned int nFlags ){
  SteamAPI_ISteamController_SetLEDColor( Self,controllerHandle,nColorR,nColorG,nColorB,nFlags );
}

bool bbSteamAPI_ISteamController_ShowBindingPanel( ISteamController * Self, ControllerHandle_t controllerHandle ){
  return SteamAPI_ISteamController_ShowBindingPanel( Self,controllerHandle );
}

ESteamInputType bbSteamAPI_ISteamController_GetInputTypeForHandle( ISteamController * Self, ControllerHandle_t controllerHandle ){
  return SteamAPI_ISteamController_GetInputTypeForHandle( Self,controllerHandle );
}

ControllerHandle_t bbSteamAPI_ISteamController_GetControllerForGamepadIndex( ISteamController * Self, int nIndex ){
  return SteamAPI_ISteamController_GetControllerForGamepadIndex( Self,nIndex );
}

int bbSteamAPI_ISteamController_GetGamepadIndexForController( ISteamController * Self, ControllerHandle_t ulControllerHandle ){
  return SteamAPI_ISteamController_GetGamepadIndexForController( Self,ulControllerHandle );
}

const char * bbSteamAPI_ISteamController_GetStringForXboxOrigin( ISteamController * Self, EXboxOrigin eOrigin ){
  return SteamAPI_ISteamController_GetStringForXboxOrigin( Self,eOrigin );
}

const char * bbSteamAPI_ISteamController_GetGlyphForXboxOrigin( ISteamController * Self, EXboxOrigin eOrigin ){
  return SteamAPI_ISteamController_GetGlyphForXboxOrigin( Self,eOrigin );
}

EControllerActionOrigin bbSteamAPI_ISteamController_GetActionOriginFromXboxOrigin( ISteamController * Self, ControllerHandle_t controllerHandle, EXboxOrigin eOrigin ){
  return SteamAPI_ISteamController_GetActionOriginFromXboxOrigin( Self,controllerHandle,eOrigin );
}

EControllerActionOrigin bbSteamAPI_ISteamController_TranslateActionOrigin( ISteamController * Self, ESteamInputType eDestinationInputType, EControllerActionOrigin eSourceOrigin ){
  return SteamAPI_ISteamController_TranslateActionOrigin( Self,eDestinationInputType,eSourceOrigin );
}

bool bbSteamAPI_ISteamController_GetControllerBindingRevision( ISteamController * Self, ControllerHandle_t controllerHandle, int * pMajor, int * pMinor ){
  return SteamAPI_ISteamController_GetControllerBindingRevision( Self,controllerHandle,pMajor,pMinor );
}

UGCQueryHandle_t bbSteamAPI_ISteamUGC_CreateQueryUserUGCRequest( ISteamUGC * Self, AccountID_t unAccountID, EUserUGCList eListType, EUGCMatchingUGCType eMatchingUGCType, EUserUGCListSortOrder eSortOrder, AppId_t nCreatorAppID, AppId_t nConsumerAppID, uint32 unPage ){
  return SteamAPI_ISteamUGC_CreateQueryUserUGCRequest( Self,unAccountID,eListType,eMatchingUGCType,eSortOrder,nCreatorAppID,nConsumerAppID,unPage );
}

UGCQueryHandle_t bbSteamAPI_ISteamUGC_CreateQueryAllUGCRequestPage( ISteamUGC * Self, EUGCQuery eQueryType, EUGCMatchingUGCType eMatchingeMatchingUGCTypeFileType, AppId_t nCreatorAppID, AppId_t nConsumerAppID, uint32 unPage ){
  return SteamAPI_ISteamUGC_CreateQueryAllUGCRequestPage( Self,eQueryType,eMatchingeMatchingUGCTypeFileType,nCreatorAppID,nConsumerAppID,unPage );
}

UGCQueryHandle_t bbSteamAPI_ISteamUGC_CreateQueryAllUGCRequestCursor( ISteamUGC * Self, EUGCQuery eQueryType, EUGCMatchingUGCType eMatchingeMatchingUGCTypeFileType, AppId_t nCreatorAppID, AppId_t nConsumerAppID, const char * pchCursor ){
  return SteamAPI_ISteamUGC_CreateQueryAllUGCRequestCursor( Self,eQueryType,eMatchingeMatchingUGCTypeFileType,nCreatorAppID,nConsumerAppID,pchCursor );
}

UGCQueryHandle_t bbSteamAPI_ISteamUGC_CreateQueryUGCDetailsRequest( ISteamUGC * Self, PublishedFileId_t * pvecPublishedFileID, uint32 unNumPublishedFileIDs ){
  return SteamAPI_ISteamUGC_CreateQueryUGCDetailsRequest( Self,pvecPublishedFileID,unNumPublishedFileIDs );
}

SteamAPICall_t bbSteamAPI_ISteamUGC_SendQueryUGCRequest( ISteamUGC * Self, UGCQueryHandle_t handle ){
  return SteamAPI_ISteamUGC_SendQueryUGCRequest( Self,handle );
}

bool bbSteamAPI_ISteamUGC_GetQueryUGCResult( ISteamUGC * Self, UGCQueryHandle_t handle, uint32 index, SteamUGCDetails_t * pDetails ){
  return SteamAPI_ISteamUGC_GetQueryUGCResult( Self,handle,index,pDetails );
}

bool bbSteamAPI_ISteamUGC_GetQueryUGCPreviewURL( ISteamUGC * Self, UGCQueryHandle_t handle, uint32 index, char * pchURL, uint32 cchURLSize ){
  return SteamAPI_ISteamUGC_GetQueryUGCPreviewURL( Self,handle,index,pchURL,cchURLSize );
}

bool bbSteamAPI_ISteamUGC_GetQueryUGCMetadata( ISteamUGC * Self, UGCQueryHandle_t handle, uint32 index, char * pchMetadata, uint32 cchMetadatasize ){
  return SteamAPI_ISteamUGC_GetQueryUGCMetadata( Self,handle,index,pchMetadata,cchMetadatasize );
}

bool bbSteamAPI_ISteamUGC_GetQueryUGCChildren( ISteamUGC * Self, UGCQueryHandle_t handle, uint32 index, PublishedFileId_t * pvecPublishedFileID, uint32 cMaxEntries ){
  return SteamAPI_ISteamUGC_GetQueryUGCChildren( Self,handle,index,pvecPublishedFileID,cMaxEntries );
}

bool bbSteamAPI_ISteamUGC_GetQueryUGCStatistic( ISteamUGC * Self, UGCQueryHandle_t handle, uint32 index, EItemStatistic eStatType, uint64 * pStatValue ){
  return SteamAPI_ISteamUGC_GetQueryUGCStatistic( Self,handle,index,eStatType,pStatValue );
}

uint32 bbSteamAPI_ISteamUGC_GetQueryUGCNumAdditionalPreviews( ISteamUGC * Self, UGCQueryHandle_t handle, uint32 index ){
  return SteamAPI_ISteamUGC_GetQueryUGCNumAdditionalPreviews( Self,handle,index );
}

bool bbSteamAPI_ISteamUGC_GetQueryUGCAdditionalPreview( ISteamUGC * Self, UGCQueryHandle_t handle, uint32 index, uint32 previewIndex, char * pchURLOrVideoID, uint32 cchURLSize, char * pchOriginalFileName, uint32 cchOriginalFileNameSize, EItemPreviewType * pPreviewType ){
  return SteamAPI_ISteamUGC_GetQueryUGCAdditionalPreview( Self,handle,index,previewIndex,pchURLOrVideoID,cchURLSize,pchOriginalFileName,cchOriginalFileNameSize,pPreviewType );
}

uint32 bbSteamAPI_ISteamUGC_GetQueryUGCNumKeyValueTags( ISteamUGC * Self, UGCQueryHandle_t handle, uint32 index ){
  return SteamAPI_ISteamUGC_GetQueryUGCNumKeyValueTags( Self,handle,index );
}

bool bbSteamAPI_ISteamUGC_GetQueryUGCKeyValueTag( ISteamUGC * Self, UGCQueryHandle_t handle, uint32 index, uint32 keyValueTagIndex, char * pchKey, uint32 cchKeySize, char * pchValue, uint32 cchValueSize ){
  return SteamAPI_ISteamUGC_GetQueryUGCKeyValueTag( Self,handle,index,keyValueTagIndex,pchKey,cchKeySize,pchValue,cchValueSize );
}

bool bbSteamAPI_ISteamUGC_GetQueryFirstUGCKeyValueTag( ISteamUGC * Self, UGCQueryHandle_t handle, uint32 index, const char * pchKey, char * pchValue, uint32 cchValueSize ){
  return SteamAPI_ISteamUGC_GetQueryFirstUGCKeyValueTag( Self,handle,index,pchKey,pchValue,cchValueSize );
}

bool bbSteamAPI_ISteamUGC_ReleaseQueryUGCRequest( ISteamUGC * Self, UGCQueryHandle_t handle ){
  return SteamAPI_ISteamUGC_ReleaseQueryUGCRequest( Self,handle );
}

bool bbSteamAPI_ISteamUGC_AddRequiredTag( ISteamUGC * Self, UGCQueryHandle_t handle, const char * pTagName ){
  return SteamAPI_ISteamUGC_AddRequiredTag( Self,handle,pTagName );
}

bool bbSteamAPI_ISteamUGC_AddRequiredTagGroup( ISteamUGC * Self, UGCQueryHandle_t handle, const SteamParamStringArray_t * pTagGroups ){
  return SteamAPI_ISteamUGC_AddRequiredTagGroup( Self,handle,pTagGroups );
}

bool bbSteamAPI_ISteamUGC_AddExcludedTag( ISteamUGC * Self, UGCQueryHandle_t handle, const char * pTagName ){
  return SteamAPI_ISteamUGC_AddExcludedTag( Self,handle,pTagName );
}

bool bbSteamAPI_ISteamUGC_SetReturnOnlyIDs( ISteamUGC * Self, UGCQueryHandle_t handle, bool bReturnOnlyIDs ){
  return SteamAPI_ISteamUGC_SetReturnOnlyIDs( Self,handle,bReturnOnlyIDs );
}

bool bbSteamAPI_ISteamUGC_SetReturnKeyValueTags( ISteamUGC * Self, UGCQueryHandle_t handle, bool bReturnKeyValueTags ){
  return SteamAPI_ISteamUGC_SetReturnKeyValueTags( Self,handle,bReturnKeyValueTags );
}

bool bbSteamAPI_ISteamUGC_SetReturnLongDescription( ISteamUGC * Self, UGCQueryHandle_t handle, bool bReturnLongDescription ){
  return SteamAPI_ISteamUGC_SetReturnLongDescription( Self,handle,bReturnLongDescription );
}

bool bbSteamAPI_ISteamUGC_SetReturnMetadata( ISteamUGC * Self, UGCQueryHandle_t handle, bool bReturnMetadata ){
  return SteamAPI_ISteamUGC_SetReturnMetadata( Self,handle,bReturnMetadata );
}

bool bbSteamAPI_ISteamUGC_SetReturnChildren( ISteamUGC * Self, UGCQueryHandle_t handle, bool bReturnChildren ){
  return SteamAPI_ISteamUGC_SetReturnChildren( Self,handle,bReturnChildren );
}

bool bbSteamAPI_ISteamUGC_SetReturnAdditionalPreviews( ISteamUGC * Self, UGCQueryHandle_t handle, bool bReturnAdditionalPreviews ){
  return SteamAPI_ISteamUGC_SetReturnAdditionalPreviews( Self,handle,bReturnAdditionalPreviews );
}

bool bbSteamAPI_ISteamUGC_SetReturnTotalOnly( ISteamUGC * Self, UGCQueryHandle_t handle, bool bReturnTotalOnly ){
  return SteamAPI_ISteamUGC_SetReturnTotalOnly( Self,handle,bReturnTotalOnly );
}

bool bbSteamAPI_ISteamUGC_SetReturnPlaytimeStats( ISteamUGC * Self, UGCQueryHandle_t handle, uint32 unDays ){
  return SteamAPI_ISteamUGC_SetReturnPlaytimeStats( Self,handle,unDays );
}

bool bbSteamAPI_ISteamUGC_SetLanguage( ISteamUGC * Self, UGCQueryHandle_t handle, const char * pchLanguage ){
  return SteamAPI_ISteamUGC_SetLanguage( Self,handle,pchLanguage );
}

bool bbSteamAPI_ISteamUGC_SetAllowCachedResponse( ISteamUGC * Self, UGCQueryHandle_t handle, uint32 unMaxAgeSeconds ){
  return SteamAPI_ISteamUGC_SetAllowCachedResponse( Self,handle,unMaxAgeSeconds );
}

bool bbSteamAPI_ISteamUGC_SetCloudFileNameFilter( ISteamUGC * Self, UGCQueryHandle_t handle, const char * pMatchCloudFileName ){
  return SteamAPI_ISteamUGC_SetCloudFileNameFilter( Self,handle,pMatchCloudFileName );
}

bool bbSteamAPI_ISteamUGC_SetMatchAnyTag( ISteamUGC * Self, UGCQueryHandle_t handle, bool bMatchAnyTag ){
  return SteamAPI_ISteamUGC_SetMatchAnyTag( Self,handle,bMatchAnyTag );
}

bool bbSteamAPI_ISteamUGC_SetSearchText( ISteamUGC * Self, UGCQueryHandle_t handle, const char * pSearchText ){
  return SteamAPI_ISteamUGC_SetSearchText( Self,handle,pSearchText );
}

bool bbSteamAPI_ISteamUGC_SetRankedByTrendDays( ISteamUGC * Self, UGCQueryHandle_t handle, uint32 unDays ){
  return SteamAPI_ISteamUGC_SetRankedByTrendDays( Self,handle,unDays );
}

bool bbSteamAPI_ISteamUGC_AddRequiredKeyValueTag( ISteamUGC * Self, UGCQueryHandle_t handle, const char * pKey, const char * pValue ){
  return SteamAPI_ISteamUGC_AddRequiredKeyValueTag( Self,handle,pKey,pValue );
}

SteamAPICall_t bbSteamAPI_ISteamUGC_RequestUGCDetails( ISteamUGC * Self, PublishedFileId_t nPublishedFileID, uint32 unMaxAgeSeconds ){
  return SteamAPI_ISteamUGC_RequestUGCDetails( Self,nPublishedFileID,unMaxAgeSeconds );
}

SteamAPICall_t bbSteamAPI_ISteamUGC_CreateItem( ISteamUGC * Self, AppId_t nConsumerAppId, EWorkshopFileType eFileType ){
  return SteamAPI_ISteamUGC_CreateItem( Self,nConsumerAppId,eFileType );
}

UGCUpdateHandle_t bbSteamAPI_ISteamUGC_StartItemUpdate( ISteamUGC * Self, AppId_t nConsumerAppId, PublishedFileId_t nPublishedFileID ){
  return SteamAPI_ISteamUGC_StartItemUpdate( Self,nConsumerAppId,nPublishedFileID );
}

bool bbSteamAPI_ISteamUGC_SetItemTitle( ISteamUGC * Self, UGCUpdateHandle_t handle, const char * pchTitle ){
  return SteamAPI_ISteamUGC_SetItemTitle( Self,handle,pchTitle );
}

bool bbSteamAPI_ISteamUGC_SetItemDescription( ISteamUGC * Self, UGCUpdateHandle_t handle, const char * pchDescription ){
  return SteamAPI_ISteamUGC_SetItemDescription( Self,handle,pchDescription );
}

bool bbSteamAPI_ISteamUGC_SetItemUpdateLanguage( ISteamUGC * Self, UGCUpdateHandle_t handle, const char * pchLanguage ){
  return SteamAPI_ISteamUGC_SetItemUpdateLanguage( Self,handle,pchLanguage );
}

bool bbSteamAPI_ISteamUGC_SetItemMetadata( ISteamUGC * Self, UGCUpdateHandle_t handle, const char * pchMetaData ){
  return SteamAPI_ISteamUGC_SetItemMetadata( Self,handle,pchMetaData );
}

bool bbSteamAPI_ISteamUGC_SetItemVisibility( ISteamUGC * Self, UGCUpdateHandle_t handle, ERemoteStoragePublishedFileVisibility eVisibility ){
  return SteamAPI_ISteamUGC_SetItemVisibility( Self,handle,eVisibility );
}

bool bbSteamAPI_ISteamUGC_SetItemTags( ISteamUGC * Self, UGCUpdateHandle_t updateHandle, const SteamParamStringArray_t * pTags ){
  return SteamAPI_ISteamUGC_SetItemTags( Self,updateHandle,pTags );
}

bool bbSteamAPI_ISteamUGC_SetItemContent( ISteamUGC * Self, UGCUpdateHandle_t handle, const char * pszContentFolder ){
  return SteamAPI_ISteamUGC_SetItemContent( Self,handle,pszContentFolder );
}

bool bbSteamAPI_ISteamUGC_SetItemPreview( ISteamUGC * Self, UGCUpdateHandle_t handle, const char * pszPreviewFile ){
  return SteamAPI_ISteamUGC_SetItemPreview( Self,handle,pszPreviewFile );
}

bool bbSteamAPI_ISteamUGC_SetAllowLegacyUpload( ISteamUGC * Self, UGCUpdateHandle_t handle, bool bAllowLegacyUpload ){
  return SteamAPI_ISteamUGC_SetAllowLegacyUpload( Self,handle,bAllowLegacyUpload );
}

bool bbSteamAPI_ISteamUGC_RemoveAllItemKeyValueTags( ISteamUGC * Self, UGCUpdateHandle_t handle ){
  return SteamAPI_ISteamUGC_RemoveAllItemKeyValueTags( Self,handle );
}

bool bbSteamAPI_ISteamUGC_RemoveItemKeyValueTags( ISteamUGC * Self, UGCUpdateHandle_t handle, const char * pchKey ){
  return SteamAPI_ISteamUGC_RemoveItemKeyValueTags( Self,handle,pchKey );
}

bool bbSteamAPI_ISteamUGC_AddItemKeyValueTag( ISteamUGC * Self, UGCUpdateHandle_t handle, const char * pchKey, const char * pchValue ){
  return SteamAPI_ISteamUGC_AddItemKeyValueTag( Self,handle,pchKey,pchValue );
}

bool bbSteamAPI_ISteamUGC_AddItemPreviewFile( ISteamUGC * Self, UGCUpdateHandle_t handle, const char * pszPreviewFile, EItemPreviewType type ){
  return SteamAPI_ISteamUGC_AddItemPreviewFile( Self,handle,pszPreviewFile,type );
}

bool bbSteamAPI_ISteamUGC_AddItemPreviewVideo( ISteamUGC * Self, UGCUpdateHandle_t handle, const char * pszVideoID ){
  return SteamAPI_ISteamUGC_AddItemPreviewVideo( Self,handle,pszVideoID );
}

bool bbSteamAPI_ISteamUGC_UpdateItemPreviewFile( ISteamUGC * Self, UGCUpdateHandle_t handle, uint32 index, const char * pszPreviewFile ){
  return SteamAPI_ISteamUGC_UpdateItemPreviewFile( Self,handle,index,pszPreviewFile );
}

bool bbSteamAPI_ISteamUGC_UpdateItemPreviewVideo( ISteamUGC * Self, UGCUpdateHandle_t handle, uint32 index, const char * pszVideoID ){
  return SteamAPI_ISteamUGC_UpdateItemPreviewVideo( Self,handle,index,pszVideoID );
}

bool bbSteamAPI_ISteamUGC_RemoveItemPreview( ISteamUGC * Self, UGCUpdateHandle_t handle, uint32 index ){
  return SteamAPI_ISteamUGC_RemoveItemPreview( Self,handle,index );
}

SteamAPICall_t bbSteamAPI_ISteamUGC_SubmitItemUpdate( ISteamUGC * Self, UGCUpdateHandle_t handle, const char * pchChangeNote ){
  return SteamAPI_ISteamUGC_SubmitItemUpdate( Self,handle,pchChangeNote );
}

EItemUpdateStatus bbSteamAPI_ISteamUGC_GetItemUpdateProgress( ISteamUGC * Self, UGCUpdateHandle_t handle, uint64 * punBytesProcessed, uint64 * punBytesTotal ){
  return SteamAPI_ISteamUGC_GetItemUpdateProgress( Self,handle,punBytesProcessed,punBytesTotal );
}

SteamAPICall_t bbSteamAPI_ISteamUGC_SetUserItemVote( ISteamUGC * Self, PublishedFileId_t nPublishedFileID, bool bVoteUp ){
  return SteamAPI_ISteamUGC_SetUserItemVote( Self,nPublishedFileID,bVoteUp );
}

SteamAPICall_t bbSteamAPI_ISteamUGC_GetUserItemVote( ISteamUGC * Self, PublishedFileId_t nPublishedFileID ){
  return SteamAPI_ISteamUGC_GetUserItemVote( Self,nPublishedFileID );
}

SteamAPICall_t bbSteamAPI_ISteamUGC_AddItemToFavorites( ISteamUGC * Self, AppId_t nAppId, PublishedFileId_t nPublishedFileID ){
  return SteamAPI_ISteamUGC_AddItemToFavorites( Self,nAppId,nPublishedFileID );
}

SteamAPICall_t bbSteamAPI_ISteamUGC_RemoveItemFromFavorites( ISteamUGC * Self, AppId_t nAppId, PublishedFileId_t nPublishedFileID ){
  return SteamAPI_ISteamUGC_RemoveItemFromFavorites( Self,nAppId,nPublishedFileID );
}

SteamAPICall_t bbSteamAPI_ISteamUGC_SubscribeItem( ISteamUGC * Self, PublishedFileId_t nPublishedFileID ){
  return SteamAPI_ISteamUGC_SubscribeItem( Self,nPublishedFileID );
}

SteamAPICall_t bbSteamAPI_ISteamUGC_UnsubscribeItem( ISteamUGC * Self, PublishedFileId_t nPublishedFileID ){
  return SteamAPI_ISteamUGC_UnsubscribeItem( Self,nPublishedFileID );
}

uint32 bbSteamAPI_ISteamUGC_GetNumSubscribedItems( ISteamUGC * Self ){
  return SteamAPI_ISteamUGC_GetNumSubscribedItems( Self );
}

uint32 bbSteamAPI_ISteamUGC_GetSubscribedItems( ISteamUGC * Self, PublishedFileId_t * pvecPublishedFileID, uint32 cMaxEntries ){
  return SteamAPI_ISteamUGC_GetSubscribedItems( Self,pvecPublishedFileID,cMaxEntries );
}

uint32 bbSteamAPI_ISteamUGC_GetItemState( ISteamUGC * Self, PublishedFileId_t nPublishedFileID ){
  return SteamAPI_ISteamUGC_GetItemState( Self,nPublishedFileID );
}

bool bbSteamAPI_ISteamUGC_GetItemInstallInfo( ISteamUGC * Self, PublishedFileId_t nPublishedFileID, uint64 * punSizeOnDisk, char * pchFolder, uint32 cchFolderSize, uint32 * punTimeStamp ){
  return SteamAPI_ISteamUGC_GetItemInstallInfo( Self,nPublishedFileID,punSizeOnDisk,pchFolder,cchFolderSize,punTimeStamp );
}

bool bbSteamAPI_ISteamUGC_GetItemDownloadInfo( ISteamUGC * Self, PublishedFileId_t nPublishedFileID, uint64 * punBytesDownloaded, uint64 * punBytesTotal ){
  return SteamAPI_ISteamUGC_GetItemDownloadInfo( Self,nPublishedFileID,punBytesDownloaded,punBytesTotal );
}

bool bbSteamAPI_ISteamUGC_DownloadItem( ISteamUGC * Self, PublishedFileId_t nPublishedFileID, bool bHighPriority ){
  return SteamAPI_ISteamUGC_DownloadItem( Self,nPublishedFileID,bHighPriority );
}

bool bbSteamAPI_ISteamUGC_BInitWorkshopForGameServer( ISteamUGC * Self, DepotId_t unWorkshopDepotID, const char * pszFolder ){
  return SteamAPI_ISteamUGC_BInitWorkshopForGameServer( Self,unWorkshopDepotID,pszFolder );
}

void bbSteamAPI_ISteamUGC_SuspendDownloads( ISteamUGC * Self, bool bSuspend ){
  SteamAPI_ISteamUGC_SuspendDownloads( Self,bSuspend );
}

SteamAPICall_t bbSteamAPI_ISteamUGC_StartPlaytimeTracking( ISteamUGC * Self, PublishedFileId_t * pvecPublishedFileID, uint32 unNumPublishedFileIDs ){
  return SteamAPI_ISteamUGC_StartPlaytimeTracking( Self,pvecPublishedFileID,unNumPublishedFileIDs );
}

SteamAPICall_t bbSteamAPI_ISteamUGC_StopPlaytimeTracking( ISteamUGC * Self, PublishedFileId_t * pvecPublishedFileID, uint32 unNumPublishedFileIDs ){
  return SteamAPI_ISteamUGC_StopPlaytimeTracking( Self,pvecPublishedFileID,unNumPublishedFileIDs );
}

SteamAPICall_t bbSteamAPI_ISteamUGC_StopPlaytimeTrackingForAllItems( ISteamUGC * Self ){
  return SteamAPI_ISteamUGC_StopPlaytimeTrackingForAllItems( Self );
}

SteamAPICall_t bbSteamAPI_ISteamUGC_AddDependency( ISteamUGC * Self, PublishedFileId_t nParentPublishedFileID, PublishedFileId_t nChildPublishedFileID ){
  return SteamAPI_ISteamUGC_AddDependency( Self,nParentPublishedFileID,nChildPublishedFileID );
}

SteamAPICall_t bbSteamAPI_ISteamUGC_RemoveDependency( ISteamUGC * Self, PublishedFileId_t nParentPublishedFileID, PublishedFileId_t nChildPublishedFileID ){
  return SteamAPI_ISteamUGC_RemoveDependency( Self,nParentPublishedFileID,nChildPublishedFileID );
}

SteamAPICall_t bbSteamAPI_ISteamUGC_AddAppDependency( ISteamUGC * Self, PublishedFileId_t nPublishedFileID, AppId_t nAppID ){
  return SteamAPI_ISteamUGC_AddAppDependency( Self,nPublishedFileID,nAppID );
}

SteamAPICall_t bbSteamAPI_ISteamUGC_RemoveAppDependency( ISteamUGC * Self, PublishedFileId_t nPublishedFileID, AppId_t nAppID ){
  return SteamAPI_ISteamUGC_RemoveAppDependency( Self,nPublishedFileID,nAppID );
}

SteamAPICall_t bbSteamAPI_ISteamUGC_GetAppDependencies( ISteamUGC * Self, PublishedFileId_t nPublishedFileID ){
  return SteamAPI_ISteamUGC_GetAppDependencies( Self,nPublishedFileID );
}

SteamAPICall_t bbSteamAPI_ISteamUGC_DeleteItem( ISteamUGC * Self, PublishedFileId_t nPublishedFileID ){
  return SteamAPI_ISteamUGC_DeleteItem( Self,nPublishedFileID );
}

uint32 bbSteamAPI_ISteamAppList_GetNumInstalledApps( ISteamAppList * Self ){
  return SteamAPI_ISteamAppList_GetNumInstalledApps( Self );
}

uint32 bbSteamAPI_ISteamAppList_GetInstalledApps( ISteamAppList * Self, AppId_t * pvecAppID, uint32 unMaxAppIDs ){
  return SteamAPI_ISteamAppList_GetInstalledApps( Self,pvecAppID,unMaxAppIDs );
}

int bbSteamAPI_ISteamAppList_GetAppName( ISteamAppList * Self, AppId_t nAppID, char * pchName, int cchNameMax ){
  return SteamAPI_ISteamAppList_GetAppName( Self,nAppID,pchName,cchNameMax );
}

int bbSteamAPI_ISteamAppList_GetAppInstallDir( ISteamAppList * Self, AppId_t nAppID, char * pchDirectory, int cchNameMax ){
  return SteamAPI_ISteamAppList_GetAppInstallDir( Self,nAppID,pchDirectory,cchNameMax );
}

int bbSteamAPI_ISteamAppList_GetAppBuildId( ISteamAppList * Self, AppId_t nAppID ){
  return SteamAPI_ISteamAppList_GetAppBuildId( Self,nAppID );
}

bool bbSteamAPI_ISteamHTMLSurface_Init( ISteamHTMLSurface * Self ){
  return SteamAPI_ISteamHTMLSurface_Init( Self );
}

bool bbSteamAPI_ISteamHTMLSurface_Shutdown( ISteamHTMLSurface * Self ){
  return SteamAPI_ISteamHTMLSurface_Shutdown( Self );
}

SteamAPICall_t bbSteamAPI_ISteamHTMLSurface_CreateBrowser( ISteamHTMLSurface * Self, const char * pchUserAgent, const char * pchUserCSS ){
  return SteamAPI_ISteamHTMLSurface_CreateBrowser( Self,pchUserAgent,pchUserCSS );
}

void bbSteamAPI_ISteamHTMLSurface_RemoveBrowser( ISteamHTMLSurface * Self, HHTMLBrowser unBrowserHandle ){
  SteamAPI_ISteamHTMLSurface_RemoveBrowser( Self,unBrowserHandle );
}

void bbSteamAPI_ISteamHTMLSurface_LoadURL( ISteamHTMLSurface * Self, HHTMLBrowser unBrowserHandle, const char * pchURL, const char * pchPostData ){
  SteamAPI_ISteamHTMLSurface_LoadURL( Self,unBrowserHandle,pchURL,pchPostData );
}

void bbSteamAPI_ISteamHTMLSurface_SetSize( ISteamHTMLSurface * Self, HHTMLBrowser unBrowserHandle, uint32 unWidth, uint32 unHeight ){
  SteamAPI_ISteamHTMLSurface_SetSize( Self,unBrowserHandle,unWidth,unHeight );
}

void bbSteamAPI_ISteamHTMLSurface_StopLoad( ISteamHTMLSurface * Self, HHTMLBrowser unBrowserHandle ){
  SteamAPI_ISteamHTMLSurface_StopLoad( Self,unBrowserHandle );
}

void bbSteamAPI_ISteamHTMLSurface_Reload( ISteamHTMLSurface * Self, HHTMLBrowser unBrowserHandle ){
  SteamAPI_ISteamHTMLSurface_Reload( Self,unBrowserHandle );
}

void bbSteamAPI_ISteamHTMLSurface_GoBack( ISteamHTMLSurface * Self, HHTMLBrowser unBrowserHandle ){
  SteamAPI_ISteamHTMLSurface_GoBack( Self,unBrowserHandle );
}

void bbSteamAPI_ISteamHTMLSurface_GoForward( ISteamHTMLSurface * Self, HHTMLBrowser unBrowserHandle ){
  SteamAPI_ISteamHTMLSurface_GoForward( Self,unBrowserHandle );
}

void bbSteamAPI_ISteamHTMLSurface_AddHeader( ISteamHTMLSurface * Self, HHTMLBrowser unBrowserHandle, const char * pchKey, const char * pchValue ){
  SteamAPI_ISteamHTMLSurface_AddHeader( Self,unBrowserHandle,pchKey,pchValue );
}

void bbSteamAPI_ISteamHTMLSurface_ExecuteJavascript( ISteamHTMLSurface * Self, HHTMLBrowser unBrowserHandle, const char * pchScript ){
  SteamAPI_ISteamHTMLSurface_ExecuteJavascript( Self,unBrowserHandle,pchScript );
}

void bbSteamAPI_ISteamHTMLSurface_MouseUp( ISteamHTMLSurface * Self, HHTMLBrowser unBrowserHandle, ISteamHTMLSurface::EHTMLMouseButton eMouseButton ){
  SteamAPI_ISteamHTMLSurface_MouseUp( Self,unBrowserHandle,eMouseButton );
}

void bbSteamAPI_ISteamHTMLSurface_MouseDown( ISteamHTMLSurface * Self, HHTMLBrowser unBrowserHandle, ISteamHTMLSurface::EHTMLMouseButton eMouseButton ){
  SteamAPI_ISteamHTMLSurface_MouseDown( Self,unBrowserHandle,eMouseButton );
}

void bbSteamAPI_ISteamHTMLSurface_MouseDoubleClick( ISteamHTMLSurface * Self, HHTMLBrowser unBrowserHandle, ISteamHTMLSurface::EHTMLMouseButton eMouseButton ){
  SteamAPI_ISteamHTMLSurface_MouseDoubleClick( Self,unBrowserHandle,eMouseButton );
}

void bbSteamAPI_ISteamHTMLSurface_MouseMove( ISteamHTMLSurface * Self, HHTMLBrowser unBrowserHandle, int x, int y ){
  SteamAPI_ISteamHTMLSurface_MouseMove( Self,unBrowserHandle,x,y );
}

void bbSteamAPI_ISteamHTMLSurface_MouseWheel( ISteamHTMLSurface * Self, HHTMLBrowser unBrowserHandle, int32 nDelta ){
  SteamAPI_ISteamHTMLSurface_MouseWheel( Self,unBrowserHandle,nDelta );
}

void bbSteamAPI_ISteamHTMLSurface_KeyDown( ISteamHTMLSurface * Self, HHTMLBrowser unBrowserHandle, uint32 nNativeKeyCode, ISteamHTMLSurface::EHTMLKeyModifiers eHTMLKeyModifiers, bool bIsSystemKey ){
  SteamAPI_ISteamHTMLSurface_KeyDown( Self,unBrowserHandle,nNativeKeyCode,eHTMLKeyModifiers,bIsSystemKey );
}

void bbSteamAPI_ISteamHTMLSurface_KeyUp( ISteamHTMLSurface * Self, HHTMLBrowser unBrowserHandle, uint32 nNativeKeyCode, ISteamHTMLSurface::EHTMLKeyModifiers eHTMLKeyModifiers ){
  SteamAPI_ISteamHTMLSurface_KeyUp( Self,unBrowserHandle,nNativeKeyCode,eHTMLKeyModifiers );
}

void bbSteamAPI_ISteamHTMLSurface_KeyChar( ISteamHTMLSurface * Self, HHTMLBrowser unBrowserHandle, uint32 cUnicodeChar, ISteamHTMLSurface::EHTMLKeyModifiers eHTMLKeyModifiers ){
  SteamAPI_ISteamHTMLSurface_KeyChar( Self,unBrowserHandle,cUnicodeChar,eHTMLKeyModifiers );
}

void bbSteamAPI_ISteamHTMLSurface_SetHorizontalScroll( ISteamHTMLSurface * Self, HHTMLBrowser unBrowserHandle, uint32 nAbsolutePixelScroll ){
  SteamAPI_ISteamHTMLSurface_SetHorizontalScroll( Self,unBrowserHandle,nAbsolutePixelScroll );
}

void bbSteamAPI_ISteamHTMLSurface_SetVerticalScroll( ISteamHTMLSurface * Self, HHTMLBrowser unBrowserHandle, uint32 nAbsolutePixelScroll ){
  SteamAPI_ISteamHTMLSurface_SetVerticalScroll( Self,unBrowserHandle,nAbsolutePixelScroll );
}

void bbSteamAPI_ISteamHTMLSurface_SetKeyFocus( ISteamHTMLSurface * Self, HHTMLBrowser unBrowserHandle, bool bHasKeyFocus ){
  SteamAPI_ISteamHTMLSurface_SetKeyFocus( Self,unBrowserHandle,bHasKeyFocus );
}

void bbSteamAPI_ISteamHTMLSurface_ViewSource( ISteamHTMLSurface * Self, HHTMLBrowser unBrowserHandle ){
  SteamAPI_ISteamHTMLSurface_ViewSource( Self,unBrowserHandle );
}

void bbSteamAPI_ISteamHTMLSurface_CopyToClipboard( ISteamHTMLSurface * Self, HHTMLBrowser unBrowserHandle ){
  SteamAPI_ISteamHTMLSurface_CopyToClipboard( Self,unBrowserHandle );
}

void bbSteamAPI_ISteamHTMLSurface_PasteFromClipboard( ISteamHTMLSurface * Self, HHTMLBrowser unBrowserHandle ){
  SteamAPI_ISteamHTMLSurface_PasteFromClipboard( Self,unBrowserHandle );
}

void bbSteamAPI_ISteamHTMLSurface_Find( ISteamHTMLSurface * Self, HHTMLBrowser unBrowserHandle, const char * pchSearchStr, bool bCurrentlyInFind, bool bReverse ){
  SteamAPI_ISteamHTMLSurface_Find( Self,unBrowserHandle,pchSearchStr,bCurrentlyInFind,bReverse );
}

void bbSteamAPI_ISteamHTMLSurface_StopFind( ISteamHTMLSurface * Self, HHTMLBrowser unBrowserHandle ){
  SteamAPI_ISteamHTMLSurface_StopFind( Self,unBrowserHandle );
}

void bbSteamAPI_ISteamHTMLSurface_GetLinkAtPosition( ISteamHTMLSurface * Self, HHTMLBrowser unBrowserHandle, int x, int y ){
  SteamAPI_ISteamHTMLSurface_GetLinkAtPosition( Self,unBrowserHandle,x,y );
}

void bbSteamAPI_ISteamHTMLSurface_SetCookie( ISteamHTMLSurface * Self, const char * pchHostname, const char * pchKey, const char * pchValue, const char * pchPath, RTime32 nExpires, bool bSecure, bool bHTTPOnly ){
  SteamAPI_ISteamHTMLSurface_SetCookie( Self,pchHostname,pchKey,pchValue,pchPath,nExpires,bSecure,bHTTPOnly );
}

void bbSteamAPI_ISteamHTMLSurface_SetPageScaleFactor( ISteamHTMLSurface * Self, HHTMLBrowser unBrowserHandle, float flZoom, int nPointX, int nPointY ){
  SteamAPI_ISteamHTMLSurface_SetPageScaleFactor( Self,unBrowserHandle,flZoom,nPointX,nPointY );
}

void bbSteamAPI_ISteamHTMLSurface_SetBackgroundMode( ISteamHTMLSurface * Self, HHTMLBrowser unBrowserHandle, bool bBackgroundMode ){
  SteamAPI_ISteamHTMLSurface_SetBackgroundMode( Self,unBrowserHandle,bBackgroundMode );
}

void bbSteamAPI_ISteamHTMLSurface_SetDPIScalingFactor( ISteamHTMLSurface * Self, HHTMLBrowser unBrowserHandle, float flDPIScaling ){
  SteamAPI_ISteamHTMLSurface_SetDPIScalingFactor( Self,unBrowserHandle,flDPIScaling );
}

void bbSteamAPI_ISteamHTMLSurface_OpenDeveloperTools( ISteamHTMLSurface * Self, HHTMLBrowser unBrowserHandle ){
  SteamAPI_ISteamHTMLSurface_OpenDeveloperTools( Self,unBrowserHandle );
}

void bbSteamAPI_ISteamHTMLSurface_AllowStartRequest( ISteamHTMLSurface * Self, HHTMLBrowser unBrowserHandle, bool bAllowed ){
  SteamAPI_ISteamHTMLSurface_AllowStartRequest( Self,unBrowserHandle,bAllowed );
}

void bbSteamAPI_ISteamHTMLSurface_JSDialogResponse( ISteamHTMLSurface * Self, HHTMLBrowser unBrowserHandle, bool bResult ){
  SteamAPI_ISteamHTMLSurface_JSDialogResponse( Self,unBrowserHandle,bResult );
}

void bbSteamAPI_ISteamHTMLSurface_FileLoadDialogResponse( ISteamHTMLSurface * Self, HHTMLBrowser unBrowserHandle, const char ** pchSelectedFiles ){
  SteamAPI_ISteamHTMLSurface_FileLoadDialogResponse( Self,unBrowserHandle,pchSelectedFiles );
}

EResult bbSteamAPI_ISteamInventory_GetResultStatus( ISteamInventory * Self, SteamInventoryResult_t resultHandle ){
  return SteamAPI_ISteamInventory_GetResultStatus( Self,resultHandle );
}

bool bbSteamAPI_ISteamInventory_GetResultItems( ISteamInventory * Self, SteamInventoryResult_t resultHandle, SteamItemDetails_t * pOutItemsArray, uint32 * punOutItemsArraySize ){
  return SteamAPI_ISteamInventory_GetResultItems( Self,resultHandle,pOutItemsArray,punOutItemsArraySize );
}

bool bbSteamAPI_ISteamInventory_GetResultItemProperty( ISteamInventory * Self, SteamInventoryResult_t resultHandle, uint32 unItemIndex, const char * pchPropertyName, char * pchValueBuffer, uint32 * punValueBufferSizeOut ){
  return SteamAPI_ISteamInventory_GetResultItemProperty( Self,resultHandle,unItemIndex,pchPropertyName,pchValueBuffer,punValueBufferSizeOut );
}

uint32 bbSteamAPI_ISteamInventory_GetResultTimestamp( ISteamInventory * Self, SteamInventoryResult_t resultHandle ){
  return SteamAPI_ISteamInventory_GetResultTimestamp( Self,resultHandle );
}

bool bbSteamAPI_ISteamInventory_CheckResultSteamID( ISteamInventory * Self, SteamInventoryResult_t resultHandle, uint64_steamid steamIDExpected ){
  return SteamAPI_ISteamInventory_CheckResultSteamID( Self,resultHandle,steamIDExpected );
}

void bbSteamAPI_ISteamInventory_DestroyResult( ISteamInventory * Self, SteamInventoryResult_t resultHandle ){
  SteamAPI_ISteamInventory_DestroyResult( Self,resultHandle );
}

bool bbSteamAPI_ISteamInventory_GetAllItems( ISteamInventory * Self, SteamInventoryResult_t * pResultHandle ){
  return SteamAPI_ISteamInventory_GetAllItems( Self,pResultHandle );
}

bool bbSteamAPI_ISteamInventory_GetItemsByID( ISteamInventory * Self, SteamInventoryResult_t * pResultHandle, const SteamItemInstanceID_t * pInstanceIDs, uint32 unCountInstanceIDs ){
  return SteamAPI_ISteamInventory_GetItemsByID( Self,pResultHandle,pInstanceIDs,unCountInstanceIDs );
}

bool bbSteamAPI_ISteamInventory_SerializeResult( ISteamInventory * Self, SteamInventoryResult_t resultHandle, void * pOutBuffer, uint32 * punOutBufferSize ){
  return SteamAPI_ISteamInventory_SerializeResult( Self,resultHandle,pOutBuffer,punOutBufferSize );
}

bool bbSteamAPI_ISteamInventory_DeserializeResult( ISteamInventory * Self, SteamInventoryResult_t * pOutResultHandle, const void * pBuffer, uint32 unBufferSize, bool bRESERVED_MUST_BE_FALSE ){
  return SteamAPI_ISteamInventory_DeserializeResult( Self,pOutResultHandle,pBuffer,unBufferSize,bRESERVED_MUST_BE_FALSE );
}

bool bbSteamAPI_ISteamInventory_GenerateItems( ISteamInventory * Self, SteamInventoryResult_t * pResultHandle, const SteamItemDef_t * pArrayItemDefs, const uint32 * punArrayQuantity, uint32 unArrayLength ){
  return SteamAPI_ISteamInventory_GenerateItems( Self,pResultHandle,pArrayItemDefs,punArrayQuantity,unArrayLength );
}

bool bbSteamAPI_ISteamInventory_GrantPromoItems( ISteamInventory * Self, SteamInventoryResult_t * pResultHandle ){
  return SteamAPI_ISteamInventory_GrantPromoItems( Self,pResultHandle );
}

bool bbSteamAPI_ISteamInventory_AddPromoItem( ISteamInventory * Self, SteamInventoryResult_t * pResultHandle, SteamItemDef_t itemDef ){
  return SteamAPI_ISteamInventory_AddPromoItem( Self,pResultHandle,itemDef );
}

bool bbSteamAPI_ISteamInventory_AddPromoItems( ISteamInventory * Self, SteamInventoryResult_t * pResultHandle, const SteamItemDef_t * pArrayItemDefs, uint32 unArrayLength ){
  return SteamAPI_ISteamInventory_AddPromoItems( Self,pResultHandle,pArrayItemDefs,unArrayLength );
}

bool bbSteamAPI_ISteamInventory_ConsumeItem( ISteamInventory * Self, SteamInventoryResult_t * pResultHandle, SteamItemInstanceID_t itemConsume, uint32 unQuantity ){
  return SteamAPI_ISteamInventory_ConsumeItem( Self,pResultHandle,itemConsume,unQuantity );
}

bool bbSteamAPI_ISteamInventory_ExchangeItems( ISteamInventory * Self, SteamInventoryResult_t * pResultHandle, const SteamItemDef_t * pArrayGenerate, const uint32 * punArrayGenerateQuantity, uint32 unArrayGenerateLength, const SteamItemInstanceID_t * pArrayDestroy, const uint32 * punArrayDestroyQuantity, uint32 unArrayDestroyLength ){
  return SteamAPI_ISteamInventory_ExchangeItems( Self,pResultHandle,pArrayGenerate,punArrayGenerateQuantity,unArrayGenerateLength,pArrayDestroy,punArrayDestroyQuantity,unArrayDestroyLength );
}

bool bbSteamAPI_ISteamInventory_TransferItemQuantity( ISteamInventory * Self, SteamInventoryResult_t * pResultHandle, SteamItemInstanceID_t itemIdSource, uint32 unQuantity, SteamItemInstanceID_t itemIdDest ){
  return SteamAPI_ISteamInventory_TransferItemQuantity( Self,pResultHandle,itemIdSource,unQuantity,itemIdDest );
}

void bbSteamAPI_ISteamInventory_SendItemDropHeartbeat( ISteamInventory * Self ){
  SteamAPI_ISteamInventory_SendItemDropHeartbeat( Self );
}

bool bbSteamAPI_ISteamInventory_TriggerItemDrop( ISteamInventory * Self, SteamInventoryResult_t * pResultHandle, SteamItemDef_t dropListDefinition ){
  return SteamAPI_ISteamInventory_TriggerItemDrop( Self,pResultHandle,dropListDefinition );
}

bool bbSteamAPI_ISteamInventory_TradeItems( ISteamInventory * Self, SteamInventoryResult_t * pResultHandle, uint64_steamid steamIDTradePartner, const SteamItemInstanceID_t * pArrayGive, const uint32 * pArrayGiveQuantity, uint32 nArrayGiveLength, const SteamItemInstanceID_t * pArrayGet, const uint32 * pArrayGetQuantity, uint32 nArrayGetLength ){
  return SteamAPI_ISteamInventory_TradeItems( Self,pResultHandle,steamIDTradePartner,pArrayGive,pArrayGiveQuantity,nArrayGiveLength,pArrayGet,pArrayGetQuantity,nArrayGetLength );
}

bool bbSteamAPI_ISteamInventory_LoadItemDefinitions( ISteamInventory * Self ){
  return SteamAPI_ISteamInventory_LoadItemDefinitions( Self );
}

bool bbSteamAPI_ISteamInventory_GetItemDefinitionIDs( ISteamInventory * Self, SteamItemDef_t * pItemDefIDs, uint32 * punItemDefIDsArraySize ){
  return SteamAPI_ISteamInventory_GetItemDefinitionIDs( Self,pItemDefIDs,punItemDefIDsArraySize );
}

bool bbSteamAPI_ISteamInventory_GetItemDefinitionProperty( ISteamInventory * Self, SteamItemDef_t iDefinition, const char * pchPropertyName, char * pchValueBuffer, uint32 * punValueBufferSizeOut ){
  return SteamAPI_ISteamInventory_GetItemDefinitionProperty( Self,iDefinition,pchPropertyName,pchValueBuffer,punValueBufferSizeOut );
}

SteamAPICall_t bbSteamAPI_ISteamInventory_RequestEligiblePromoItemDefinitionsIDs( ISteamInventory * Self, uint64_steamid steamID ){
  return SteamAPI_ISteamInventory_RequestEligiblePromoItemDefinitionsIDs( Self,steamID );
}

bool bbSteamAPI_ISteamInventory_GetEligiblePromoItemDefinitionIDs( ISteamInventory * Self, uint64_steamid steamID, SteamItemDef_t * pItemDefIDs, uint32 * punItemDefIDsArraySize ){
  return SteamAPI_ISteamInventory_GetEligiblePromoItemDefinitionIDs( Self,steamID,pItemDefIDs,punItemDefIDsArraySize );
}

SteamAPICall_t bbSteamAPI_ISteamInventory_StartPurchase( ISteamInventory * Self, const SteamItemDef_t * pArrayItemDefs, const uint32 * punArrayQuantity, uint32 unArrayLength ){
  return SteamAPI_ISteamInventory_StartPurchase( Self,pArrayItemDefs,punArrayQuantity,unArrayLength );
}

SteamAPICall_t bbSteamAPI_ISteamInventory_RequestPrices( ISteamInventory * Self ){
  return SteamAPI_ISteamInventory_RequestPrices( Self );
}

uint32 bbSteamAPI_ISteamInventory_GetNumItemsWithPrices( ISteamInventory * Self ){
  return SteamAPI_ISteamInventory_GetNumItemsWithPrices( Self );
}

bool bbSteamAPI_ISteamInventory_GetItemsWithPrices( ISteamInventory * Self, SteamItemDef_t * pArrayItemDefs, uint64 * pCurrentPrices, uint64 * pBasePrices, uint32 unArrayLength ){
  return SteamAPI_ISteamInventory_GetItemsWithPrices( Self,pArrayItemDefs,pCurrentPrices,pBasePrices,unArrayLength );
}

bool bbSteamAPI_ISteamInventory_GetItemPrice( ISteamInventory * Self, SteamItemDef_t iDefinition, uint64 * pCurrentPrice, uint64 * pBasePrice ){
  return SteamAPI_ISteamInventory_GetItemPrice( Self,iDefinition,pCurrentPrice,pBasePrice );
}

SteamInventoryUpdateHandle_t bbSteamAPI_ISteamInventory_StartUpdateProperties( ISteamInventory * Self ){
  return SteamAPI_ISteamInventory_StartUpdateProperties( Self );
}

bool bbSteamAPI_ISteamInventory_RemoveProperty( ISteamInventory * Self, SteamInventoryUpdateHandle_t handle, SteamItemInstanceID_t nItemID, const char * pchPropertyName ){
  return SteamAPI_ISteamInventory_RemoveProperty( Self,handle,nItemID,pchPropertyName );
}

bool bbSteamAPI_ISteamInventory_SetPropertyString( ISteamInventory * Self, SteamInventoryUpdateHandle_t handle, SteamItemInstanceID_t nItemID, const char * pchPropertyName, const char * pchPropertyValue ){
  return SteamAPI_ISteamInventory_SetPropertyString( Self,handle,nItemID,pchPropertyName,pchPropertyValue );
}

bool bbSteamAPI_ISteamInventory_SetPropertyBool( ISteamInventory * Self, SteamInventoryUpdateHandle_t handle, SteamItemInstanceID_t nItemID, const char * pchPropertyName, bool bValue ){
  return SteamAPI_ISteamInventory_SetPropertyBool( Self,handle,nItemID,pchPropertyName,bValue );
}

bool bbSteamAPI_ISteamInventory_SetPropertyInt64( ISteamInventory * Self, SteamInventoryUpdateHandle_t handle, SteamItemInstanceID_t nItemID, const char * pchPropertyName, int64 nValue ){
  return SteamAPI_ISteamInventory_SetPropertyInt64( Self,handle,nItemID,pchPropertyName,nValue );
}

bool bbSteamAPI_ISteamInventory_SetPropertyFloat( ISteamInventory * Self, SteamInventoryUpdateHandle_t handle, SteamItemInstanceID_t nItemID, const char * pchPropertyName, float flValue ){
  return SteamAPI_ISteamInventory_SetPropertyFloat( Self,handle,nItemID,pchPropertyName,flValue );
}

bool bbSteamAPI_ISteamInventory_SubmitUpdateProperties( ISteamInventory * Self, SteamInventoryUpdateHandle_t handle, SteamInventoryResult_t * pResultHandle ){
  return SteamAPI_ISteamInventory_SubmitUpdateProperties( Self,handle,pResultHandle );
}

void bbSteamAPI_ISteamVideo_GetVideoURL( ISteamVideo * Self, AppId_t unVideoAppID ){
  SteamAPI_ISteamVideo_GetVideoURL( Self,unVideoAppID );
}

bool bbSteamAPI_ISteamVideo_IsBroadcasting( ISteamVideo * Self, int * pnNumViewers ){
  return SteamAPI_ISteamVideo_IsBroadcasting( Self,pnNumViewers );
}

void bbSteamAPI_ISteamVideo_GetOPFSettings( ISteamVideo * Self, AppId_t unVideoAppID ){
  SteamAPI_ISteamVideo_GetOPFSettings( Self,unVideoAppID );
}

bool bbSteamAPI_ISteamVideo_GetOPFStringForApp( ISteamVideo * Self, AppId_t unVideoAppID, char * pchBuffer, int32 * pnBufferSize ){
  return SteamAPI_ISteamVideo_GetOPFStringForApp( Self,unVideoAppID,pchBuffer,pnBufferSize );
}

bool bbSteamAPI_ISteamTV_IsBroadcasting( ISteamTV * Self, int * pnNumViewers ){
  return SteamAPI_ISteamTV_IsBroadcasting( Self,pnNumViewers );
}

void bbSteamAPI_ISteamTV_AddBroadcastGameData( ISteamTV * Self, const char * pchKey, const char * pchValue ){
  SteamAPI_ISteamTV_AddBroadcastGameData( Self,pchKey,pchValue );
}

void bbSteamAPI_ISteamTV_RemoveBroadcastGameData( ISteamTV * Self, const char * pchKey ){
  SteamAPI_ISteamTV_RemoveBroadcastGameData( Self,pchKey );
}

void bbSteamAPI_ISteamTV_AddTimelineMarker( ISteamTV * Self, const char * pchTemplateName, bool bPersistent, uint8 nColorR, uint8 nColorG, uint8 nColorB ){
  SteamAPI_ISteamTV_AddTimelineMarker( Self,pchTemplateName,bPersistent,nColorR,nColorG,nColorB );
}

void bbSteamAPI_ISteamTV_RemoveTimelineMarker( ISteamTV * Self ){
  SteamAPI_ISteamTV_RemoveTimelineMarker( Self );
}

uint32 bbSteamAPI_ISteamTV_AddRegion( ISteamTV * Self, const char * pchElementName, const char * pchTimelineDataSection, const SteamTVRegion_t * pSteamTVRegion, ESteamTVRegionBehavior eSteamTVRegionBehavior ){
  return SteamAPI_ISteamTV_AddRegion( Self,pchElementName,pchTimelineDataSection,pSteamTVRegion,eSteamTVRegionBehavior );
}

void bbSteamAPI_ISteamTV_RemoveRegion( ISteamTV * Self, uint32 unRegionHandle ){
  SteamAPI_ISteamTV_RemoveRegion( Self,unRegionHandle );
}

bool bbSteamAPI_ISteamParentalSettings_BIsParentalLockEnabled( ISteamParentalSettings * Self ){
  return SteamAPI_ISteamParentalSettings_BIsParentalLockEnabled( Self );
}

bool bbSteamAPI_ISteamParentalSettings_BIsParentalLockLocked( ISteamParentalSettings * Self ){
  return SteamAPI_ISteamParentalSettings_BIsParentalLockLocked( Self );
}

bool bbSteamAPI_ISteamParentalSettings_BIsAppBlocked( ISteamParentalSettings * Self, AppId_t nAppID ){
  return SteamAPI_ISteamParentalSettings_BIsAppBlocked( Self,nAppID );
}

bool bbSteamAPI_ISteamParentalSettings_BIsAppInBlockList( ISteamParentalSettings * Self, AppId_t nAppID ){
  return SteamAPI_ISteamParentalSettings_BIsAppInBlockList( Self,nAppID );
}

bool bbSteamAPI_ISteamParentalSettings_BIsFeatureBlocked( ISteamParentalSettings * Self, EParentalFeature eFeature ){
  return SteamAPI_ISteamParentalSettings_BIsFeatureBlocked( Self,eFeature );
}

bool bbSteamAPI_ISteamParentalSettings_BIsFeatureInBlockList( ISteamParentalSettings * Self, EParentalFeature eFeature ){
  return SteamAPI_ISteamParentalSettings_BIsFeatureInBlockList( Self,eFeature );
}

uint32 bbSteamAPI_ISteamRemotePlay_GetSessionCount( ISteamRemotePlay * Self ){
  return SteamAPI_ISteamRemotePlay_GetSessionCount( Self );
}

RemotePlaySessionID_t bbSteamAPI_ISteamRemotePlay_GetSessionID( ISteamRemotePlay * Self, int iSessionIndex ){
  return SteamAPI_ISteamRemotePlay_GetSessionID( Self,iSessionIndex );
}

CSteamID bbSteamAPI_ISteamRemotePlay_GetSessionSteamID( ISteamRemotePlay * Self, RemotePlaySessionID_t unSessionID ){
  return SteamAPI_ISteamRemotePlay_GetSessionSteamID( Self,unSessionID );
}

const char * bbSteamAPI_ISteamRemotePlay_GetSessionClientName( ISteamRemotePlay * Self, RemotePlaySessionID_t unSessionID ){
  return SteamAPI_ISteamRemotePlay_GetSessionClientName( Self,unSessionID );
}

ESteamDeviceFormFactor bbSteamAPI_ISteamRemotePlay_GetSessionClientFormFactor( ISteamRemotePlay * Self, RemotePlaySessionID_t unSessionID ){
  return SteamAPI_ISteamRemotePlay_GetSessionClientFormFactor( Self,unSessionID );
}

bool bbSteamAPI_ISteamRemotePlay_BGetSessionClientResolution( ISteamRemotePlay * Self, RemotePlaySessionID_t unSessionID, int * pnResolutionX, int * pnResolutionY ){
  return SteamAPI_ISteamRemotePlay_BGetSessionClientResolution( Self,unSessionID,pnResolutionX,pnResolutionY );
}

bool bbSteamAPI_ISteamRemotePlay_BSendRemotePlayTogetherInvite( ISteamRemotePlay * Self, uint64_steamid steamIDFriend ){
  return SteamAPI_ISteamRemotePlay_BSendRemotePlayTogetherInvite( Self,steamIDFriend );
}

HSteamListenSocket bbSteamAPI_ISteamNetworkingSockets_CreateListenSocketIP( ISteamNetworkingSockets * Self, const SteamNetworkingIPAddr & localAddress, int nOptions, const SteamNetworkingConfigValue_t * pOptions ){
  return SteamAPI_ISteamNetworkingSockets_CreateListenSocketIP( Self,localAddress,nOptions,pOptions );
}

HSteamNetConnection bbSteamAPI_ISteamNetworkingSockets_ConnectByIPAddress( ISteamNetworkingSockets * Self, const SteamNetworkingIPAddr & address, int nOptions, const SteamNetworkingConfigValue_t * pOptions ){
  return SteamAPI_ISteamNetworkingSockets_ConnectByIPAddress( Self,address,nOptions,pOptions );
}

HSteamListenSocket bbSteamAPI_ISteamNetworkingSockets_CreateListenSocketP2P( ISteamNetworkingSockets * Self, int nVirtualPort, int nOptions, const SteamNetworkingConfigValue_t * pOptions ){
  return SteamAPI_ISteamNetworkingSockets_CreateListenSocketP2P( Self,nVirtualPort,nOptions,pOptions );
}

HSteamNetConnection bbSteamAPI_ISteamNetworkingSockets_ConnectP2P( ISteamNetworkingSockets * Self, const SteamNetworkingIdentity & identityRemote, int nVirtualPort, int nOptions, const SteamNetworkingConfigValue_t * pOptions ){
  return SteamAPI_ISteamNetworkingSockets_ConnectP2P( Self,identityRemote,nVirtualPort,nOptions,pOptions );
}

EResult bbSteamAPI_ISteamNetworkingSockets_AcceptConnection( ISteamNetworkingSockets * Self, HSteamNetConnection hConn ){
  return SteamAPI_ISteamNetworkingSockets_AcceptConnection( Self,hConn );
}

bool bbSteamAPI_ISteamNetworkingSockets_CloseConnection( ISteamNetworkingSockets * Self, HSteamNetConnection hPeer, int nReason, const char * pszDebug, bool bEnableLinger ){
  return SteamAPI_ISteamNetworkingSockets_CloseConnection( Self,hPeer,nReason,pszDebug,bEnableLinger );
}

bool bbSteamAPI_ISteamNetworkingSockets_CloseListenSocket( ISteamNetworkingSockets * Self, HSteamListenSocket hSocket ){
  return SteamAPI_ISteamNetworkingSockets_CloseListenSocket( Self,hSocket );
}

bool bbSteamAPI_ISteamNetworkingSockets_SetConnectionUserData( ISteamNetworkingSockets * Self, HSteamNetConnection hPeer, int64 nUserData ){
  return SteamAPI_ISteamNetworkingSockets_SetConnectionUserData( Self,hPeer,nUserData );
}

int64 bbSteamAPI_ISteamNetworkingSockets_GetConnectionUserData( ISteamNetworkingSockets * Self, HSteamNetConnection hPeer ){
  return SteamAPI_ISteamNetworkingSockets_GetConnectionUserData( Self,hPeer );
}

void bbSteamAPI_ISteamNetworkingSockets_SetConnectionName( ISteamNetworkingSockets * Self, HSteamNetConnection hPeer, const char * pszName ){
  SteamAPI_ISteamNetworkingSockets_SetConnectionName( Self,hPeer,pszName );
}

bool bbSteamAPI_ISteamNetworkingSockets_GetConnectionName( ISteamNetworkingSockets * Self, HSteamNetConnection hPeer, char * pszName, int nMaxLen ){
  return SteamAPI_ISteamNetworkingSockets_GetConnectionName( Self,hPeer,pszName,nMaxLen );
}

EResult bbSteamAPI_ISteamNetworkingSockets_SendMessageToConnection( ISteamNetworkingSockets * Self, HSteamNetConnection hConn, const void * pData, uint32 cbData, int nSendFlags, int64 * pOutMessageNumber ){
  return SteamAPI_ISteamNetworkingSockets_SendMessageToConnection( Self,hConn,pData,cbData,nSendFlags,pOutMessageNumber );
}

void bbSteamAPI_ISteamNetworkingSockets_SendMessages( ISteamNetworkingSockets * Self, int nMessages, SteamNetworkingMessage_t *const * pMessages, int64 * pOutMessageNumberOrResult ){
  SteamAPI_ISteamNetworkingSockets_SendMessages( Self,nMessages,pMessages,pOutMessageNumberOrResult );
}

EResult bbSteamAPI_ISteamNetworkingSockets_FlushMessagesOnConnection( ISteamNetworkingSockets * Self, HSteamNetConnection hConn ){
  return SteamAPI_ISteamNetworkingSockets_FlushMessagesOnConnection( Self,hConn );
}

int bbSteamAPI_ISteamNetworkingSockets_ReceiveMessagesOnConnection( ISteamNetworkingSockets * Self, HSteamNetConnection hConn, SteamNetworkingMessage_t ** ppOutMessages, int nMaxMessages ){
  return SteamAPI_ISteamNetworkingSockets_ReceiveMessagesOnConnection( Self,hConn,ppOutMessages,nMaxMessages );
}

bool bbSteamAPI_ISteamNetworkingSockets_GetConnectionInfo( ISteamNetworkingSockets * Self, HSteamNetConnection hConn, SteamNetConnectionInfo_t * pInfo ){
  return SteamAPI_ISteamNetworkingSockets_GetConnectionInfo( Self,hConn,pInfo );
}

bool bbSteamAPI_ISteamNetworkingSockets_GetQuickConnectionStatus( ISteamNetworkingSockets * Self, HSteamNetConnection hConn, SteamNetworkingQuickConnectionStatus * pStats ){
  return SteamAPI_ISteamNetworkingSockets_GetQuickConnectionStatus( Self,hConn,pStats );
}

int bbSteamAPI_ISteamNetworkingSockets_GetDetailedConnectionStatus( ISteamNetworkingSockets * Self, HSteamNetConnection hConn, char * pszBuf, int cbBuf ){
  return SteamAPI_ISteamNetworkingSockets_GetDetailedConnectionStatus( Self,hConn,pszBuf,cbBuf );
}

bool bbSteamAPI_ISteamNetworkingSockets_GetListenSocketAddress( ISteamNetworkingSockets * Self, HSteamListenSocket hSocket, SteamNetworkingIPAddr * address ){
  return SteamAPI_ISteamNetworkingSockets_GetListenSocketAddress( Self,hSocket,address );
}

bool bbSteamAPI_ISteamNetworkingSockets_CreateSocketPair( ISteamNetworkingSockets * Self, HSteamNetConnection * pOutConnection1, HSteamNetConnection * pOutConnection2, bool bUseNetworkLoopback, const SteamNetworkingIdentity * pIdentity1, const SteamNetworkingIdentity * pIdentity2 ){
  return SteamAPI_ISteamNetworkingSockets_CreateSocketPair( Self,pOutConnection1,pOutConnection2,bUseNetworkLoopback,pIdentity1,pIdentity2 );
}

bool bbSteamAPI_ISteamNetworkingSockets_GetIdentity( ISteamNetworkingSockets * Self, SteamNetworkingIdentity * pIdentity ){
  return SteamAPI_ISteamNetworkingSockets_GetIdentity( Self,pIdentity );
}

ESteamNetworkingAvailability bbSteamAPI_ISteamNetworkingSockets_InitAuthentication( ISteamNetworkingSockets * Self ){
  return SteamAPI_ISteamNetworkingSockets_InitAuthentication( Self );
}

ESteamNetworkingAvailability bbSteamAPI_ISteamNetworkingSockets_GetAuthenticationStatus( ISteamNetworkingSockets * Self, SteamNetAuthenticationStatus_t * pDetails ){
  return SteamAPI_ISteamNetworkingSockets_GetAuthenticationStatus( Self,pDetails );
}

HSteamNetPollGroup bbSteamAPI_ISteamNetworkingSockets_CreatePollGroup( ISteamNetworkingSockets * Self ){
  return SteamAPI_ISteamNetworkingSockets_CreatePollGroup( Self );
}

bool bbSteamAPI_ISteamNetworkingSockets_DestroyPollGroup( ISteamNetworkingSockets * Self, HSteamNetPollGroup hPollGroup ){
  return SteamAPI_ISteamNetworkingSockets_DestroyPollGroup( Self,hPollGroup );
}

bool bbSteamAPI_ISteamNetworkingSockets_SetConnectionPollGroup( ISteamNetworkingSockets * Self, HSteamNetConnection hConn, HSteamNetPollGroup hPollGroup ){
  return SteamAPI_ISteamNetworkingSockets_SetConnectionPollGroup( Self,hConn,hPollGroup );
}

int bbSteamAPI_ISteamNetworkingSockets_ReceiveMessagesOnPollGroup( ISteamNetworkingSockets * Self, HSteamNetPollGroup hPollGroup, SteamNetworkingMessage_t ** ppOutMessages, int nMaxMessages ){
  return SteamAPI_ISteamNetworkingSockets_ReceiveMessagesOnPollGroup( Self,hPollGroup,ppOutMessages,nMaxMessages );
}

bool bbSteamAPI_ISteamNetworkingSockets_ReceivedRelayAuthTicket( ISteamNetworkingSockets * Self, const void * pvTicket, int cbTicket, SteamDatagramRelayAuthTicket * pOutParsedTicket ){
  return SteamAPI_ISteamNetworkingSockets_ReceivedRelayAuthTicket( Self,pvTicket,cbTicket,pOutParsedTicket );
}

int bbSteamAPI_ISteamNetworkingSockets_FindRelayAuthTicketForServer( ISteamNetworkingSockets * Self, const SteamNetworkingIdentity & identityGameServer, int nVirtualPort, SteamDatagramRelayAuthTicket * pOutParsedTicket ){
  return SteamAPI_ISteamNetworkingSockets_FindRelayAuthTicketForServer( Self,identityGameServer,nVirtualPort,pOutParsedTicket );
}

HSteamNetConnection bbSteamAPI_ISteamNetworkingSockets_ConnectToHostedDedicatedServer( ISteamNetworkingSockets * Self, const SteamNetworkingIdentity & identityTarget, int nVirtualPort, int nOptions, const SteamNetworkingConfigValue_t * pOptions ){
  return SteamAPI_ISteamNetworkingSockets_ConnectToHostedDedicatedServer( Self,identityTarget,nVirtualPort,nOptions,pOptions );
}

uint16 bbSteamAPI_ISteamNetworkingSockets_GetHostedDedicatedServerPort( ISteamNetworkingSockets * Self ){
  return SteamAPI_ISteamNetworkingSockets_GetHostedDedicatedServerPort( Self );
}

SteamNetworkingPOPID bbSteamAPI_ISteamNetworkingSockets_GetHostedDedicatedServerPOPID( ISteamNetworkingSockets * Self ){
  return SteamAPI_ISteamNetworkingSockets_GetHostedDedicatedServerPOPID( Self );
}

EResult bbSteamAPI_ISteamNetworkingSockets_GetHostedDedicatedServerAddress( ISteamNetworkingSockets * Self, SteamDatagramHostedAddress * pRouting ){
  return SteamAPI_ISteamNetworkingSockets_GetHostedDedicatedServerAddress( Self,pRouting );
}

HSteamListenSocket bbSteamAPI_ISteamNetworkingSockets_CreateHostedDedicatedServerListenSocket( ISteamNetworkingSockets * Self, int nVirtualPort, int nOptions, const SteamNetworkingConfigValue_t * pOptions ){
  return SteamAPI_ISteamNetworkingSockets_CreateHostedDedicatedServerListenSocket( Self,nVirtualPort,nOptions,pOptions );
}

EResult bbSteamAPI_ISteamNetworkingSockets_GetGameCoordinatorServerLogin( ISteamNetworkingSockets * Self, SteamDatagramGameCoordinatorServerLogin * pLoginInfo, int * pcbSignedBlob, void * pBlob ){
  return SteamAPI_ISteamNetworkingSockets_GetGameCoordinatorServerLogin( Self,pLoginInfo,pcbSignedBlob,pBlob );
}

HSteamNetConnection bbSteamAPI_ISteamNetworkingSockets_ConnectP2PCustomSignaling( ISteamNetworkingSockets * Self, ISteamNetworkingConnectionCustomSignaling * pSignaling, const SteamNetworkingIdentity * pPeerIdentity, int nOptions, const SteamNetworkingConfigValue_t * pOptions ){
  return SteamAPI_ISteamNetworkingSockets_ConnectP2PCustomSignaling( Self,pSignaling,pPeerIdentity,nOptions,pOptions );
}

bool bbSteamAPI_ISteamNetworkingSockets_ReceivedP2PCustomSignal( ISteamNetworkingSockets * Self, const void * pMsg, int cbMsg, ISteamNetworkingCustomSignalingRecvContext * pContext ){
  return SteamAPI_ISteamNetworkingSockets_ReceivedP2PCustomSignal( Self,pMsg,cbMsg,pContext );
}

bool bbSteamAPI_ISteamNetworkingSockets_GetCertificateRequest( ISteamNetworkingSockets * Self, int * pcbBlob, void * pBlob, SteamNetworkingErrMsg & errMsg ){
  return SteamAPI_ISteamNetworkingSockets_GetCertificateRequest( Self,pcbBlob,pBlob,errMsg );
}

bool bbSteamAPI_ISteamNetworkingSockets_SetCertificate( ISteamNetworkingSockets * Self, const void * pCertificate, int cbCertificate, SteamNetworkingErrMsg & errMsg ){
  return SteamAPI_ISteamNetworkingSockets_SetCertificate( Self,pCertificate,cbCertificate,errMsg );
}

bool bbSteamAPI_ISteamNetworkingConnectionCustomSignaling_SendSignal( ISteamNetworkingConnectionCustomSignaling * Self, HSteamNetConnection hConn, const SteamNetConnectionInfo_t & info, const void * pMsg, int cbMsg ){
  return SteamAPI_ISteamNetworkingConnectionCustomSignaling_SendSignal( Self,hConn,info,pMsg,cbMsg );
}

void bbSteamAPI_ISteamNetworkingConnectionCustomSignaling_Release( ISteamNetworkingConnectionCustomSignaling * Self ){
  SteamAPI_ISteamNetworkingConnectionCustomSignaling_Release( Self );
}

ISteamNetworkingConnectionCustomSignaling * bbSteamAPI_ISteamNetworkingCustomSignalingRecvContext_OnConnectRequest( ISteamNetworkingCustomSignalingRecvContext * Self, HSteamNetConnection hConn, const SteamNetworkingIdentity & identityPeer ){
  return SteamAPI_ISteamNetworkingCustomSignalingRecvContext_OnConnectRequest( Self,hConn,identityPeer );
}

void bbSteamAPI_ISteamNetworkingCustomSignalingRecvContext_SendRejectionSignal( ISteamNetworkingCustomSignalingRecvContext * Self, const SteamNetworkingIdentity & identityPeer, const void * pMsg, int cbMsg ){
  SteamAPI_ISteamNetworkingCustomSignalingRecvContext_SendRejectionSignal( Self,identityPeer,pMsg,cbMsg );
}

SteamNetworkingMessage_t * bbSteamAPI_ISteamNetworkingUtils_AllocateMessage( ISteamNetworkingUtils * Self, int cbAllocateBuffer ){
  return SteamAPI_ISteamNetworkingUtils_AllocateMessage( Self,cbAllocateBuffer );
}

void bbSteamAPI_ISteamNetworkingUtils_InitRelayNetworkAccess( ISteamNetworkingUtils * Self ){
  SteamAPI_ISteamNetworkingUtils_InitRelayNetworkAccess( Self );
}

ESteamNetworkingAvailability bbSteamAPI_ISteamNetworkingUtils_GetRelayNetworkStatus( ISteamNetworkingUtils * Self, SteamRelayNetworkStatus_t * pDetails ){
  return SteamAPI_ISteamNetworkingUtils_GetRelayNetworkStatus( Self,pDetails );
}

float bbSteamAPI_ISteamNetworkingUtils_GetLocalPingLocation( ISteamNetworkingUtils * Self, SteamNetworkPingLocation_t & result ){
  return SteamAPI_ISteamNetworkingUtils_GetLocalPingLocation( Self,result );
}

int bbSteamAPI_ISteamNetworkingUtils_EstimatePingTimeBetweenTwoLocations( ISteamNetworkingUtils * Self, const SteamNetworkPingLocation_t & location1, const SteamNetworkPingLocation_t & location2 ){
  return SteamAPI_ISteamNetworkingUtils_EstimatePingTimeBetweenTwoLocations( Self,location1,location2 );
}

int bbSteamAPI_ISteamNetworkingUtils_EstimatePingTimeFromLocalHost( ISteamNetworkingUtils * Self, const SteamNetworkPingLocation_t & remoteLocation ){
  return SteamAPI_ISteamNetworkingUtils_EstimatePingTimeFromLocalHost( Self,remoteLocation );
}

void bbSteamAPI_ISteamNetworkingUtils_ConvertPingLocationToString( ISteamNetworkingUtils * Self, const SteamNetworkPingLocation_t & location, char * pszBuf, int cchBufSize ){
  SteamAPI_ISteamNetworkingUtils_ConvertPingLocationToString( Self,location,pszBuf,cchBufSize );
}

bool bbSteamAPI_ISteamNetworkingUtils_ParsePingLocationString( ISteamNetworkingUtils * Self, const char * pszString, SteamNetworkPingLocation_t & result ){
  return SteamAPI_ISteamNetworkingUtils_ParsePingLocationString( Self,pszString,result );
}

bool bbSteamAPI_ISteamNetworkingUtils_CheckPingDataUpToDate( ISteamNetworkingUtils * Self, float flMaxAgeSeconds ){
  return SteamAPI_ISteamNetworkingUtils_CheckPingDataUpToDate( Self,flMaxAgeSeconds );
}

int bbSteamAPI_ISteamNetworkingUtils_GetPingToDataCenter( ISteamNetworkingUtils * Self, SteamNetworkingPOPID popID, SteamNetworkingPOPID * pViaRelayPoP ){
  return SteamAPI_ISteamNetworkingUtils_GetPingToDataCenter( Self,popID,pViaRelayPoP );
}

int bbSteamAPI_ISteamNetworkingUtils_GetDirectPingToPOP( ISteamNetworkingUtils * Self, SteamNetworkingPOPID popID ){
  return SteamAPI_ISteamNetworkingUtils_GetDirectPingToPOP( Self,popID );
}

int bbSteamAPI_ISteamNetworkingUtils_GetPOPCount( ISteamNetworkingUtils * Self ){
  return SteamAPI_ISteamNetworkingUtils_GetPOPCount( Self );
}

int bbSteamAPI_ISteamNetworkingUtils_GetPOPList( ISteamNetworkingUtils * Self, SteamNetworkingPOPID * list, int nListSz ){
  return SteamAPI_ISteamNetworkingUtils_GetPOPList( Self,list,nListSz );
}

SteamNetworkingMicroseconds bbSteamAPI_ISteamNetworkingUtils_GetLocalTimestamp( ISteamNetworkingUtils * Self ){
  return SteamAPI_ISteamNetworkingUtils_GetLocalTimestamp( Self );
}

void bbSteamAPI_ISteamNetworkingUtils_SetDebugOutputFunction( ISteamNetworkingUtils * Self, ESteamNetworkingSocketsDebugOutputType eDetailLevel, FSteamNetworkingSocketsDebugOutput pfnFunc ){
  SteamAPI_ISteamNetworkingUtils_SetDebugOutputFunction( Self,eDetailLevel,pfnFunc );
}

bool bbSteamAPI_ISteamNetworkingUtils_SetGlobalConfigValueInt32( ISteamNetworkingUtils * Self, ESteamNetworkingConfigValue eValue, int32 val ){
  return SteamAPI_ISteamNetworkingUtils_SetGlobalConfigValueInt32( Self,eValue,val );
}

bool bbSteamAPI_ISteamNetworkingUtils_SetGlobalConfigValueFloat( ISteamNetworkingUtils * Self, ESteamNetworkingConfigValue eValue, float val ){
  return SteamAPI_ISteamNetworkingUtils_SetGlobalConfigValueFloat( Self,eValue,val );
}

bool bbSteamAPI_ISteamNetworkingUtils_SetGlobalConfigValueString( ISteamNetworkingUtils * Self, ESteamNetworkingConfigValue eValue, const char * val ){
  return SteamAPI_ISteamNetworkingUtils_SetGlobalConfigValueString( Self,eValue,val );
}

bool bbSteamAPI_ISteamNetworkingUtils_SetConnectionConfigValueInt32( ISteamNetworkingUtils * Self, HSteamNetConnection hConn, ESteamNetworkingConfigValue eValue, int32 val ){
  return SteamAPI_ISteamNetworkingUtils_SetConnectionConfigValueInt32( Self,hConn,eValue,val );
}

bool bbSteamAPI_ISteamNetworkingUtils_SetConnectionConfigValueFloat( ISteamNetworkingUtils * Self, HSteamNetConnection hConn, ESteamNetworkingConfigValue eValue, float val ){
  return SteamAPI_ISteamNetworkingUtils_SetConnectionConfigValueFloat( Self,hConn,eValue,val );
}

bool bbSteamAPI_ISteamNetworkingUtils_SetConnectionConfigValueString( ISteamNetworkingUtils * Self, HSteamNetConnection hConn, ESteamNetworkingConfigValue eValue, const char * val ){
  return SteamAPI_ISteamNetworkingUtils_SetConnectionConfigValueString( Self,hConn,eValue,val );
}

bool bbSteamAPI_ISteamNetworkingUtils_SetConfigValue( ISteamNetworkingUtils * Self, ESteamNetworkingConfigValue eValue, ESteamNetworkingConfigScope eScopeType, intptr_t scopeObj, ESteamNetworkingConfigDataType eDataType, const void * pArg ){
  return SteamAPI_ISteamNetworkingUtils_SetConfigValue( Self,eValue,eScopeType,scopeObj,eDataType,pArg );
}

bool bbSteamAPI_ISteamNetworkingUtils_SetConfigValueStruct( ISteamNetworkingUtils * Self, const SteamNetworkingConfigValue_t & opt, ESteamNetworkingConfigScope eScopeType, intptr_t scopeObj ){
  return SteamAPI_ISteamNetworkingUtils_SetConfigValueStruct( Self,opt,eScopeType,scopeObj );
}

ESteamNetworkingGetConfigValueResult bbSteamAPI_ISteamNetworkingUtils_GetConfigValue( ISteamNetworkingUtils * Self, ESteamNetworkingConfigValue eValue, ESteamNetworkingConfigScope eScopeType, intptr_t scopeObj, ESteamNetworkingConfigDataType * pOutDataType, void * pResult, size_t * cbResult ){
  return SteamAPI_ISteamNetworkingUtils_GetConfigValue( Self,eValue,eScopeType,scopeObj,pOutDataType,pResult,cbResult );
}

bool bbSteamAPI_ISteamNetworkingUtils_GetConfigValueInfo( ISteamNetworkingUtils * Self, ESteamNetworkingConfigValue eValue, const char ** pOutName, ESteamNetworkingConfigDataType * pOutDataType, ESteamNetworkingConfigScope * pOutScope, ESteamNetworkingConfigValue * pOutNextValue ){
  return SteamAPI_ISteamNetworkingUtils_GetConfigValueInfo( Self,eValue,pOutName,pOutDataType,pOutScope,pOutNextValue );
}

ESteamNetworkingConfigValue bbSteamAPI_ISteamNetworkingUtils_GetFirstConfigValue( ISteamNetworkingUtils * Self ){
  return SteamAPI_ISteamNetworkingUtils_GetFirstConfigValue( Self );
}

void bbSteamAPI_ISteamNetworkingUtils_SteamNetworkingIPAddr_ToString( ISteamNetworkingUtils * Self, const SteamNetworkingIPAddr & addr, char * buf, uint32 cbBuf, bool bWithPort ){
  SteamAPI_ISteamNetworkingUtils_SteamNetworkingIPAddr_ToString( Self,addr,buf,cbBuf,bWithPort );
}

bool bbSteamAPI_ISteamNetworkingUtils_SteamNetworkingIPAddr_ParseString( ISteamNetworkingUtils * Self, SteamNetworkingIPAddr * pAddr, const char * pszStr ){
  return SteamAPI_ISteamNetworkingUtils_SteamNetworkingIPAddr_ParseString( Self,pAddr,pszStr );
}

void bbSteamAPI_ISteamNetworkingUtils_SteamNetworkingIdentity_ToString( ISteamNetworkingUtils * Self, const SteamNetworkingIdentity & identity, char * buf, uint32 cbBuf ){
  SteamAPI_ISteamNetworkingUtils_SteamNetworkingIdentity_ToString( Self,identity,buf,cbBuf );
}

bool bbSteamAPI_ISteamNetworkingUtils_SteamNetworkingIdentity_ParseString( ISteamNetworkingUtils * Self, SteamNetworkingIdentity * pIdentity, const char * pszStr ){
  return SteamAPI_ISteamNetworkingUtils_SteamNetworkingIdentity_ParseString( Self,pIdentity,pszStr );
}

void bbSteamAPI_ISteamGameServer_SetProduct( ISteamGameServer * Self, const char * pszProduct ){
  SteamAPI_ISteamGameServer_SetProduct( Self,pszProduct );
}

void bbSteamAPI_ISteamGameServer_SetGameDescription( ISteamGameServer * Self, const char * pszGameDescription ){
  SteamAPI_ISteamGameServer_SetGameDescription( Self,pszGameDescription );
}

void bbSteamAPI_ISteamGameServer_SetModDir( ISteamGameServer * Self, const char * pszModDir ){
  SteamAPI_ISteamGameServer_SetModDir( Self,pszModDir );
}

void bbSteamAPI_ISteamGameServer_SetDedicatedServer( ISteamGameServer * Self, bool bDedicated ){
  SteamAPI_ISteamGameServer_SetDedicatedServer( Self,bDedicated );
}

void bbSteamAPI_ISteamGameServer_LogOn( ISteamGameServer * Self, const char * pszToken ){
  SteamAPI_ISteamGameServer_LogOn( Self,pszToken );
}

void bbSteamAPI_ISteamGameServer_LogOnAnonymous( ISteamGameServer * Self ){
  SteamAPI_ISteamGameServer_LogOnAnonymous( Self );
}

void bbSteamAPI_ISteamGameServer_LogOff( ISteamGameServer * Self ){
  SteamAPI_ISteamGameServer_LogOff( Self );
}

bool bbSteamAPI_ISteamGameServer_BLoggedOn( ISteamGameServer * Self ){
  return SteamAPI_ISteamGameServer_BLoggedOn( Self );
}

bool bbSteamAPI_ISteamGameServer_BSecure( ISteamGameServer * Self ){
  return SteamAPI_ISteamGameServer_BSecure( Self );
}

CSteamID bbSteamAPI_ISteamGameServer_GetSteamID( ISteamGameServer * Self ){
  return SteamAPI_ISteamGameServer_GetSteamID( Self );
}

bool bbSteamAPI_ISteamGameServer_WasRestartRequested( ISteamGameServer * Self ){
  return SteamAPI_ISteamGameServer_WasRestartRequested( Self );
}

void bbSteamAPI_ISteamGameServer_SetMaxPlayerCount( ISteamGameServer * Self, int cPlayersMax ){
  SteamAPI_ISteamGameServer_SetMaxPlayerCount( Self,cPlayersMax );
}

void bbSteamAPI_ISteamGameServer_SetBotPlayerCount( ISteamGameServer * Self, int cBotplayers ){
  SteamAPI_ISteamGameServer_SetBotPlayerCount( Self,cBotplayers );
}

void bbSteamAPI_ISteamGameServer_SetServerName( ISteamGameServer * Self, const char * pszServerName ){
  SteamAPI_ISteamGameServer_SetServerName( Self,pszServerName );
}

void bbSteamAPI_ISteamGameServer_SetMapName( ISteamGameServer * Self, const char * pszMapName ){
  SteamAPI_ISteamGameServer_SetMapName( Self,pszMapName );
}

void bbSteamAPI_ISteamGameServer_SetPasswordProtected( ISteamGameServer * Self, bool bPasswordProtected ){
  SteamAPI_ISteamGameServer_SetPasswordProtected( Self,bPasswordProtected );
}

void bbSteamAPI_ISteamGameServer_SetSpectatorPort( ISteamGameServer * Self, uint16 unSpectatorPort ){
  SteamAPI_ISteamGameServer_SetSpectatorPort( Self,unSpectatorPort );
}

void bbSteamAPI_ISteamGameServer_SetSpectatorServerName( ISteamGameServer * Self, const char * pszSpectatorServerName ){
  SteamAPI_ISteamGameServer_SetSpectatorServerName( Self,pszSpectatorServerName );
}

void bbSteamAPI_ISteamGameServer_ClearAllKeyValues( ISteamGameServer * Self ){
  SteamAPI_ISteamGameServer_ClearAllKeyValues( Self );
}

void bbSteamAPI_ISteamGameServer_SetKeyValue( ISteamGameServer * Self, const char * pKey, const char * pValue ){
  SteamAPI_ISteamGameServer_SetKeyValue( Self,pKey,pValue );
}

void bbSteamAPI_ISteamGameServer_SetGameTags( ISteamGameServer * Self, const char * pchGameTags ){
  SteamAPI_ISteamGameServer_SetGameTags( Self,pchGameTags );
}

void bbSteamAPI_ISteamGameServer_SetGameData( ISteamGameServer * Self, const char * pchGameData ){
  SteamAPI_ISteamGameServer_SetGameData( Self,pchGameData );
}

void bbSteamAPI_ISteamGameServer_SetRegion( ISteamGameServer * Self, const char * pszRegion ){
  SteamAPI_ISteamGameServer_SetRegion( Self,pszRegion );
}

bool bbSteamAPI_ISteamGameServer_SendUserConnectAndAuthenticate( ISteamGameServer * Self, uint32 unIPClient, const void * pvAuthBlob, uint32 cubAuthBlobSize, CSteamID * pSteamIDUser ){
  return SteamAPI_ISteamGameServer_SendUserConnectAndAuthenticate( Self,unIPClient,pvAuthBlob,cubAuthBlobSize,pSteamIDUser );
}

CSteamID bbSteamAPI_ISteamGameServer_CreateUnauthenticatedUserConnection( ISteamGameServer * Self ){
  return SteamAPI_ISteamGameServer_CreateUnauthenticatedUserConnection( Self );
}

void bbSteamAPI_ISteamGameServer_SendUserDisconnect( ISteamGameServer * Self, uint64_steamid steamIDUser ){
  SteamAPI_ISteamGameServer_SendUserDisconnect( Self,steamIDUser );
}

bool bbSteamAPI_ISteamGameServer_BUpdateUserData( ISteamGameServer * Self, uint64_steamid steamIDUser, const char * pchPlayerName, uint32 uScore ){
  return SteamAPI_ISteamGameServer_BUpdateUserData( Self,steamIDUser,pchPlayerName,uScore );
}

HAuthTicket bbSteamAPI_ISteamGameServer_GetAuthSessionTicket( ISteamGameServer * Self, void * pTicket, int cbMaxTicket, uint32 * pcbTicket ){
  return SteamAPI_ISteamGameServer_GetAuthSessionTicket( Self,pTicket,cbMaxTicket,pcbTicket );
}

EBeginAuthSessionResult bbSteamAPI_ISteamGameServer_BeginAuthSession( ISteamGameServer * Self, const void * pAuthTicket, int cbAuthTicket, uint64_steamid steamID ){
  return SteamAPI_ISteamGameServer_BeginAuthSession( Self,pAuthTicket,cbAuthTicket,steamID );
}

void bbSteamAPI_ISteamGameServer_EndAuthSession( ISteamGameServer * Self, uint64_steamid steamID ){
  SteamAPI_ISteamGameServer_EndAuthSession( Self,steamID );
}

void bbSteamAPI_ISteamGameServer_CancelAuthTicket( ISteamGameServer * Self, HAuthTicket hAuthTicket ){
  SteamAPI_ISteamGameServer_CancelAuthTicket( Self,hAuthTicket );
}

EUserHasLicenseForAppResult bbSteamAPI_ISteamGameServer_UserHasLicenseForApp( ISteamGameServer * Self, uint64_steamid steamID, AppId_t appID ){
  return SteamAPI_ISteamGameServer_UserHasLicenseForApp( Self,steamID,appID );
}

bool bbSteamAPI_ISteamGameServer_RequestUserGroupStatus( ISteamGameServer * Self, uint64_steamid steamIDUser, uint64_steamid steamIDGroup ){
  return SteamAPI_ISteamGameServer_RequestUserGroupStatus( Self,steamIDUser,steamIDGroup );
}

void bbSteamAPI_ISteamGameServer_GetGameplayStats( ISteamGameServer * Self ){
  SteamAPI_ISteamGameServer_GetGameplayStats( Self );
}

SteamAPICall_t bbSteamAPI_ISteamGameServer_GetServerReputation( ISteamGameServer * Self ){
  return SteamAPI_ISteamGameServer_GetServerReputation( Self );
}

SteamIPAddress_t bbSteamAPI_ISteamGameServer_GetPublicIP( ISteamGameServer * Self ){
  return SteamAPI_ISteamGameServer_GetPublicIP( Self );
}

bool bbSteamAPI_ISteamGameServer_HandleIncomingPacket( ISteamGameServer * Self, const void * pData, int cbData, uint32 srcIP, uint16 srcPort ){
  return SteamAPI_ISteamGameServer_HandleIncomingPacket( Self,pData,cbData,srcIP,srcPort );
}

int bbSteamAPI_ISteamGameServer_GetNextOutgoingPacket( ISteamGameServer * Self, void * pOut, int cbMaxOut, uint32 * pNetAdr, uint16 * pPort ){
  return SteamAPI_ISteamGameServer_GetNextOutgoingPacket( Self,pOut,cbMaxOut,pNetAdr,pPort );
}

void bbSteamAPI_ISteamGameServer_EnableHeartbeats( ISteamGameServer * Self, bool bActive ){
  SteamAPI_ISteamGameServer_EnableHeartbeats( Self,bActive );
}

void bbSteamAPI_ISteamGameServer_SetHeartbeatInterval( ISteamGameServer * Self, int iHeartbeatInterval ){
  SteamAPI_ISteamGameServer_SetHeartbeatInterval( Self,iHeartbeatInterval );
}

void bbSteamAPI_ISteamGameServer_ForceHeartbeat( ISteamGameServer * Self ){
  SteamAPI_ISteamGameServer_ForceHeartbeat( Self );
}

SteamAPICall_t bbSteamAPI_ISteamGameServer_AssociateWithClan( ISteamGameServer * Self, uint64_steamid steamIDClan ){
  return SteamAPI_ISteamGameServer_AssociateWithClan( Self,steamIDClan );
}

SteamAPICall_t bbSteamAPI_ISteamGameServer_ComputeNewPlayerCompatibility( ISteamGameServer * Self, uint64_steamid steamIDNewPlayer ){
  return SteamAPI_ISteamGameServer_ComputeNewPlayerCompatibility( Self,steamIDNewPlayer );
}

SteamAPICall_t bbSteamAPI_ISteamGameServerStats_RequestUserStats( ISteamGameServerStats * Self, uint64_steamid steamIDUser ){
  return SteamAPI_ISteamGameServerStats_RequestUserStats( Self,steamIDUser );
}

bool bbSteamAPI_ISteamGameServerStats_GetUserStatInt32( ISteamGameServerStats * Self, uint64_steamid steamIDUser, const char * pchName, int32 * pData ){
  return SteamAPI_ISteamGameServerStats_GetUserStatInt32( Self,steamIDUser,pchName,pData );
}

bool bbSteamAPI_ISteamGameServerStats_GetUserStatFloat( ISteamGameServerStats * Self, uint64_steamid steamIDUser, const char * pchName, float * pData ){
  return SteamAPI_ISteamGameServerStats_GetUserStatFloat( Self,steamIDUser,pchName,pData );
}

bool bbSteamAPI_ISteamGameServerStats_GetUserAchievement( ISteamGameServerStats * Self, uint64_steamid steamIDUser, const char * pchName, bool * pbAchieved ){
  return SteamAPI_ISteamGameServerStats_GetUserAchievement( Self,steamIDUser,pchName,pbAchieved );
}

bool bbSteamAPI_ISteamGameServerStats_SetUserStatInt32( ISteamGameServerStats * Self, uint64_steamid steamIDUser, const char * pchName, int32 nData ){
  return SteamAPI_ISteamGameServerStats_SetUserStatInt32( Self,steamIDUser,pchName,nData );
}

bool bbSteamAPI_ISteamGameServerStats_SetUserStatFloat( ISteamGameServerStats * Self, uint64_steamid steamIDUser, const char * pchName, float fData ){
  return SteamAPI_ISteamGameServerStats_SetUserStatFloat( Self,steamIDUser,pchName,fData );
}

bool bbSteamAPI_ISteamGameServerStats_UpdateUserAvgRateStat( ISteamGameServerStats * Self, uint64_steamid steamIDUser, const char * pchName, float flCountThisSession, double dSessionLength ){
  return SteamAPI_ISteamGameServerStats_UpdateUserAvgRateStat( Self,steamIDUser,pchName,flCountThisSession,dSessionLength );
}

bool bbSteamAPI_ISteamGameServerStats_SetUserAchievement( ISteamGameServerStats * Self, uint64_steamid steamIDUser, const char * pchName ){
  return SteamAPI_ISteamGameServerStats_SetUserAchievement( Self,steamIDUser,pchName );
}

bool bbSteamAPI_ISteamGameServerStats_ClearUserAchievement( ISteamGameServerStats * Self, uint64_steamid steamIDUser, const char * pchName ){
  return SteamAPI_ISteamGameServerStats_ClearUserAchievement( Self,steamIDUser,pchName );
}

SteamAPICall_t bbSteamAPI_ISteamGameServerStats_StoreUserStats( ISteamGameServerStats * Self, uint64_steamid steamIDUser ){
  return SteamAPI_ISteamGameServerStats_StoreUserStats( Self,steamIDUser );
}

