##
# Regenerates bindings.cpp and module.yml.

require 'json'
require 'yaml'

STEAMWORKS_DIR = File.expand_path('../../../../deps/steamworks/sdk', __dir__)

bindings_path = File.expand_path('bindings.cpp', __dir__)
yml_path = File.expand_path('module.yml', __dir__)

header = JSON.parse(File.open(File.join(STEAMWORKS_DIR, 'public/steam/steam_api.json')).read)

commands = []

def c_to_bb(type)
  type
end

File.open(bindings_path, 'w') do |f|
  f.write "// AUTOGENERATED. DO NOT EDIT.\n"
  f.write "// RUN `ruby src/modules/bb/steamworks/generate.rb` TO UPDATE.\n\n"

  f.write "typedef long long CSteamID;\n\n"
  f.write "typedef long long CGameID;\n\n"

  header['typedefs'].each do |typedef|
    f.write "typedef #{typedef['type']} #{typedef['typedef']};\n"
  end

  header['enums'].each do |enum|
    f.write "enum #{enum['enumname']}{"
    f.write "};\n\n"
  end

  header['structs'].each do |struct|
    f.write "struct #{struct['struct']}{"
    f.write "};\n\n"
  end

  header['interfaces'].each do |iface|
    f.write "class #{iface['classname']};\n"

    iface['methods'].each do |method|
      ident = method['methodname_flat']
      symbol = "bb#{ident}"

      params = method['params'].map do |param|
        {
          name: param['paramname'],
          c_type: param['paramtype'],
          bb_type: c_to_bb(param['paramtype'])
        }
      end

      commands << %(#{ident}(#{params.map { |p| "#{p[:name]}#{p[:bb_type]}" }.join(', ')}):"#{symbol}")

      f.write "void #{symbol}(#{params.map { |p| "#{p[:c_type]} #{p[:name]}" }.join(', ')}){\n"
      f.write "}\n\n"
    end
  end
end


mod = {
  'name' => 'Steamworks',
  'description' => 'Bindings for the Steamworks SDK',
  'commands' => commands
}

File.open(yml_path, 'w') do |f|
  f.write "##\n"
  f.write "# AUTOGENERATED. DO NOT EDIT.\n"
  f.write "# RUN `ruby src/modules/bb/steamworks/generate.rb` TO UPDATE.\n\n"

  f.write YAML.dump(mod)
end
