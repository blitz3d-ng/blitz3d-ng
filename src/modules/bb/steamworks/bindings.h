// AUTOGENERATED. DO NOT EDIT.
// RUN `ruby src/modules/bb/steamworks/generate.rb` TO UPDATE.

  HSteamPipe bbSteamAPI_ISteamClient_CreateSteamPipe( ISteamClient * Self );
  bool bbSteamAPI_ISteamClient_BReleaseSteamPipe( ISteamClient * Self, HSteamPipe hSteamPipe );
  HSteamUser bbSteamAPI_ISteamClient_ConnectToGlobalUser( ISteamClient * Self, HSteamPipe hSteamPipe );
  HSteamUser bbSteamAPI_ISteamClient_CreateLocalUser( ISteamClient * Self, HSteamPipe * phSteamPipe, EAccountType eAccountType );
  void bbSteamAPI_ISteamClient_ReleaseUser( ISteamClient * Self, HSteamPipe hSteamPipe, HSteamUser hUser );
  ISteamUser * bbSteamAPI_ISteamClient_GetISteamUser( ISteamClient * Self, HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char * pchVersion );
  ISteamGameServer * bbSteamAPI_ISteamClient_GetISteamGameServer( ISteamClient * Self, HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char * pchVersion );
  void bbSteamAPI_ISteamClient_SetLocalIPBinding( ISteamClient * Self, const SteamIPAddress_t & unIP, uint16 usPort );
  ISteamFriends * bbSteamAPI_ISteamClient_GetISteamFriends( ISteamClient * Self, HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char * pchVersion );
  ISteamUtils * bbSteamAPI_ISteamClient_GetISteamUtils( ISteamClient * Self, HSteamPipe hSteamPipe, const char * pchVersion );
  ISteamMatchmaking * bbSteamAPI_ISteamClient_GetISteamMatchmaking( ISteamClient * Self, HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char * pchVersion );
  ISteamMatchmakingServers * bbSteamAPI_ISteamClient_GetISteamMatchmakingServers( ISteamClient * Self, HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char * pchVersion );
  void * bbSteamAPI_ISteamClient_GetISteamGenericInterface( ISteamClient * Self, HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char * pchVersion );
  ISteamUserStats * bbSteamAPI_ISteamClient_GetISteamUserStats( ISteamClient * Self, HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char * pchVersion );
  ISteamGameServerStats * bbSteamAPI_ISteamClient_GetISteamGameServerStats( ISteamClient * Self, HSteamUser hSteamuser, HSteamPipe hSteamPipe, const char * pchVersion );
  ISteamApps * bbSteamAPI_ISteamClient_GetISteamApps( ISteamClient * Self, HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char * pchVersion );
  ISteamNetworking * bbSteamAPI_ISteamClient_GetISteamNetworking( ISteamClient * Self, HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char * pchVersion );
  ISteamRemoteStorage * bbSteamAPI_ISteamClient_GetISteamRemoteStorage( ISteamClient * Self, HSteamUser hSteamuser, HSteamPipe hSteamPipe, const char * pchVersion );
  ISteamScreenshots * bbSteamAPI_ISteamClient_GetISteamScreenshots( ISteamClient * Self, HSteamUser hSteamuser, HSteamPipe hSteamPipe, const char * pchVersion );
  ISteamGameSearch * bbSteamAPI_ISteamClient_GetISteamGameSearch( ISteamClient * Self, HSteamUser hSteamuser, HSteamPipe hSteamPipe, const char * pchVersion );
  uint32 bbSteamAPI_ISteamClient_GetIPCCallCount( ISteamClient * Self );
  void bbSteamAPI_ISteamClient_SetWarningMessageHook( ISteamClient * Self, SteamAPIWarningMessageHook_t pFunction );
  bool bbSteamAPI_ISteamClient_BShutdownIfAllPipesClosed( ISteamClient * Self );
  ISteamHTTP * bbSteamAPI_ISteamClient_GetISteamHTTP( ISteamClient * Self, HSteamUser hSteamuser, HSteamPipe hSteamPipe, const char * pchVersion );
  ISteamController * bbSteamAPI_ISteamClient_GetISteamController( ISteamClient * Self, HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char * pchVersion );
  ISteamUGC * bbSteamAPI_ISteamClient_GetISteamUGC( ISteamClient * Self, HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char * pchVersion );
  ISteamAppList * bbSteamAPI_ISteamClient_GetISteamAppList( ISteamClient * Self, HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char * pchVersion );
  ISteamMusic * bbSteamAPI_ISteamClient_GetISteamMusic( ISteamClient * Self, HSteamUser hSteamuser, HSteamPipe hSteamPipe, const char * pchVersion );
  ISteamMusicRemote * bbSteamAPI_ISteamClient_GetISteamMusicRemote( ISteamClient * Self, HSteamUser hSteamuser, HSteamPipe hSteamPipe, const char * pchVersion );
  ISteamHTMLSurface * bbSteamAPI_ISteamClient_GetISteamHTMLSurface( ISteamClient * Self, HSteamUser hSteamuser, HSteamPipe hSteamPipe, const char * pchVersion );
  ISteamInventory * bbSteamAPI_ISteamClient_GetISteamInventory( ISteamClient * Self, HSteamUser hSteamuser, HSteamPipe hSteamPipe, const char * pchVersion );
  ISteamVideo * bbSteamAPI_ISteamClient_GetISteamVideo( ISteamClient * Self, HSteamUser hSteamuser, HSteamPipe hSteamPipe, const char * pchVersion );
  ISteamParentalSettings * bbSteamAPI_ISteamClient_GetISteamParentalSettings( ISteamClient * Self, HSteamUser hSteamuser, HSteamPipe hSteamPipe, const char * pchVersion );
  ISteamInput * bbSteamAPI_ISteamClient_GetISteamInput( ISteamClient * Self, HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char * pchVersion );
  ISteamParties * bbSteamAPI_ISteamClient_GetISteamParties( ISteamClient * Self, HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char * pchVersion );
  ISteamRemotePlay * bbSteamAPI_ISteamClient_GetISteamRemotePlay( ISteamClient * Self, HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char * pchVersion );
  HSteamUser bbSteamAPI_ISteamUser_GetHSteamUser( ISteamUser * Self );
  bool bbSteamAPI_ISteamUser_BLoggedOn( ISteamUser * Self );
  CSteamID bbSteamAPI_ISteamUser_GetSteamID( ISteamUser * Self );
  int bbSteamAPI_ISteamUser_InitiateGameConnection( ISteamUser * Self, void * pAuthBlob, int cbMaxAuthBlob, uint64_steamid steamIDGameServer, uint32 unIPServer, uint16 usPortServer, bool bSecure );
  void bbSteamAPI_ISteamUser_TerminateGameConnection( ISteamUser * Self, uint32 unIPServer, uint16 usPortServer );
  void bbSteamAPI_ISteamUser_TrackAppUsageEvent( ISteamUser * Self, uint64_gameid gameID, int eAppUsageEvent, const char * pchExtraInfo );
  bool bbSteamAPI_ISteamUser_GetUserDataFolder( ISteamUser * Self, char * pchBuffer, int cubBuffer );
  void bbSteamAPI_ISteamUser_StartVoiceRecording( ISteamUser * Self );
  void bbSteamAPI_ISteamUser_StopVoiceRecording( ISteamUser * Self );
  EVoiceResult bbSteamAPI_ISteamUser_GetAvailableVoice( ISteamUser * Self, uint32 * pcbCompressed, uint32 * pcbUncompressed_Deprecated, uint32 nUncompressedVoiceDesiredSampleRate_Deprecated );
  EVoiceResult bbSteamAPI_ISteamUser_GetVoice( ISteamUser * Self, bool bWantCompressed, void * pDestBuffer, uint32 cbDestBufferSize, uint32 * nBytesWritten, bool bWantUncompressed_Deprecated, void * pUncompressedDestBuffer_Deprecated, uint32 cbUncompressedDestBufferSize_Deprecated, uint32 * nUncompressBytesWritten_Deprecated, uint32 nUncompressedVoiceDesiredSampleRate_Deprecated );
  EVoiceResult bbSteamAPI_ISteamUser_DecompressVoice( ISteamUser * Self, const void * pCompressed, uint32 cbCompressed, void * pDestBuffer, uint32 cbDestBufferSize, uint32 * nBytesWritten, uint32 nDesiredSampleRate );
  uint32 bbSteamAPI_ISteamUser_GetVoiceOptimalSampleRate( ISteamUser * Self );
  HAuthTicket bbSteamAPI_ISteamUser_GetAuthSessionTicket( ISteamUser * Self, void * pTicket, int cbMaxTicket, uint32 * pcbTicket );
  EBeginAuthSessionResult bbSteamAPI_ISteamUser_BeginAuthSession( ISteamUser * Self, const void * pAuthTicket, int cbAuthTicket, uint64_steamid steamID );
  void bbSteamAPI_ISteamUser_EndAuthSession( ISteamUser * Self, uint64_steamid steamID );
  void bbSteamAPI_ISteamUser_CancelAuthTicket( ISteamUser * Self, HAuthTicket hAuthTicket );
  EUserHasLicenseForAppResult bbSteamAPI_ISteamUser_UserHasLicenseForApp( ISteamUser * Self, uint64_steamid steamID, AppId_t appID );
  bool bbSteamAPI_ISteamUser_BIsBehindNAT( ISteamUser * Self );
  void bbSteamAPI_ISteamUser_AdvertiseGame( ISteamUser * Self, uint64_steamid steamIDGameServer, uint32 unIPServer, uint16 usPortServer );
  SteamAPICall_t bbSteamAPI_ISteamUser_RequestEncryptedAppTicket( ISteamUser * Self, void * pDataToInclude, int cbDataToInclude );
  bool bbSteamAPI_ISteamUser_GetEncryptedAppTicket( ISteamUser * Self, void * pTicket, int cbMaxTicket, uint32 * pcbTicket );
  int bbSteamAPI_ISteamUser_GetGameBadgeLevel( ISteamUser * Self, int nSeries, bool bFoil );
  int bbSteamAPI_ISteamUser_GetPlayerSteamLevel( ISteamUser * Self );
  SteamAPICall_t bbSteamAPI_ISteamUser_RequestStoreAuthURL( ISteamUser * Self, const char * pchRedirectURL );
  bool bbSteamAPI_ISteamUser_BIsPhoneVerified( ISteamUser * Self );
  bool bbSteamAPI_ISteamUser_BIsTwoFactorEnabled( ISteamUser * Self );
  bool bbSteamAPI_ISteamUser_BIsPhoneIdentifying( ISteamUser * Self );
  bool bbSteamAPI_ISteamUser_BIsPhoneRequiringVerification( ISteamUser * Self );
  SteamAPICall_t bbSteamAPI_ISteamUser_GetMarketEligibility( ISteamUser * Self );
  SteamAPICall_t bbSteamAPI_ISteamUser_GetDurationControl( ISteamUser * Self );
  const char * bbSteamAPI_ISteamFriends_GetPersonaName( ISteamFriends * Self );
  SteamAPICall_t bbSteamAPI_ISteamFriends_SetPersonaName( ISteamFriends * Self, const char * pchPersonaName );
  EPersonaState bbSteamAPI_ISteamFriends_GetPersonaState( ISteamFriends * Self );
  int bbSteamAPI_ISteamFriends_GetFriendCount( ISteamFriends * Self, int iFriendFlags );
  CSteamID bbSteamAPI_ISteamFriends_GetFriendByIndex( ISteamFriends * Self, int iFriend, int iFriendFlags );
  EFriendRelationship bbSteamAPI_ISteamFriends_GetFriendRelationship( ISteamFriends * Self, uint64_steamid steamIDFriend );
  EPersonaState bbSteamAPI_ISteamFriends_GetFriendPersonaState( ISteamFriends * Self, uint64_steamid steamIDFriend );
  const char * bbSteamAPI_ISteamFriends_GetFriendPersonaName( ISteamFriends * Self, uint64_steamid steamIDFriend );
  bool bbSteamAPI_ISteamFriends_GetFriendGamePlayed( ISteamFriends * Self, uint64_steamid steamIDFriend, FriendGameInfo_t * pFriendGameInfo );
  const char * bbSteamAPI_ISteamFriends_GetFriendPersonaNameHistory( ISteamFriends * Self, uint64_steamid steamIDFriend, int iPersonaName );
  int bbSteamAPI_ISteamFriends_GetFriendSteamLevel( ISteamFriends * Self, uint64_steamid steamIDFriend );
  const char * bbSteamAPI_ISteamFriends_GetPlayerNickname( ISteamFriends * Self, uint64_steamid steamIDPlayer );
  int bbSteamAPI_ISteamFriends_GetFriendsGroupCount( ISteamFriends * Self );
  FriendsGroupID_t bbSteamAPI_ISteamFriends_GetFriendsGroupIDByIndex( ISteamFriends * Self, int iFG );
  const char * bbSteamAPI_ISteamFriends_GetFriendsGroupName( ISteamFriends * Self, FriendsGroupID_t friendsGroupID );
  int bbSteamAPI_ISteamFriends_GetFriendsGroupMembersCount( ISteamFriends * Self, FriendsGroupID_t friendsGroupID );
  void bbSteamAPI_ISteamFriends_GetFriendsGroupMembersList( ISteamFriends * Self, FriendsGroupID_t friendsGroupID, CSteamID * pOutSteamIDMembers, int nMembersCount );
  bool bbSteamAPI_ISteamFriends_HasFriend( ISteamFriends * Self, uint64_steamid steamIDFriend, int iFriendFlags );
  int bbSteamAPI_ISteamFriends_GetClanCount( ISteamFriends * Self );
  CSteamID bbSteamAPI_ISteamFriends_GetClanByIndex( ISteamFriends * Self, int iClan );
  const char * bbSteamAPI_ISteamFriends_GetClanName( ISteamFriends * Self, uint64_steamid steamIDClan );
  const char * bbSteamAPI_ISteamFriends_GetClanTag( ISteamFriends * Self, uint64_steamid steamIDClan );
  bool bbSteamAPI_ISteamFriends_GetClanActivityCounts( ISteamFriends * Self, uint64_steamid steamIDClan, int * pnOnline, int * pnInGame, int * pnChatting );
  SteamAPICall_t bbSteamAPI_ISteamFriends_DownloadClanActivityCounts( ISteamFriends * Self, CSteamID * psteamIDClans, int cClansToRequest );
  int bbSteamAPI_ISteamFriends_GetFriendCountFromSource( ISteamFriends * Self, uint64_steamid steamIDSource );
  CSteamID bbSteamAPI_ISteamFriends_GetFriendFromSourceByIndex( ISteamFriends * Self, uint64_steamid steamIDSource, int iFriend );
  bool bbSteamAPI_ISteamFriends_IsUserInSource( ISteamFriends * Self, uint64_steamid steamIDUser, uint64_steamid steamIDSource );
  void bbSteamAPI_ISteamFriends_SetInGameVoiceSpeaking( ISteamFriends * Self, uint64_steamid steamIDUser, bool bSpeaking );
  void bbSteamAPI_ISteamFriends_ActivateGameOverlay( ISteamFriends * Self, const char * pchDialog );
  void bbSteamAPI_ISteamFriends_ActivateGameOverlayToUser( ISteamFriends * Self, const char * pchDialog, uint64_steamid steamID );
  void bbSteamAPI_ISteamFriends_ActivateGameOverlayToWebPage( ISteamFriends * Self, const char * pchURL, EActivateGameOverlayToWebPageMode eMode );
  void bbSteamAPI_ISteamFriends_ActivateGameOverlayToStore( ISteamFriends * Self, AppId_t nAppID, EOverlayToStoreFlag eFlag );
  void bbSteamAPI_ISteamFriends_SetPlayedWith( ISteamFriends * Self, uint64_steamid steamIDUserPlayedWith );
  void bbSteamAPI_ISteamFriends_ActivateGameOverlayInviteDialog( ISteamFriends * Self, uint64_steamid steamIDLobby );
  int bbSteamAPI_ISteamFriends_GetSmallFriendAvatar( ISteamFriends * Self, uint64_steamid steamIDFriend );
  int bbSteamAPI_ISteamFriends_GetMediumFriendAvatar( ISteamFriends * Self, uint64_steamid steamIDFriend );
  int bbSteamAPI_ISteamFriends_GetLargeFriendAvatar( ISteamFriends * Self, uint64_steamid steamIDFriend );
  bool bbSteamAPI_ISteamFriends_RequestUserInformation( ISteamFriends * Self, uint64_steamid steamIDUser, bool bRequireNameOnly );
  SteamAPICall_t bbSteamAPI_ISteamFriends_RequestClanOfficerList( ISteamFriends * Self, uint64_steamid steamIDClan );
  CSteamID bbSteamAPI_ISteamFriends_GetClanOwner( ISteamFriends * Self, uint64_steamid steamIDClan );
  int bbSteamAPI_ISteamFriends_GetClanOfficerCount( ISteamFriends * Self, uint64_steamid steamIDClan );
  CSteamID bbSteamAPI_ISteamFriends_GetClanOfficerByIndex( ISteamFriends * Self, uint64_steamid steamIDClan, int iOfficer );
  uint32 bbSteamAPI_ISteamFriends_GetUserRestrictions( ISteamFriends * Self );
  bool bbSteamAPI_ISteamFriends_SetRichPresence( ISteamFriends * Self, const char * pchKey, const char * pchValue );
  void bbSteamAPI_ISteamFriends_ClearRichPresence( ISteamFriends * Self );
  const char * bbSteamAPI_ISteamFriends_GetFriendRichPresence( ISteamFriends * Self, uint64_steamid steamIDFriend, const char * pchKey );
  int bbSteamAPI_ISteamFriends_GetFriendRichPresenceKeyCount( ISteamFriends * Self, uint64_steamid steamIDFriend );
  const char * bbSteamAPI_ISteamFriends_GetFriendRichPresenceKeyByIndex( ISteamFriends * Self, uint64_steamid steamIDFriend, int iKey );
  void bbSteamAPI_ISteamFriends_RequestFriendRichPresence( ISteamFriends * Self, uint64_steamid steamIDFriend );
  bool bbSteamAPI_ISteamFriends_InviteUserToGame( ISteamFriends * Self, uint64_steamid steamIDFriend, const char * pchConnectString );
  int bbSteamAPI_ISteamFriends_GetCoplayFriendCount( ISteamFriends * Self );
  CSteamID bbSteamAPI_ISteamFriends_GetCoplayFriend( ISteamFriends * Self, int iCoplayFriend );
  int bbSteamAPI_ISteamFriends_GetFriendCoplayTime( ISteamFriends * Self, uint64_steamid steamIDFriend );
  AppId_t bbSteamAPI_ISteamFriends_GetFriendCoplayGame( ISteamFriends * Self, uint64_steamid steamIDFriend );
  SteamAPICall_t bbSteamAPI_ISteamFriends_JoinClanChatRoom( ISteamFriends * Self, uint64_steamid steamIDClan );
  bool bbSteamAPI_ISteamFriends_LeaveClanChatRoom( ISteamFriends * Self, uint64_steamid steamIDClan );
  int bbSteamAPI_ISteamFriends_GetClanChatMemberCount( ISteamFriends * Self, uint64_steamid steamIDClan );
  CSteamID bbSteamAPI_ISteamFriends_GetChatMemberByIndex( ISteamFriends * Self, uint64_steamid steamIDClan, int iUser );
  bool bbSteamAPI_ISteamFriends_SendClanChatMessage( ISteamFriends * Self, uint64_steamid steamIDClanChat, const char * pchText );
  int bbSteamAPI_ISteamFriends_GetClanChatMessage( ISteamFriends * Self, uint64_steamid steamIDClanChat, int iMessage, void * prgchText, int cchTextMax, EChatEntryType * peChatEntryType, CSteamID * psteamidChatter );
  bool bbSteamAPI_ISteamFriends_IsClanChatAdmin( ISteamFriends * Self, uint64_steamid steamIDClanChat, uint64_steamid steamIDUser );
  bool bbSteamAPI_ISteamFriends_IsClanChatWindowOpenInSteam( ISteamFriends * Self, uint64_steamid steamIDClanChat );
  bool bbSteamAPI_ISteamFriends_OpenClanChatWindowInSteam( ISteamFriends * Self, uint64_steamid steamIDClanChat );
  bool bbSteamAPI_ISteamFriends_CloseClanChatWindowInSteam( ISteamFriends * Self, uint64_steamid steamIDClanChat );
  bool bbSteamAPI_ISteamFriends_SetListenForFriendsMessages( ISteamFriends * Self, bool bInterceptEnabled );
  bool bbSteamAPI_ISteamFriends_ReplyToFriendMessage( ISteamFriends * Self, uint64_steamid steamIDFriend, const char * pchMsgToSend );
  int bbSteamAPI_ISteamFriends_GetFriendMessage( ISteamFriends * Self, uint64_steamid steamIDFriend, int iMessageID, void * pvData, int cubData, EChatEntryType * peChatEntryType );
  SteamAPICall_t bbSteamAPI_ISteamFriends_GetFollowerCount( ISteamFriends * Self, uint64_steamid steamID );
  SteamAPICall_t bbSteamAPI_ISteamFriends_IsFollowing( ISteamFriends * Self, uint64_steamid steamID );
  SteamAPICall_t bbSteamAPI_ISteamFriends_EnumerateFollowingList( ISteamFriends * Self, uint32 unStartIndex );
  bool bbSteamAPI_ISteamFriends_IsClanPublic( ISteamFriends * Self, uint64_steamid steamIDClan );
  bool bbSteamAPI_ISteamFriends_IsClanOfficialGameGroup( ISteamFriends * Self, uint64_steamid steamIDClan );
  int bbSteamAPI_ISteamFriends_GetNumChatsWithUnreadPriorityMessages( ISteamFriends * Self );
  void bbSteamAPI_ISteamFriends_ActivateGameOverlayRemotePlayTogetherInviteDialog( ISteamFriends * Self, uint64_steamid steamIDLobby );
  uint32 bbSteamAPI_ISteamUtils_GetSecondsSinceAppActive( ISteamUtils * Self );
  uint32 bbSteamAPI_ISteamUtils_GetSecondsSinceComputerActive( ISteamUtils * Self );
  EUniverse bbSteamAPI_ISteamUtils_GetConnectedUniverse( ISteamUtils * Self );
  uint32 bbSteamAPI_ISteamUtils_GetServerRealTime( ISteamUtils * Self );
  const char * bbSteamAPI_ISteamUtils_GetIPCountry( ISteamUtils * Self );
  bool bbSteamAPI_ISteamUtils_GetImageSize( ISteamUtils * Self, int iImage, uint32 * pnWidth, uint32 * pnHeight );
  bool bbSteamAPI_ISteamUtils_GetImageRGBA( ISteamUtils * Self, int iImage, uint8 * pubDest, int nDestBufferSize );
  bool bbSteamAPI_ISteamUtils_GetCSERIPPort( ISteamUtils * Self, uint32 * unIP, uint16 * usPort );
  uint8 bbSteamAPI_ISteamUtils_GetCurrentBatteryPower( ISteamUtils * Self );
  uint32 bbSteamAPI_ISteamUtils_GetAppID( ISteamUtils * Self );
  void bbSteamAPI_ISteamUtils_SetOverlayNotificationPosition( ISteamUtils * Self, ENotificationPosition eNotificationPosition );
  bool bbSteamAPI_ISteamUtils_IsAPICallCompleted( ISteamUtils * Self, SteamAPICall_t hSteamAPICall, bool * pbFailed );
  ESteamAPICallFailure bbSteamAPI_ISteamUtils_GetAPICallFailureReason( ISteamUtils * Self, SteamAPICall_t hSteamAPICall );
  bool bbSteamAPI_ISteamUtils_GetAPICallResult( ISteamUtils * Self, SteamAPICall_t hSteamAPICall, void * pCallback, int cubCallback, int iCallbackExpected, bool * pbFailed );
  uint32 bbSteamAPI_ISteamUtils_GetIPCCallCount( ISteamUtils * Self );
  void bbSteamAPI_ISteamUtils_SetWarningMessageHook( ISteamUtils * Self, SteamAPIWarningMessageHook_t pFunction );
  bool bbSteamAPI_ISteamUtils_IsOverlayEnabled( ISteamUtils * Self );
  bool bbSteamAPI_ISteamUtils_BOverlayNeedsPresent( ISteamUtils * Self );
  SteamAPICall_t bbSteamAPI_ISteamUtils_CheckFileSignature( ISteamUtils * Self, const char * szFileName );
  bool bbSteamAPI_ISteamUtils_ShowGamepadTextInput( ISteamUtils * Self, EGamepadTextInputMode eInputMode, EGamepadTextInputLineMode eLineInputMode, const char * pchDescription, uint32 unCharMax, const char * pchExistingText );
  uint32 bbSteamAPI_ISteamUtils_GetEnteredGamepadTextLength( ISteamUtils * Self );
  bool bbSteamAPI_ISteamUtils_GetEnteredGamepadTextInput( ISteamUtils * Self, char * pchText, uint32 cchText );
  const char * bbSteamAPI_ISteamUtils_GetSteamUILanguage( ISteamUtils * Self );
  bool bbSteamAPI_ISteamUtils_IsSteamRunningInVR( ISteamUtils * Self );
  void bbSteamAPI_ISteamUtils_SetOverlayNotificationInset( ISteamUtils * Self, int nHorizontalInset, int nVerticalInset );
  bool bbSteamAPI_ISteamUtils_IsSteamInBigPictureMode( ISteamUtils * Self );
  void bbSteamAPI_ISteamUtils_StartVRDashboard( ISteamUtils * Self );
  bool bbSteamAPI_ISteamUtils_IsVRHeadsetStreamingEnabled( ISteamUtils * Self );
  void bbSteamAPI_ISteamUtils_SetVRHeadsetStreamingEnabled( ISteamUtils * Self, bool bEnabled );
  bool bbSteamAPI_ISteamUtils_IsSteamChinaLauncher( ISteamUtils * Self );
  bool bbSteamAPI_ISteamUtils_InitFilterText( ISteamUtils * Self );
  int bbSteamAPI_ISteamUtils_FilterText( ISteamUtils * Self, char * pchOutFilteredText, uint32 nByteSizeOutFilteredText, const char * pchInputMessage, bool bLegalOnly );
  ESteamIPv6ConnectivityState bbSteamAPI_ISteamUtils_GetIPv6ConnectivityState( ISteamUtils * Self, ESteamIPv6ConnectivityProtocol eProtocol );
  int bbSteamAPI_ISteamMatchmaking_GetFavoriteGameCount( ISteamMatchmaking * Self );
  bool bbSteamAPI_ISteamMatchmaking_GetFavoriteGame( ISteamMatchmaking * Self, int iGame, AppId_t * pnAppID, uint32 * pnIP, uint16 * pnConnPort, uint16 * pnQueryPort, uint32 * punFlags, uint32 * pRTime32LastPlayedOnServer );
  int bbSteamAPI_ISteamMatchmaking_AddFavoriteGame( ISteamMatchmaking * Self, AppId_t nAppID, uint32 nIP, uint16 nConnPort, uint16 nQueryPort, uint32 unFlags, uint32 rTime32LastPlayedOnServer );
  bool bbSteamAPI_ISteamMatchmaking_RemoveFavoriteGame( ISteamMatchmaking * Self, AppId_t nAppID, uint32 nIP, uint16 nConnPort, uint16 nQueryPort, uint32 unFlags );
  SteamAPICall_t bbSteamAPI_ISteamMatchmaking_RequestLobbyList( ISteamMatchmaking * Self );
  void bbSteamAPI_ISteamMatchmaking_AddRequestLobbyListStringFilter( ISteamMatchmaking * Self, const char * pchKeyToMatch, const char * pchValueToMatch, ELobbyComparison eComparisonType );
  void bbSteamAPI_ISteamMatchmaking_AddRequestLobbyListNumericalFilter( ISteamMatchmaking * Self, const char * pchKeyToMatch, int nValueToMatch, ELobbyComparison eComparisonType );
  void bbSteamAPI_ISteamMatchmaking_AddRequestLobbyListNearValueFilter( ISteamMatchmaking * Self, const char * pchKeyToMatch, int nValueToBeCloseTo );
  void bbSteamAPI_ISteamMatchmaking_AddRequestLobbyListFilterSlotsAvailable( ISteamMatchmaking * Self, int nSlotsAvailable );
  void bbSteamAPI_ISteamMatchmaking_AddRequestLobbyListDistanceFilter( ISteamMatchmaking * Self, ELobbyDistanceFilter eLobbyDistanceFilter );
  void bbSteamAPI_ISteamMatchmaking_AddRequestLobbyListResultCountFilter( ISteamMatchmaking * Self, int cMaxResults );
  void bbSteamAPI_ISteamMatchmaking_AddRequestLobbyListCompatibleMembersFilter( ISteamMatchmaking * Self, uint64_steamid steamIDLobby );
  CSteamID bbSteamAPI_ISteamMatchmaking_GetLobbyByIndex( ISteamMatchmaking * Self, int iLobby );
  SteamAPICall_t bbSteamAPI_ISteamMatchmaking_CreateLobby( ISteamMatchmaking * Self, ELobbyType eLobbyType, int cMaxMembers );
  SteamAPICall_t bbSteamAPI_ISteamMatchmaking_JoinLobby( ISteamMatchmaking * Self, uint64_steamid steamIDLobby );
  void bbSteamAPI_ISteamMatchmaking_LeaveLobby( ISteamMatchmaking * Self, uint64_steamid steamIDLobby );
  bool bbSteamAPI_ISteamMatchmaking_InviteUserToLobby( ISteamMatchmaking * Self, uint64_steamid steamIDLobby, uint64_steamid steamIDInvitee );
  int bbSteamAPI_ISteamMatchmaking_GetNumLobbyMembers( ISteamMatchmaking * Self, uint64_steamid steamIDLobby );
  CSteamID bbSteamAPI_ISteamMatchmaking_GetLobbyMemberByIndex( ISteamMatchmaking * Self, uint64_steamid steamIDLobby, int iMember );
  const char * bbSteamAPI_ISteamMatchmaking_GetLobbyData( ISteamMatchmaking * Self, uint64_steamid steamIDLobby, const char * pchKey );
  bool bbSteamAPI_ISteamMatchmaking_SetLobbyData( ISteamMatchmaking * Self, uint64_steamid steamIDLobby, const char * pchKey, const char * pchValue );
  int bbSteamAPI_ISteamMatchmaking_GetLobbyDataCount( ISteamMatchmaking * Self, uint64_steamid steamIDLobby );
  bool bbSteamAPI_ISteamMatchmaking_GetLobbyDataByIndex( ISteamMatchmaking * Self, uint64_steamid steamIDLobby, int iLobbyData, char * pchKey, int cchKeyBufferSize, char * pchValue, int cchValueBufferSize );
  bool bbSteamAPI_ISteamMatchmaking_DeleteLobbyData( ISteamMatchmaking * Self, uint64_steamid steamIDLobby, const char * pchKey );
  const char * bbSteamAPI_ISteamMatchmaking_GetLobbyMemberData( ISteamMatchmaking * Self, uint64_steamid steamIDLobby, uint64_steamid steamIDUser, const char * pchKey );
  void bbSteamAPI_ISteamMatchmaking_SetLobbyMemberData( ISteamMatchmaking * Self, uint64_steamid steamIDLobby, const char * pchKey, const char * pchValue );
  bool bbSteamAPI_ISteamMatchmaking_SendLobbyChatMsg( ISteamMatchmaking * Self, uint64_steamid steamIDLobby, const void * pvMsgBody, int cubMsgBody );
  int bbSteamAPI_ISteamMatchmaking_GetLobbyChatEntry( ISteamMatchmaking * Self, uint64_steamid steamIDLobby, int iChatID, CSteamID * pSteamIDUser, void * pvData, int cubData, EChatEntryType * peChatEntryType );
  bool bbSteamAPI_ISteamMatchmaking_RequestLobbyData( ISteamMatchmaking * Self, uint64_steamid steamIDLobby );
  void bbSteamAPI_ISteamMatchmaking_SetLobbyGameServer( ISteamMatchmaking * Self, uint64_steamid steamIDLobby, uint32 unGameServerIP, uint16 unGameServerPort, uint64_steamid steamIDGameServer );
  bool bbSteamAPI_ISteamMatchmaking_GetLobbyGameServer( ISteamMatchmaking * Self, uint64_steamid steamIDLobby, uint32 * punGameServerIP, uint16 * punGameServerPort, CSteamID * psteamIDGameServer );
  bool bbSteamAPI_ISteamMatchmaking_SetLobbyMemberLimit( ISteamMatchmaking * Self, uint64_steamid steamIDLobby, int cMaxMembers );
  int bbSteamAPI_ISteamMatchmaking_GetLobbyMemberLimit( ISteamMatchmaking * Self, uint64_steamid steamIDLobby );
  bool bbSteamAPI_ISteamMatchmaking_SetLobbyType( ISteamMatchmaking * Self, uint64_steamid steamIDLobby, ELobbyType eLobbyType );
  bool bbSteamAPI_ISteamMatchmaking_SetLobbyJoinable( ISteamMatchmaking * Self, uint64_steamid steamIDLobby, bool bLobbyJoinable );
  CSteamID bbSteamAPI_ISteamMatchmaking_GetLobbyOwner( ISteamMatchmaking * Self, uint64_steamid steamIDLobby );
  bool bbSteamAPI_ISteamMatchmaking_SetLobbyOwner( ISteamMatchmaking * Self, uint64_steamid steamIDLobby, uint64_steamid steamIDNewOwner );
  bool bbSteamAPI_ISteamMatchmaking_SetLinkedLobby( ISteamMatchmaking * Self, uint64_steamid steamIDLobby, uint64_steamid steamIDLobbyDependent );
  void bbSteamAPI_ISteamMatchmakingServerListResponse_ServerResponded( ISteamMatchmakingServerListResponse * Self, HServerListRequest hRequest, int iServer );
  void bbSteamAPI_ISteamMatchmakingServerListResponse_ServerFailedToRespond( ISteamMatchmakingServerListResponse * Self, HServerListRequest hRequest, int iServer );
  void bbSteamAPI_ISteamMatchmakingServerListResponse_RefreshComplete( ISteamMatchmakingServerListResponse * Self, HServerListRequest hRequest, EMatchMakingServerResponse response );
  void bbSteamAPI_ISteamMatchmakingPingResponse_ServerResponded( ISteamMatchmakingPingResponse * Self, gameserveritem_t & server );
  void bbSteamAPI_ISteamMatchmakingPingResponse_ServerFailedToRespond( ISteamMatchmakingPingResponse * Self );
  void bbSteamAPI_ISteamMatchmakingPlayersResponse_AddPlayerToList( ISteamMatchmakingPlayersResponse * Self, const char * pchName, int nScore, float flTimePlayed );
  void bbSteamAPI_ISteamMatchmakingPlayersResponse_PlayersFailedToRespond( ISteamMatchmakingPlayersResponse * Self );
  void bbSteamAPI_ISteamMatchmakingPlayersResponse_PlayersRefreshComplete( ISteamMatchmakingPlayersResponse * Self );
  void bbSteamAPI_ISteamMatchmakingRulesResponse_RulesResponded( ISteamMatchmakingRulesResponse * Self, const char * pchRule, const char * pchValue );
  void bbSteamAPI_ISteamMatchmakingRulesResponse_RulesFailedToRespond( ISteamMatchmakingRulesResponse * Self );
  void bbSteamAPI_ISteamMatchmakingRulesResponse_RulesRefreshComplete( ISteamMatchmakingRulesResponse * Self );
  HServerListRequest bbSteamAPI_ISteamMatchmakingServers_RequestInternetServerList( ISteamMatchmakingServers * Self, AppId_t iApp, MatchMakingKeyValuePair_t ** ppchFilters, uint32 nFilters, ISteamMatchmakingServerListResponse * pRequestServersResponse );
  HServerListRequest bbSteamAPI_ISteamMatchmakingServers_RequestLANServerList( ISteamMatchmakingServers * Self, AppId_t iApp, ISteamMatchmakingServerListResponse * pRequestServersResponse );
  HServerListRequest bbSteamAPI_ISteamMatchmakingServers_RequestFriendsServerList( ISteamMatchmakingServers * Self, AppId_t iApp, MatchMakingKeyValuePair_t ** ppchFilters, uint32 nFilters, ISteamMatchmakingServerListResponse * pRequestServersResponse );
  HServerListRequest bbSteamAPI_ISteamMatchmakingServers_RequestFavoritesServerList( ISteamMatchmakingServers * Self, AppId_t iApp, MatchMakingKeyValuePair_t ** ppchFilters, uint32 nFilters, ISteamMatchmakingServerListResponse * pRequestServersResponse );
  HServerListRequest bbSteamAPI_ISteamMatchmakingServers_RequestHistoryServerList( ISteamMatchmakingServers * Self, AppId_t iApp, MatchMakingKeyValuePair_t ** ppchFilters, uint32 nFilters, ISteamMatchmakingServerListResponse * pRequestServersResponse );
  HServerListRequest bbSteamAPI_ISteamMatchmakingServers_RequestSpectatorServerList( ISteamMatchmakingServers * Self, AppId_t iApp, MatchMakingKeyValuePair_t ** ppchFilters, uint32 nFilters, ISteamMatchmakingServerListResponse * pRequestServersResponse );
  void bbSteamAPI_ISteamMatchmakingServers_ReleaseRequest( ISteamMatchmakingServers * Self, HServerListRequest hServerListRequest );
  gameserveritem_t * bbSteamAPI_ISteamMatchmakingServers_GetServerDetails( ISteamMatchmakingServers * Self, HServerListRequest hRequest, int iServer );
  void bbSteamAPI_ISteamMatchmakingServers_CancelQuery( ISteamMatchmakingServers * Self, HServerListRequest hRequest );
  void bbSteamAPI_ISteamMatchmakingServers_RefreshQuery( ISteamMatchmakingServers * Self, HServerListRequest hRequest );
  bool bbSteamAPI_ISteamMatchmakingServers_IsRefreshing( ISteamMatchmakingServers * Self, HServerListRequest hRequest );
  int bbSteamAPI_ISteamMatchmakingServers_GetServerCount( ISteamMatchmakingServers * Self, HServerListRequest hRequest );
  void bbSteamAPI_ISteamMatchmakingServers_RefreshServer( ISteamMatchmakingServers * Self, HServerListRequest hRequest, int iServer );
  HServerQuery bbSteamAPI_ISteamMatchmakingServers_PingServer( ISteamMatchmakingServers * Self, uint32 unIP, uint16 usPort, ISteamMatchmakingPingResponse * pRequestServersResponse );
  HServerQuery bbSteamAPI_ISteamMatchmakingServers_PlayerDetails( ISteamMatchmakingServers * Self, uint32 unIP, uint16 usPort, ISteamMatchmakingPlayersResponse * pRequestServersResponse );
  HServerQuery bbSteamAPI_ISteamMatchmakingServers_ServerRules( ISteamMatchmakingServers * Self, uint32 unIP, uint16 usPort, ISteamMatchmakingRulesResponse * pRequestServersResponse );
  void bbSteamAPI_ISteamMatchmakingServers_CancelServerQuery( ISteamMatchmakingServers * Self, HServerQuery hServerQuery );
  EGameSearchErrorCode_t bbSteamAPI_ISteamGameSearch_AddGameSearchParams( ISteamGameSearch * Self, const char * pchKeyToFind, const char * pchValuesToFind );
  EGameSearchErrorCode_t bbSteamAPI_ISteamGameSearch_SearchForGameWithLobby( ISteamGameSearch * Self, uint64_steamid steamIDLobby, int nPlayerMin, int nPlayerMax );
  EGameSearchErrorCode_t bbSteamAPI_ISteamGameSearch_SearchForGameSolo( ISteamGameSearch * Self, int nPlayerMin, int nPlayerMax );
  EGameSearchErrorCode_t bbSteamAPI_ISteamGameSearch_AcceptGame( ISteamGameSearch * Self );
  EGameSearchErrorCode_t bbSteamAPI_ISteamGameSearch_DeclineGame( ISteamGameSearch * Self );
  EGameSearchErrorCode_t bbSteamAPI_ISteamGameSearch_RetrieveConnectionDetails( ISteamGameSearch * Self, uint64_steamid steamIDHost, char * pchConnectionDetails, int cubConnectionDetails );
  EGameSearchErrorCode_t bbSteamAPI_ISteamGameSearch_EndGameSearch( ISteamGameSearch * Self );
  EGameSearchErrorCode_t bbSteamAPI_ISteamGameSearch_SetGameHostParams( ISteamGameSearch * Self, const char * pchKey, const char * pchValue );
  EGameSearchErrorCode_t bbSteamAPI_ISteamGameSearch_SetConnectionDetails( ISteamGameSearch * Self, const char * pchConnectionDetails, int cubConnectionDetails );
  EGameSearchErrorCode_t bbSteamAPI_ISteamGameSearch_RequestPlayersForGame( ISteamGameSearch * Self, int nPlayerMin, int nPlayerMax, int nMaxTeamSize );
  EGameSearchErrorCode_t bbSteamAPI_ISteamGameSearch_HostConfirmGameStart( ISteamGameSearch * Self, uint64 ullUniqueGameID );
  EGameSearchErrorCode_t bbSteamAPI_ISteamGameSearch_CancelRequestPlayersForGame( ISteamGameSearch * Self );
  EGameSearchErrorCode_t bbSteamAPI_ISteamGameSearch_SubmitPlayerResult( ISteamGameSearch * Self, uint64 ullUniqueGameID, uint64_steamid steamIDPlayer, EPlayerResult_t EPlayerResult );
  EGameSearchErrorCode_t bbSteamAPI_ISteamGameSearch_EndGame( ISteamGameSearch * Self, uint64 ullUniqueGameID );
  uint32 bbSteamAPI_ISteamParties_GetNumActiveBeacons( ISteamParties * Self );
  PartyBeaconID_t bbSteamAPI_ISteamParties_GetBeaconByIndex( ISteamParties * Self, uint32 unIndex );
  bool bbSteamAPI_ISteamParties_GetBeaconDetails( ISteamParties * Self, PartyBeaconID_t ulBeaconID, CSteamID * pSteamIDBeaconOwner, SteamPartyBeaconLocation_t * pLocation, char * pchMetadata, int cchMetadata );
  SteamAPICall_t bbSteamAPI_ISteamParties_JoinParty( ISteamParties * Self, PartyBeaconID_t ulBeaconID );
  bool bbSteamAPI_ISteamParties_GetNumAvailableBeaconLocations( ISteamParties * Self, uint32 * puNumLocations );
  bool bbSteamAPI_ISteamParties_GetAvailableBeaconLocations( ISteamParties * Self, SteamPartyBeaconLocation_t * pLocationList, uint32 uMaxNumLocations );
  SteamAPICall_t bbSteamAPI_ISteamParties_CreateBeacon( ISteamParties * Self, uint32 unOpenSlots, SteamPartyBeaconLocation_t * pBeaconLocation, const char * pchConnectString, const char * pchMetadata );
  void bbSteamAPI_ISteamParties_OnReservationCompleted( ISteamParties * Self, PartyBeaconID_t ulBeacon, uint64_steamid steamIDUser );
  void bbSteamAPI_ISteamParties_CancelReservation( ISteamParties * Self, PartyBeaconID_t ulBeacon, uint64_steamid steamIDUser );
  SteamAPICall_t bbSteamAPI_ISteamParties_ChangeNumOpenSlots( ISteamParties * Self, PartyBeaconID_t ulBeacon, uint32 unOpenSlots );
  bool bbSteamAPI_ISteamParties_DestroyBeacon( ISteamParties * Self, PartyBeaconID_t ulBeacon );
  bool bbSteamAPI_ISteamParties_GetBeaconLocationData( ISteamParties * Self, SteamPartyBeaconLocation_t BeaconLocation, ESteamPartyBeaconLocationData eData, char * pchDataStringOut, int cchDataStringOut );
  bool bbSteamAPI_ISteamRemoteStorage_FileWrite( ISteamRemoteStorage * Self, const char * pchFile, const void * pvData, int32 cubData );
  int32 bbSteamAPI_ISteamRemoteStorage_FileRead( ISteamRemoteStorage * Self, const char * pchFile, void * pvData, int32 cubDataToRead );
  SteamAPICall_t bbSteamAPI_ISteamRemoteStorage_FileWriteAsync( ISteamRemoteStorage * Self, const char * pchFile, const void * pvData, uint32 cubData );
  SteamAPICall_t bbSteamAPI_ISteamRemoteStorage_FileReadAsync( ISteamRemoteStorage * Self, const char * pchFile, uint32 nOffset, uint32 cubToRead );
  bool bbSteamAPI_ISteamRemoteStorage_FileReadAsyncComplete( ISteamRemoteStorage * Self, SteamAPICall_t hReadCall, void * pvBuffer, uint32 cubToRead );
  bool bbSteamAPI_ISteamRemoteStorage_FileForget( ISteamRemoteStorage * Self, const char * pchFile );
  bool bbSteamAPI_ISteamRemoteStorage_FileDelete( ISteamRemoteStorage * Self, const char * pchFile );
  SteamAPICall_t bbSteamAPI_ISteamRemoteStorage_FileShare( ISteamRemoteStorage * Self, const char * pchFile );
  bool bbSteamAPI_ISteamRemoteStorage_SetSyncPlatforms( ISteamRemoteStorage * Self, const char * pchFile, ERemoteStoragePlatform eRemoteStoragePlatform );
  UGCFileWriteStreamHandle_t bbSteamAPI_ISteamRemoteStorage_FileWriteStreamOpen( ISteamRemoteStorage * Self, const char * pchFile );
  bool bbSteamAPI_ISteamRemoteStorage_FileWriteStreamWriteChunk( ISteamRemoteStorage * Self, UGCFileWriteStreamHandle_t writeHandle, const void * pvData, int32 cubData );
  bool bbSteamAPI_ISteamRemoteStorage_FileWriteStreamClose( ISteamRemoteStorage * Self, UGCFileWriteStreamHandle_t writeHandle );
  bool bbSteamAPI_ISteamRemoteStorage_FileWriteStreamCancel( ISteamRemoteStorage * Self, UGCFileWriteStreamHandle_t writeHandle );
  bool bbSteamAPI_ISteamRemoteStorage_FileExists( ISteamRemoteStorage * Self, const char * pchFile );
  bool bbSteamAPI_ISteamRemoteStorage_FilePersisted( ISteamRemoteStorage * Self, const char * pchFile );
  int32 bbSteamAPI_ISteamRemoteStorage_GetFileSize( ISteamRemoteStorage * Self, const char * pchFile );
  int64 bbSteamAPI_ISteamRemoteStorage_GetFileTimestamp( ISteamRemoteStorage * Self, const char * pchFile );
  ERemoteStoragePlatform bbSteamAPI_ISteamRemoteStorage_GetSyncPlatforms( ISteamRemoteStorage * Self, const char * pchFile );
  int32 bbSteamAPI_ISteamRemoteStorage_GetFileCount( ISteamRemoteStorage * Self );
  const char * bbSteamAPI_ISteamRemoteStorage_GetFileNameAndSize( ISteamRemoteStorage * Self, int iFile, int32 * pnFileSizeInBytes );
  bool bbSteamAPI_ISteamRemoteStorage_GetQuota( ISteamRemoteStorage * Self, uint64 * pnTotalBytes, uint64 * puAvailableBytes );
  bool bbSteamAPI_ISteamRemoteStorage_IsCloudEnabledForAccount( ISteamRemoteStorage * Self );
  bool bbSteamAPI_ISteamRemoteStorage_IsCloudEnabledForApp( ISteamRemoteStorage * Self );
  void bbSteamAPI_ISteamRemoteStorage_SetCloudEnabledForApp( ISteamRemoteStorage * Self, bool bEnabled );
  SteamAPICall_t bbSteamAPI_ISteamRemoteStorage_UGCDownload( ISteamRemoteStorage * Self, UGCHandle_t hContent, uint32 unPriority );
  bool bbSteamAPI_ISteamRemoteStorage_GetUGCDownloadProgress( ISteamRemoteStorage * Self, UGCHandle_t hContent, int32 * pnBytesDownloaded, int32 * pnBytesExpected );
  bool bbSteamAPI_ISteamRemoteStorage_GetUGCDetails( ISteamRemoteStorage * Self, UGCHandle_t hContent, AppId_t * pnAppID, char ** ppchName, int32 * pnFileSizeInBytes, CSteamID * pSteamIDOwner );
  int32 bbSteamAPI_ISteamRemoteStorage_UGCRead( ISteamRemoteStorage * Self, UGCHandle_t hContent, void * pvData, int32 cubDataToRead, uint32 cOffset, EUGCReadAction eAction );
  int32 bbSteamAPI_ISteamRemoteStorage_GetCachedUGCCount( ISteamRemoteStorage * Self );
  UGCHandle_t bbSteamAPI_ISteamRemoteStorage_GetCachedUGCHandle( ISteamRemoteStorage * Self, int32 iCachedContent );
  SteamAPICall_t bbSteamAPI_ISteamRemoteStorage_PublishWorkshopFile( ISteamRemoteStorage * Self, const char * pchFile, const char * pchPreviewFile, AppId_t nConsumerAppId, const char * pchTitle, const char * pchDescription, ERemoteStoragePublishedFileVisibility eVisibility, SteamParamStringArray_t * pTags, EWorkshopFileType eWorkshopFileType );
  PublishedFileUpdateHandle_t bbSteamAPI_ISteamRemoteStorage_CreatePublishedFileUpdateRequest( ISteamRemoteStorage * Self, PublishedFileId_t unPublishedFileId );
  bool bbSteamAPI_ISteamRemoteStorage_UpdatePublishedFileFile( ISteamRemoteStorage * Self, PublishedFileUpdateHandle_t updateHandle, const char * pchFile );
  bool bbSteamAPI_ISteamRemoteStorage_UpdatePublishedFilePreviewFile( ISteamRemoteStorage * Self, PublishedFileUpdateHandle_t updateHandle, const char * pchPreviewFile );
  bool bbSteamAPI_ISteamRemoteStorage_UpdatePublishedFileTitle( ISteamRemoteStorage * Self, PublishedFileUpdateHandle_t updateHandle, const char * pchTitle );
  bool bbSteamAPI_ISteamRemoteStorage_UpdatePublishedFileDescription( ISteamRemoteStorage * Self, PublishedFileUpdateHandle_t updateHandle, const char * pchDescription );
  bool bbSteamAPI_ISteamRemoteStorage_UpdatePublishedFileVisibility( ISteamRemoteStorage * Self, PublishedFileUpdateHandle_t updateHandle, ERemoteStoragePublishedFileVisibility eVisibility );
  bool bbSteamAPI_ISteamRemoteStorage_UpdatePublishedFileTags( ISteamRemoteStorage * Self, PublishedFileUpdateHandle_t updateHandle, SteamParamStringArray_t * pTags );
  SteamAPICall_t bbSteamAPI_ISteamRemoteStorage_CommitPublishedFileUpdate( ISteamRemoteStorage * Self, PublishedFileUpdateHandle_t updateHandle );
  SteamAPICall_t bbSteamAPI_ISteamRemoteStorage_GetPublishedFileDetails( ISteamRemoteStorage * Self, PublishedFileId_t unPublishedFileId, uint32 unMaxSecondsOld );
  SteamAPICall_t bbSteamAPI_ISteamRemoteStorage_DeletePublishedFile( ISteamRemoteStorage * Self, PublishedFileId_t unPublishedFileId );
  SteamAPICall_t bbSteamAPI_ISteamRemoteStorage_EnumerateUserPublishedFiles( ISteamRemoteStorage * Self, uint32 unStartIndex );
  SteamAPICall_t bbSteamAPI_ISteamRemoteStorage_SubscribePublishedFile( ISteamRemoteStorage * Self, PublishedFileId_t unPublishedFileId );
  SteamAPICall_t bbSteamAPI_ISteamRemoteStorage_EnumerateUserSubscribedFiles( ISteamRemoteStorage * Self, uint32 unStartIndex );
  SteamAPICall_t bbSteamAPI_ISteamRemoteStorage_UnsubscribePublishedFile( ISteamRemoteStorage * Self, PublishedFileId_t unPublishedFileId );
  bool bbSteamAPI_ISteamRemoteStorage_UpdatePublishedFileSetChangeDescription( ISteamRemoteStorage * Self, PublishedFileUpdateHandle_t updateHandle, const char * pchChangeDescription );
  SteamAPICall_t bbSteamAPI_ISteamRemoteStorage_GetPublishedItemVoteDetails( ISteamRemoteStorage * Self, PublishedFileId_t unPublishedFileId );
  SteamAPICall_t bbSteamAPI_ISteamRemoteStorage_UpdateUserPublishedItemVote( ISteamRemoteStorage * Self, PublishedFileId_t unPublishedFileId, bool bVoteUp );
  SteamAPICall_t bbSteamAPI_ISteamRemoteStorage_GetUserPublishedItemVoteDetails( ISteamRemoteStorage * Self, PublishedFileId_t unPublishedFileId );
  SteamAPICall_t bbSteamAPI_ISteamRemoteStorage_EnumerateUserSharedWorkshopFiles( ISteamRemoteStorage * Self, uint64_steamid steamId, uint32 unStartIndex, SteamParamStringArray_t * pRequiredTags, SteamParamStringArray_t * pExcludedTags );
  SteamAPICall_t bbSteamAPI_ISteamRemoteStorage_PublishVideo( ISteamRemoteStorage * Self, EWorkshopVideoProvider eVideoProvider, const char * pchVideoAccount, const char * pchVideoIdentifier, const char * pchPreviewFile, AppId_t nConsumerAppId, const char * pchTitle, const char * pchDescription, ERemoteStoragePublishedFileVisibility eVisibility, SteamParamStringArray_t * pTags );
  SteamAPICall_t bbSteamAPI_ISteamRemoteStorage_SetUserPublishedFileAction( ISteamRemoteStorage * Self, PublishedFileId_t unPublishedFileId, EWorkshopFileAction eAction );
  SteamAPICall_t bbSteamAPI_ISteamRemoteStorage_EnumeratePublishedFilesByUserAction( ISteamRemoteStorage * Self, EWorkshopFileAction eAction, uint32 unStartIndex );
  SteamAPICall_t bbSteamAPI_ISteamRemoteStorage_EnumeratePublishedWorkshopFiles( ISteamRemoteStorage * Self, EWorkshopEnumerationType eEnumerationType, uint32 unStartIndex, uint32 unCount, uint32 unDays, SteamParamStringArray_t * pTags, SteamParamStringArray_t * pUserTags );
  SteamAPICall_t bbSteamAPI_ISteamRemoteStorage_UGCDownloadToLocation( ISteamRemoteStorage * Self, UGCHandle_t hContent, const char * pchLocation, uint32 unPriority );
  bool bbSteamAPI_ISteamUserStats_RequestCurrentStats( ISteamUserStats * Self );
  bool bbSteamAPI_ISteamUserStats_GetStatInt32( ISteamUserStats * Self, const char * pchName, int32 * pData );
  bool bbSteamAPI_ISteamUserStats_GetStatFloat( ISteamUserStats * Self, const char * pchName, float * pData );
  bool bbSteamAPI_ISteamUserStats_SetStatInt32( ISteamUserStats * Self, const char * pchName, int32 nData );
  bool bbSteamAPI_ISteamUserStats_SetStatFloat( ISteamUserStats * Self, const char * pchName, float fData );
  bool bbSteamAPI_ISteamUserStats_UpdateAvgRateStat( ISteamUserStats * Self, const char * pchName, float flCountThisSession, double dSessionLength );
  bool bbSteamAPI_ISteamUserStats_GetAchievement( ISteamUserStats * Self, const char * pchName, bool * pbAchieved );
  bool bbSteamAPI_ISteamUserStats_SetAchievement( ISteamUserStats * Self, const char * pchName );
  bool bbSteamAPI_ISteamUserStats_ClearAchievement( ISteamUserStats * Self, const char * pchName );
  bool bbSteamAPI_ISteamUserStats_GetAchievementAndUnlockTime( ISteamUserStats * Self, const char * pchName, bool * pbAchieved, uint32 * punUnlockTime );
  bool bbSteamAPI_ISteamUserStats_StoreStats( ISteamUserStats * Self );
  int bbSteamAPI_ISteamUserStats_GetAchievementIcon( ISteamUserStats * Self, const char * pchName );
  const char * bbSteamAPI_ISteamUserStats_GetAchievementDisplayAttribute( ISteamUserStats * Self, const char * pchName, const char * pchKey );
  bool bbSteamAPI_ISteamUserStats_IndicateAchievementProgress( ISteamUserStats * Self, const char * pchName, uint32 nCurProgress, uint32 nMaxProgress );
  uint32 bbSteamAPI_ISteamUserStats_GetNumAchievements( ISteamUserStats * Self );
  const char * bbSteamAPI_ISteamUserStats_GetAchievementName( ISteamUserStats * Self, uint32 iAchievement );
  SteamAPICall_t bbSteamAPI_ISteamUserStats_RequestUserStats( ISteamUserStats * Self, uint64_steamid steamIDUser );
  bool bbSteamAPI_ISteamUserStats_GetUserStatInt32( ISteamUserStats * Self, uint64_steamid steamIDUser, const char * pchName, int32 * pData );
  bool bbSteamAPI_ISteamUserStats_GetUserStatFloat( ISteamUserStats * Self, uint64_steamid steamIDUser, const char * pchName, float * pData );
  bool bbSteamAPI_ISteamUserStats_GetUserAchievement( ISteamUserStats * Self, uint64_steamid steamIDUser, const char * pchName, bool * pbAchieved );
  bool bbSteamAPI_ISteamUserStats_GetUserAchievementAndUnlockTime( ISteamUserStats * Self, uint64_steamid steamIDUser, const char * pchName, bool * pbAchieved, uint32 * punUnlockTime );
  bool bbSteamAPI_ISteamUserStats_ResetAllStats( ISteamUserStats * Self, bool bAchievementsToo );
  SteamAPICall_t bbSteamAPI_ISteamUserStats_FindOrCreateLeaderboard( ISteamUserStats * Self, const char * pchLeaderboardName, ELeaderboardSortMethod eLeaderboardSortMethod, ELeaderboardDisplayType eLeaderboardDisplayType );
  SteamAPICall_t bbSteamAPI_ISteamUserStats_FindLeaderboard( ISteamUserStats * Self, const char * pchLeaderboardName );
  const char * bbSteamAPI_ISteamUserStats_GetLeaderboardName( ISteamUserStats * Self, SteamLeaderboard_t hSteamLeaderboard );
  int bbSteamAPI_ISteamUserStats_GetLeaderboardEntryCount( ISteamUserStats * Self, SteamLeaderboard_t hSteamLeaderboard );
  ELeaderboardSortMethod bbSteamAPI_ISteamUserStats_GetLeaderboardSortMethod( ISteamUserStats * Self, SteamLeaderboard_t hSteamLeaderboard );
  ELeaderboardDisplayType bbSteamAPI_ISteamUserStats_GetLeaderboardDisplayType( ISteamUserStats * Self, SteamLeaderboard_t hSteamLeaderboard );
  SteamAPICall_t bbSteamAPI_ISteamUserStats_DownloadLeaderboardEntries( ISteamUserStats * Self, SteamLeaderboard_t hSteamLeaderboard, ELeaderboardDataRequest eLeaderboardDataRequest, int nRangeStart, int nRangeEnd );
  SteamAPICall_t bbSteamAPI_ISteamUserStats_DownloadLeaderboardEntriesForUsers( ISteamUserStats * Self, SteamLeaderboard_t hSteamLeaderboard, CSteamID * prgUsers, int cUsers );
  bool bbSteamAPI_ISteamUserStats_GetDownloadedLeaderboardEntry( ISteamUserStats * Self, SteamLeaderboardEntries_t hSteamLeaderboardEntries, int index, LeaderboardEntry_t * pLeaderboardEntry, int32 * pDetails, int cDetailsMax );
  SteamAPICall_t bbSteamAPI_ISteamUserStats_UploadLeaderboardScore( ISteamUserStats * Self, SteamLeaderboard_t hSteamLeaderboard, ELeaderboardUploadScoreMethod eLeaderboardUploadScoreMethod, int32 nScore, const int32 * pScoreDetails, int cScoreDetailsCount );
  SteamAPICall_t bbSteamAPI_ISteamUserStats_AttachLeaderboardUGC( ISteamUserStats * Self, SteamLeaderboard_t hSteamLeaderboard, UGCHandle_t hUGC );
  SteamAPICall_t bbSteamAPI_ISteamUserStats_GetNumberOfCurrentPlayers( ISteamUserStats * Self );
  SteamAPICall_t bbSteamAPI_ISteamUserStats_RequestGlobalAchievementPercentages( ISteamUserStats * Self );
  int bbSteamAPI_ISteamUserStats_GetMostAchievedAchievementInfo( ISteamUserStats * Self, char * pchName, uint32 unNameBufLen, float * pflPercent, bool * pbAchieved );
  int bbSteamAPI_ISteamUserStats_GetNextMostAchievedAchievementInfo( ISteamUserStats * Self, int iIteratorPrevious, char * pchName, uint32 unNameBufLen, float * pflPercent, bool * pbAchieved );
  bool bbSteamAPI_ISteamUserStats_GetAchievementAchievedPercent( ISteamUserStats * Self, const char * pchName, float * pflPercent );
  SteamAPICall_t bbSteamAPI_ISteamUserStats_RequestGlobalStats( ISteamUserStats * Self, int nHistoryDays );
  bool bbSteamAPI_ISteamUserStats_GetGlobalStatInt64( ISteamUserStats * Self, const char * pchStatName, int64 * pData );
  bool bbSteamAPI_ISteamUserStats_GetGlobalStatDouble( ISteamUserStats * Self, const char * pchStatName, double * pData );
  int32 bbSteamAPI_ISteamUserStats_GetGlobalStatHistoryInt64( ISteamUserStats * Self, const char * pchStatName, int64 * pData, uint32 cubData );
  int32 bbSteamAPI_ISteamUserStats_GetGlobalStatHistoryDouble( ISteamUserStats * Self, const char * pchStatName, double * pData, uint32 cubData );
  bool bbSteamAPI_ISteamApps_BIsSubscribed( ISteamApps * Self );
  bool bbSteamAPI_ISteamApps_BIsLowViolence( ISteamApps * Self );
  bool bbSteamAPI_ISteamApps_BIsCybercafe( ISteamApps * Self );
  bool bbSteamAPI_ISteamApps_BIsVACBanned( ISteamApps * Self );
  const char * bbSteamAPI_ISteamApps_GetCurrentGameLanguage( ISteamApps * Self );
  const char * bbSteamAPI_ISteamApps_GetAvailableGameLanguages( ISteamApps * Self );
  bool bbSteamAPI_ISteamApps_BIsSubscribedApp( ISteamApps * Self, AppId_t appID );
  bool bbSteamAPI_ISteamApps_BIsDlcInstalled( ISteamApps * Self, AppId_t appID );
  uint32 bbSteamAPI_ISteamApps_GetEarliestPurchaseUnixTime( ISteamApps * Self, AppId_t nAppID );
  bool bbSteamAPI_ISteamApps_BIsSubscribedFromFreeWeekend( ISteamApps * Self );
  int bbSteamAPI_ISteamApps_GetDLCCount( ISteamApps * Self );
  bool bbSteamAPI_ISteamApps_BGetDLCDataByIndex( ISteamApps * Self, int iDLC, AppId_t * pAppID, bool * pbAvailable, char * pchName, int cchNameBufferSize );
  void bbSteamAPI_ISteamApps_InstallDLC( ISteamApps * Self, AppId_t nAppID );
  void bbSteamAPI_ISteamApps_UninstallDLC( ISteamApps * Self, AppId_t nAppID );
  void bbSteamAPI_ISteamApps_RequestAppProofOfPurchaseKey( ISteamApps * Self, AppId_t nAppID );
  bool bbSteamAPI_ISteamApps_GetCurrentBetaName( ISteamApps * Self, char * pchName, int cchNameBufferSize );
  bool bbSteamAPI_ISteamApps_MarkContentCorrupt( ISteamApps * Self, bool bMissingFilesOnly );
  uint32 bbSteamAPI_ISteamApps_GetInstalledDepots( ISteamApps * Self, AppId_t appID, DepotId_t * pvecDepots, uint32 cMaxDepots );
  uint32 bbSteamAPI_ISteamApps_GetAppInstallDir( ISteamApps * Self, AppId_t appID, char * pchFolder, uint32 cchFolderBufferSize );
  bool bbSteamAPI_ISteamApps_BIsAppInstalled( ISteamApps * Self, AppId_t appID );
  CSteamID bbSteamAPI_ISteamApps_GetAppOwner( ISteamApps * Self );
  const char * bbSteamAPI_ISteamApps_GetLaunchQueryParam( ISteamApps * Self, const char * pchKey );
  bool bbSteamAPI_ISteamApps_GetDlcDownloadProgress( ISteamApps * Self, AppId_t nAppID, uint64 * punBytesDownloaded, uint64 * punBytesTotal );
  int bbSteamAPI_ISteamApps_GetAppBuildId( ISteamApps * Self );
  void bbSteamAPI_ISteamApps_RequestAllProofOfPurchaseKeys( ISteamApps * Self );
  SteamAPICall_t bbSteamAPI_ISteamApps_GetFileDetails( ISteamApps * Self, const char * pszFileName );
  int bbSteamAPI_ISteamApps_GetLaunchCommandLine( ISteamApps * Self, char * pszCommandLine, int cubCommandLine );
  bool bbSteamAPI_ISteamApps_BIsSubscribedFromFamilySharing( ISteamApps * Self );
  bool bbSteamAPI_ISteamNetworking_SendP2PPacket( ISteamNetworking * Self, uint64_steamid steamIDRemote, const void * pubData, uint32 cubData, EP2PSend eP2PSendType, int nChannel );
  bool bbSteamAPI_ISteamNetworking_IsP2PPacketAvailable( ISteamNetworking * Self, uint32 * pcubMsgSize, int nChannel );
  bool bbSteamAPI_ISteamNetworking_ReadP2PPacket( ISteamNetworking * Self, void * pubDest, uint32 cubDest, uint32 * pcubMsgSize, CSteamID * psteamIDRemote, int nChannel );
  bool bbSteamAPI_ISteamNetworking_AcceptP2PSessionWithUser( ISteamNetworking * Self, uint64_steamid steamIDRemote );
  bool bbSteamAPI_ISteamNetworking_CloseP2PSessionWithUser( ISteamNetworking * Self, uint64_steamid steamIDRemote );
  bool bbSteamAPI_ISteamNetworking_CloseP2PChannelWithUser( ISteamNetworking * Self, uint64_steamid steamIDRemote, int nChannel );
  bool bbSteamAPI_ISteamNetworking_GetP2PSessionState( ISteamNetworking * Self, uint64_steamid steamIDRemote, P2PSessionState_t * pConnectionState );
  bool bbSteamAPI_ISteamNetworking_AllowP2PPacketRelay( ISteamNetworking * Self, bool bAllow );
  SNetListenSocket_t bbSteamAPI_ISteamNetworking_CreateListenSocket( ISteamNetworking * Self, int nVirtualP2PPort, SteamIPAddress_t nIP, uint16 nPort, bool bAllowUseOfPacketRelay );
  SNetSocket_t bbSteamAPI_ISteamNetworking_CreateP2PConnectionSocket( ISteamNetworking * Self, uint64_steamid steamIDTarget, int nVirtualPort, int nTimeoutSec, bool bAllowUseOfPacketRelay );
  SNetSocket_t bbSteamAPI_ISteamNetworking_CreateConnectionSocket( ISteamNetworking * Self, SteamIPAddress_t nIP, uint16 nPort, int nTimeoutSec );
  bool bbSteamAPI_ISteamNetworking_DestroySocket( ISteamNetworking * Self, SNetSocket_t hSocket, bool bNotifyRemoteEnd );
  bool bbSteamAPI_ISteamNetworking_DestroyListenSocket( ISteamNetworking * Self, SNetListenSocket_t hSocket, bool bNotifyRemoteEnd );
  bool bbSteamAPI_ISteamNetworking_SendDataOnSocket( ISteamNetworking * Self, SNetSocket_t hSocket, void * pubData, uint32 cubData, bool bReliable );
  bool bbSteamAPI_ISteamNetworking_IsDataAvailableOnSocket( ISteamNetworking * Self, SNetSocket_t hSocket, uint32 * pcubMsgSize );
  bool bbSteamAPI_ISteamNetworking_RetrieveDataFromSocket( ISteamNetworking * Self, SNetSocket_t hSocket, void * pubDest, uint32 cubDest, uint32 * pcubMsgSize );
  bool bbSteamAPI_ISteamNetworking_IsDataAvailable( ISteamNetworking * Self, SNetListenSocket_t hListenSocket, uint32 * pcubMsgSize, SNetSocket_t * phSocket );
  bool bbSteamAPI_ISteamNetworking_RetrieveData( ISteamNetworking * Self, SNetListenSocket_t hListenSocket, void * pubDest, uint32 cubDest, uint32 * pcubMsgSize, SNetSocket_t * phSocket );
  bool bbSteamAPI_ISteamNetworking_GetSocketInfo( ISteamNetworking * Self, SNetSocket_t hSocket, CSteamID * pSteamIDRemote, int * peSocketStatus, SteamIPAddress_t * punIPRemote, uint16 * punPortRemote );
  bool bbSteamAPI_ISteamNetworking_GetListenSocketInfo( ISteamNetworking * Self, SNetListenSocket_t hListenSocket, SteamIPAddress_t * pnIP, uint16 * pnPort );
  ESNetSocketConnectionType bbSteamAPI_ISteamNetworking_GetSocketConnectionType( ISteamNetworking * Self, SNetSocket_t hSocket );
  int bbSteamAPI_ISteamNetworking_GetMaxPacketSize( ISteamNetworking * Self, SNetSocket_t hSocket );
  ScreenshotHandle bbSteamAPI_ISteamScreenshots_WriteScreenshot( ISteamScreenshots * Self, void * pubRGB, uint32 cubRGB, int nWidth, int nHeight );
  ScreenshotHandle bbSteamAPI_ISteamScreenshots_AddScreenshotToLibrary( ISteamScreenshots * Self, const char * pchFilename, const char * pchThumbnailFilename, int nWidth, int nHeight );
  void bbSteamAPI_ISteamScreenshots_TriggerScreenshot( ISteamScreenshots * Self );
  void bbSteamAPI_ISteamScreenshots_HookScreenshots( ISteamScreenshots * Self, bool bHook );
  bool bbSteamAPI_ISteamScreenshots_SetLocation( ISteamScreenshots * Self, ScreenshotHandle hScreenshot, const char * pchLocation );
  bool bbSteamAPI_ISteamScreenshots_TagUser( ISteamScreenshots * Self, ScreenshotHandle hScreenshot, uint64_steamid steamID );
  bool bbSteamAPI_ISteamScreenshots_TagPublishedFile( ISteamScreenshots * Self, ScreenshotHandle hScreenshot, PublishedFileId_t unPublishedFileID );
  bool bbSteamAPI_ISteamScreenshots_IsScreenshotsHooked( ISteamScreenshots * Self );
  ScreenshotHandle bbSteamAPI_ISteamScreenshots_AddVRScreenshotToLibrary( ISteamScreenshots * Self, EVRScreenshotType eType, const char * pchFilename, const char * pchVRFilename );
  bool bbSteamAPI_ISteamMusic_BIsEnabled( ISteamMusic * Self );
  bool bbSteamAPI_ISteamMusic_BIsPlaying( ISteamMusic * Self );
  AudioPlayback_Status bbSteamAPI_ISteamMusic_GetPlaybackStatus( ISteamMusic * Self );
  void bbSteamAPI_ISteamMusic_Play( ISteamMusic * Self );
  void bbSteamAPI_ISteamMusic_Pause( ISteamMusic * Self );
  void bbSteamAPI_ISteamMusic_PlayPrevious( ISteamMusic * Self );
  void bbSteamAPI_ISteamMusic_PlayNext( ISteamMusic * Self );
  void bbSteamAPI_ISteamMusic_SetVolume( ISteamMusic * Self, float flVolume );
  float bbSteamAPI_ISteamMusic_GetVolume( ISteamMusic * Self );
  bool bbSteamAPI_ISteamMusicRemote_RegisterSteamMusicRemote( ISteamMusicRemote * Self, const char * pchName );
  bool bbSteamAPI_ISteamMusicRemote_DeregisterSteamMusicRemote( ISteamMusicRemote * Self );
  bool bbSteamAPI_ISteamMusicRemote_BIsCurrentMusicRemote( ISteamMusicRemote * Self );
  bool bbSteamAPI_ISteamMusicRemote_BActivationSuccess( ISteamMusicRemote * Self, bool bValue );
  bool bbSteamAPI_ISteamMusicRemote_SetDisplayName( ISteamMusicRemote * Self, const char * pchDisplayName );
  bool bbSteamAPI_ISteamMusicRemote_SetPNGIcon_64x64( ISteamMusicRemote * Self, void * pvBuffer, uint32 cbBufferLength );
  bool bbSteamAPI_ISteamMusicRemote_EnablePlayPrevious( ISteamMusicRemote * Self, bool bValue );
  bool bbSteamAPI_ISteamMusicRemote_EnablePlayNext( ISteamMusicRemote * Self, bool bValue );
  bool bbSteamAPI_ISteamMusicRemote_EnableShuffled( ISteamMusicRemote * Self, bool bValue );
  bool bbSteamAPI_ISteamMusicRemote_EnableLooped( ISteamMusicRemote * Self, bool bValue );
  bool bbSteamAPI_ISteamMusicRemote_EnableQueue( ISteamMusicRemote * Self, bool bValue );
  bool bbSteamAPI_ISteamMusicRemote_EnablePlaylists( ISteamMusicRemote * Self, bool bValue );
  bool bbSteamAPI_ISteamMusicRemote_UpdatePlaybackStatus( ISteamMusicRemote * Self, AudioPlayback_Status nStatus );
  bool bbSteamAPI_ISteamMusicRemote_UpdateShuffled( ISteamMusicRemote * Self, bool bValue );
  bool bbSteamAPI_ISteamMusicRemote_UpdateLooped( ISteamMusicRemote * Self, bool bValue );
  bool bbSteamAPI_ISteamMusicRemote_UpdateVolume( ISteamMusicRemote * Self, float flValue );
  bool bbSteamAPI_ISteamMusicRemote_CurrentEntryWillChange( ISteamMusicRemote * Self );
  bool bbSteamAPI_ISteamMusicRemote_CurrentEntryIsAvailable( ISteamMusicRemote * Self, bool bAvailable );
  bool bbSteamAPI_ISteamMusicRemote_UpdateCurrentEntryText( ISteamMusicRemote * Self, const char * pchText );
  bool bbSteamAPI_ISteamMusicRemote_UpdateCurrentEntryElapsedSeconds( ISteamMusicRemote * Self, int nValue );
  bool bbSteamAPI_ISteamMusicRemote_UpdateCurrentEntryCoverArt( ISteamMusicRemote * Self, void * pvBuffer, uint32 cbBufferLength );
  bool bbSteamAPI_ISteamMusicRemote_CurrentEntryDidChange( ISteamMusicRemote * Self );
  bool bbSteamAPI_ISteamMusicRemote_QueueWillChange( ISteamMusicRemote * Self );
  bool bbSteamAPI_ISteamMusicRemote_ResetQueueEntries( ISteamMusicRemote * Self );
  bool bbSteamAPI_ISteamMusicRemote_SetQueueEntry( ISteamMusicRemote * Self, int nID, int nPosition, const char * pchEntryText );
  bool bbSteamAPI_ISteamMusicRemote_SetCurrentQueueEntry( ISteamMusicRemote * Self, int nID );
  bool bbSteamAPI_ISteamMusicRemote_QueueDidChange( ISteamMusicRemote * Self );
  bool bbSteamAPI_ISteamMusicRemote_PlaylistWillChange( ISteamMusicRemote * Self );
  bool bbSteamAPI_ISteamMusicRemote_ResetPlaylistEntries( ISteamMusicRemote * Self );
  bool bbSteamAPI_ISteamMusicRemote_SetPlaylistEntry( ISteamMusicRemote * Self, int nID, int nPosition, const char * pchEntryText );
  bool bbSteamAPI_ISteamMusicRemote_SetCurrentPlaylistEntry( ISteamMusicRemote * Self, int nID );
  bool bbSteamAPI_ISteamMusicRemote_PlaylistDidChange( ISteamMusicRemote * Self );
  HTTPRequestHandle bbSteamAPI_ISteamHTTP_CreateHTTPRequest( ISteamHTTP * Self, EHTTPMethod eHTTPRequestMethod, const char * pchAbsoluteURL );
  bool bbSteamAPI_ISteamHTTP_SetHTTPRequestContextValue( ISteamHTTP * Self, HTTPRequestHandle hRequest, uint64 ulContextValue );
  bool bbSteamAPI_ISteamHTTP_SetHTTPRequestNetworkActivityTimeout( ISteamHTTP * Self, HTTPRequestHandle hRequest, uint32 unTimeoutSeconds );
  bool bbSteamAPI_ISteamHTTP_SetHTTPRequestHeaderValue( ISteamHTTP * Self, HTTPRequestHandle hRequest, const char * pchHeaderName, const char * pchHeaderValue );
  bool bbSteamAPI_ISteamHTTP_SetHTTPRequestGetOrPostParameter( ISteamHTTP * Self, HTTPRequestHandle hRequest, const char * pchParamName, const char * pchParamValue );
  bool bbSteamAPI_ISteamHTTP_SendHTTPRequest( ISteamHTTP * Self, HTTPRequestHandle hRequest, SteamAPICall_t * pCallHandle );
  bool bbSteamAPI_ISteamHTTP_SendHTTPRequestAndStreamResponse( ISteamHTTP * Self, HTTPRequestHandle hRequest, SteamAPICall_t * pCallHandle );
  bool bbSteamAPI_ISteamHTTP_DeferHTTPRequest( ISteamHTTP * Self, HTTPRequestHandle hRequest );
  bool bbSteamAPI_ISteamHTTP_PrioritizeHTTPRequest( ISteamHTTP * Self, HTTPRequestHandle hRequest );
  bool bbSteamAPI_ISteamHTTP_GetHTTPResponseHeaderSize( ISteamHTTP * Self, HTTPRequestHandle hRequest, const char * pchHeaderName, uint32 * unResponseHeaderSize );
  bool bbSteamAPI_ISteamHTTP_GetHTTPResponseHeaderValue( ISteamHTTP * Self, HTTPRequestHandle hRequest, const char * pchHeaderName, uint8 * pHeaderValueBuffer, uint32 unBufferSize );
  bool bbSteamAPI_ISteamHTTP_GetHTTPResponseBodySize( ISteamHTTP * Self, HTTPRequestHandle hRequest, uint32 * unBodySize );
  bool bbSteamAPI_ISteamHTTP_GetHTTPResponseBodyData( ISteamHTTP * Self, HTTPRequestHandle hRequest, uint8 * pBodyDataBuffer, uint32 unBufferSize );
  bool bbSteamAPI_ISteamHTTP_GetHTTPStreamingResponseBodyData( ISteamHTTP * Self, HTTPRequestHandle hRequest, uint32 cOffset, uint8 * pBodyDataBuffer, uint32 unBufferSize );
  bool bbSteamAPI_ISteamHTTP_ReleaseHTTPRequest( ISteamHTTP * Self, HTTPRequestHandle hRequest );
  bool bbSteamAPI_ISteamHTTP_GetHTTPDownloadProgressPct( ISteamHTTP * Self, HTTPRequestHandle hRequest, float * pflPercentOut );
  bool bbSteamAPI_ISteamHTTP_SetHTTPRequestRawPostBody( ISteamHTTP * Self, HTTPRequestHandle hRequest, const char * pchContentType, uint8 * pubBody, uint32 unBodyLen );
  HTTPCookieContainerHandle bbSteamAPI_ISteamHTTP_CreateCookieContainer( ISteamHTTP * Self, bool bAllowResponsesToModify );
  bool bbSteamAPI_ISteamHTTP_ReleaseCookieContainer( ISteamHTTP * Self, HTTPCookieContainerHandle hCookieContainer );
  bool bbSteamAPI_ISteamHTTP_SetCookie( ISteamHTTP * Self, HTTPCookieContainerHandle hCookieContainer, const char * pchHost, const char * pchUrl, const char * pchCookie );
  bool bbSteamAPI_ISteamHTTP_SetHTTPRequestCookieContainer( ISteamHTTP * Self, HTTPRequestHandle hRequest, HTTPCookieContainerHandle hCookieContainer );
  bool bbSteamAPI_ISteamHTTP_SetHTTPRequestUserAgentInfo( ISteamHTTP * Self, HTTPRequestHandle hRequest, const char * pchUserAgentInfo );
  bool bbSteamAPI_ISteamHTTP_SetHTTPRequestRequiresVerifiedCertificate( ISteamHTTP * Self, HTTPRequestHandle hRequest, bool bRequireVerifiedCertificate );
  bool bbSteamAPI_ISteamHTTP_SetHTTPRequestAbsoluteTimeoutMS( ISteamHTTP * Self, HTTPRequestHandle hRequest, uint32 unMilliseconds );
  bool bbSteamAPI_ISteamHTTP_GetHTTPRequestWasTimedOut( ISteamHTTP * Self, HTTPRequestHandle hRequest, bool * pbWasTimedOut );
  bool bbSteamAPI_ISteamInput_Init( ISteamInput * Self );
  bool bbSteamAPI_ISteamInput_Shutdown( ISteamInput * Self );
  void bbSteamAPI_ISteamInput_RunFrame( ISteamInput * Self );
  int bbSteamAPI_ISteamInput_GetConnectedControllers( ISteamInput * Self, InputHandle_t * handlesOut );
  InputActionSetHandle_t bbSteamAPI_ISteamInput_GetActionSetHandle( ISteamInput * Self, const char * pszActionSetName );
  void bbSteamAPI_ISteamInput_ActivateActionSet( ISteamInput * Self, InputHandle_t inputHandle, InputActionSetHandle_t actionSetHandle );
  InputActionSetHandle_t bbSteamAPI_ISteamInput_GetCurrentActionSet( ISteamInput * Self, InputHandle_t inputHandle );
  void bbSteamAPI_ISteamInput_ActivateActionSetLayer( ISteamInput * Self, InputHandle_t inputHandle, InputActionSetHandle_t actionSetLayerHandle );
  void bbSteamAPI_ISteamInput_DeactivateActionSetLayer( ISteamInput * Self, InputHandle_t inputHandle, InputActionSetHandle_t actionSetLayerHandle );
  void bbSteamAPI_ISteamInput_DeactivateAllActionSetLayers( ISteamInput * Self, InputHandle_t inputHandle );
  int bbSteamAPI_ISteamInput_GetActiveActionSetLayers( ISteamInput * Self, InputHandle_t inputHandle, InputActionSetHandle_t * handlesOut );
  InputDigitalActionHandle_t bbSteamAPI_ISteamInput_GetDigitalActionHandle( ISteamInput * Self, const char * pszActionName );
  InputDigitalActionData_t bbSteamAPI_ISteamInput_GetDigitalActionData( ISteamInput * Self, InputHandle_t inputHandle, InputDigitalActionHandle_t digitalActionHandle );
  int bbSteamAPI_ISteamInput_GetDigitalActionOrigins( ISteamInput * Self, InputHandle_t inputHandle, InputActionSetHandle_t actionSetHandle, InputDigitalActionHandle_t digitalActionHandle, EInputActionOrigin * originsOut );
  InputAnalogActionHandle_t bbSteamAPI_ISteamInput_GetAnalogActionHandle( ISteamInput * Self, const char * pszActionName );
  InputAnalogActionData_t bbSteamAPI_ISteamInput_GetAnalogActionData( ISteamInput * Self, InputHandle_t inputHandle, InputAnalogActionHandle_t analogActionHandle );
  int bbSteamAPI_ISteamInput_GetAnalogActionOrigins( ISteamInput * Self, InputHandle_t inputHandle, InputActionSetHandle_t actionSetHandle, InputAnalogActionHandle_t analogActionHandle, EInputActionOrigin * originsOut );
  const char * bbSteamAPI_ISteamInput_GetGlyphForActionOrigin( ISteamInput * Self, EInputActionOrigin eOrigin );
  const char * bbSteamAPI_ISteamInput_GetStringForActionOrigin( ISteamInput * Self, EInputActionOrigin eOrigin );
  void bbSteamAPI_ISteamInput_StopAnalogActionMomentum( ISteamInput * Self, InputHandle_t inputHandle, InputAnalogActionHandle_t eAction );
  InputMotionData_t bbSteamAPI_ISteamInput_GetMotionData( ISteamInput * Self, InputHandle_t inputHandle );
  void bbSteamAPI_ISteamInput_TriggerVibration( ISteamInput * Self, InputHandle_t inputHandle, unsigned short usLeftSpeed, unsigned short usRightSpeed );
  void bbSteamAPI_ISteamInput_SetLEDColor( ISteamInput * Self, InputHandle_t inputHandle, uint8 nColorR, uint8 nColorG, uint8 nColorB, unsigned int nFlags );
  void bbSteamAPI_ISteamInput_TriggerHapticPulse( ISteamInput * Self, InputHandle_t inputHandle, ESteamControllerPad eTargetPad, unsigned short usDurationMicroSec );
  void bbSteamAPI_ISteamInput_TriggerRepeatedHapticPulse( ISteamInput * Self, InputHandle_t inputHandle, ESteamControllerPad eTargetPad, unsigned short usDurationMicroSec, unsigned short usOffMicroSec, unsigned short unRepeat, unsigned int nFlags );
  bool bbSteamAPI_ISteamInput_ShowBindingPanel( ISteamInput * Self, InputHandle_t inputHandle );
  ESteamInputType bbSteamAPI_ISteamInput_GetInputTypeForHandle( ISteamInput * Self, InputHandle_t inputHandle );
  InputHandle_t bbSteamAPI_ISteamInput_GetControllerForGamepadIndex( ISteamInput * Self, int nIndex );
  int bbSteamAPI_ISteamInput_GetGamepadIndexForController( ISteamInput * Self, InputHandle_t ulinputHandle );
  const char * bbSteamAPI_ISteamInput_GetStringForXboxOrigin( ISteamInput * Self, EXboxOrigin eOrigin );
  const char * bbSteamAPI_ISteamInput_GetGlyphForXboxOrigin( ISteamInput * Self, EXboxOrigin eOrigin );
  EInputActionOrigin bbSteamAPI_ISteamInput_GetActionOriginFromXboxOrigin( ISteamInput * Self, InputHandle_t inputHandle, EXboxOrigin eOrigin );
  EInputActionOrigin bbSteamAPI_ISteamInput_TranslateActionOrigin( ISteamInput * Self, ESteamInputType eDestinationInputType, EInputActionOrigin eSourceOrigin );
  bool bbSteamAPI_ISteamInput_GetDeviceBindingRevision( ISteamInput * Self, InputHandle_t inputHandle, int * pMajor, int * pMinor );
  uint32 bbSteamAPI_ISteamInput_GetRemotePlaySessionID( ISteamInput * Self, InputHandle_t inputHandle );
  bool bbSteamAPI_ISteamController_Init( ISteamController * Self );
  bool bbSteamAPI_ISteamController_Shutdown( ISteamController * Self );
  void bbSteamAPI_ISteamController_RunFrame( ISteamController * Self );
  int bbSteamAPI_ISteamController_GetConnectedControllers( ISteamController * Self, ControllerHandle_t * handlesOut );
  ControllerActionSetHandle_t bbSteamAPI_ISteamController_GetActionSetHandle( ISteamController * Self, const char * pszActionSetName );
  void bbSteamAPI_ISteamController_ActivateActionSet( ISteamController * Self, ControllerHandle_t controllerHandle, ControllerActionSetHandle_t actionSetHandle );
  ControllerActionSetHandle_t bbSteamAPI_ISteamController_GetCurrentActionSet( ISteamController * Self, ControllerHandle_t controllerHandle );
  void bbSteamAPI_ISteamController_ActivateActionSetLayer( ISteamController * Self, ControllerHandle_t controllerHandle, ControllerActionSetHandle_t actionSetLayerHandle );
  void bbSteamAPI_ISteamController_DeactivateActionSetLayer( ISteamController * Self, ControllerHandle_t controllerHandle, ControllerActionSetHandle_t actionSetLayerHandle );
  void bbSteamAPI_ISteamController_DeactivateAllActionSetLayers( ISteamController * Self, ControllerHandle_t controllerHandle );
  int bbSteamAPI_ISteamController_GetActiveActionSetLayers( ISteamController * Self, ControllerHandle_t controllerHandle, ControllerActionSetHandle_t * handlesOut );
  ControllerDigitalActionHandle_t bbSteamAPI_ISteamController_GetDigitalActionHandle( ISteamController * Self, const char * pszActionName );
  InputDigitalActionData_t bbSteamAPI_ISteamController_GetDigitalActionData( ISteamController * Self, ControllerHandle_t controllerHandle, ControllerDigitalActionHandle_t digitalActionHandle );
  int bbSteamAPI_ISteamController_GetDigitalActionOrigins( ISteamController * Self, ControllerHandle_t controllerHandle, ControllerActionSetHandle_t actionSetHandle, ControllerDigitalActionHandle_t digitalActionHandle, EControllerActionOrigin * originsOut );
  ControllerAnalogActionHandle_t bbSteamAPI_ISteamController_GetAnalogActionHandle( ISteamController * Self, const char * pszActionName );
  InputAnalogActionData_t bbSteamAPI_ISteamController_GetAnalogActionData( ISteamController * Self, ControllerHandle_t controllerHandle, ControllerAnalogActionHandle_t analogActionHandle );
  int bbSteamAPI_ISteamController_GetAnalogActionOrigins( ISteamController * Self, ControllerHandle_t controllerHandle, ControllerActionSetHandle_t actionSetHandle, ControllerAnalogActionHandle_t analogActionHandle, EControllerActionOrigin * originsOut );
  const char * bbSteamAPI_ISteamController_GetGlyphForActionOrigin( ISteamController * Self, EControllerActionOrigin eOrigin );
  const char * bbSteamAPI_ISteamController_GetStringForActionOrigin( ISteamController * Self, EControllerActionOrigin eOrigin );
  void bbSteamAPI_ISteamController_StopAnalogActionMomentum( ISteamController * Self, ControllerHandle_t controllerHandle, ControllerAnalogActionHandle_t eAction );
  InputMotionData_t bbSteamAPI_ISteamController_GetMotionData( ISteamController * Self, ControllerHandle_t controllerHandle );
  void bbSteamAPI_ISteamController_TriggerHapticPulse( ISteamController * Self, ControllerHandle_t controllerHandle, ESteamControllerPad eTargetPad, unsigned short usDurationMicroSec );
  void bbSteamAPI_ISteamController_TriggerRepeatedHapticPulse( ISteamController * Self, ControllerHandle_t controllerHandle, ESteamControllerPad eTargetPad, unsigned short usDurationMicroSec, unsigned short usOffMicroSec, unsigned short unRepeat, unsigned int nFlags );
  void bbSteamAPI_ISteamController_TriggerVibration( ISteamController * Self, ControllerHandle_t controllerHandle, unsigned short usLeftSpeed, unsigned short usRightSpeed );
  void bbSteamAPI_ISteamController_SetLEDColor( ISteamController * Self, ControllerHandle_t controllerHandle, uint8 nColorR, uint8 nColorG, uint8 nColorB, unsigned int nFlags );
  bool bbSteamAPI_ISteamController_ShowBindingPanel( ISteamController * Self, ControllerHandle_t controllerHandle );
  ESteamInputType bbSteamAPI_ISteamController_GetInputTypeForHandle( ISteamController * Self, ControllerHandle_t controllerHandle );
  ControllerHandle_t bbSteamAPI_ISteamController_GetControllerForGamepadIndex( ISteamController * Self, int nIndex );
  int bbSteamAPI_ISteamController_GetGamepadIndexForController( ISteamController * Self, ControllerHandle_t ulControllerHandle );
  const char * bbSteamAPI_ISteamController_GetStringForXboxOrigin( ISteamController * Self, EXboxOrigin eOrigin );
  const char * bbSteamAPI_ISteamController_GetGlyphForXboxOrigin( ISteamController * Self, EXboxOrigin eOrigin );
  EControllerActionOrigin bbSteamAPI_ISteamController_GetActionOriginFromXboxOrigin( ISteamController * Self, ControllerHandle_t controllerHandle, EXboxOrigin eOrigin );
  EControllerActionOrigin bbSteamAPI_ISteamController_TranslateActionOrigin( ISteamController * Self, ESteamInputType eDestinationInputType, EControllerActionOrigin eSourceOrigin );
  bool bbSteamAPI_ISteamController_GetControllerBindingRevision( ISteamController * Self, ControllerHandle_t controllerHandle, int * pMajor, int * pMinor );
  UGCQueryHandle_t bbSteamAPI_ISteamUGC_CreateQueryUserUGCRequest( ISteamUGC * Self, AccountID_t unAccountID, EUserUGCList eListType, EUGCMatchingUGCType eMatchingUGCType, EUserUGCListSortOrder eSortOrder, AppId_t nCreatorAppID, AppId_t nConsumerAppID, uint32 unPage );
  UGCQueryHandle_t bbSteamAPI_ISteamUGC_CreateQueryAllUGCRequestPage( ISteamUGC * Self, EUGCQuery eQueryType, EUGCMatchingUGCType eMatchingeMatchingUGCTypeFileType, AppId_t nCreatorAppID, AppId_t nConsumerAppID, uint32 unPage );
  UGCQueryHandle_t bbSteamAPI_ISteamUGC_CreateQueryAllUGCRequestCursor( ISteamUGC * Self, EUGCQuery eQueryType, EUGCMatchingUGCType eMatchingeMatchingUGCTypeFileType, AppId_t nCreatorAppID, AppId_t nConsumerAppID, const char * pchCursor );
  UGCQueryHandle_t bbSteamAPI_ISteamUGC_CreateQueryUGCDetailsRequest( ISteamUGC * Self, PublishedFileId_t * pvecPublishedFileID, uint32 unNumPublishedFileIDs );
  SteamAPICall_t bbSteamAPI_ISteamUGC_SendQueryUGCRequest( ISteamUGC * Self, UGCQueryHandle_t handle );
  bool bbSteamAPI_ISteamUGC_GetQueryUGCResult( ISteamUGC * Self, UGCQueryHandle_t handle, uint32 index, SteamUGCDetails_t * pDetails );
  bool bbSteamAPI_ISteamUGC_GetQueryUGCPreviewURL( ISteamUGC * Self, UGCQueryHandle_t handle, uint32 index, char * pchURL, uint32 cchURLSize );
  bool bbSteamAPI_ISteamUGC_GetQueryUGCMetadata( ISteamUGC * Self, UGCQueryHandle_t handle, uint32 index, char * pchMetadata, uint32 cchMetadatasize );
  bool bbSteamAPI_ISteamUGC_GetQueryUGCChildren( ISteamUGC * Self, UGCQueryHandle_t handle, uint32 index, PublishedFileId_t * pvecPublishedFileID, uint32 cMaxEntries );
  bool bbSteamAPI_ISteamUGC_GetQueryUGCStatistic( ISteamUGC * Self, UGCQueryHandle_t handle, uint32 index, EItemStatistic eStatType, uint64 * pStatValue );
  uint32 bbSteamAPI_ISteamUGC_GetQueryUGCNumAdditionalPreviews( ISteamUGC * Self, UGCQueryHandle_t handle, uint32 index );
  bool bbSteamAPI_ISteamUGC_GetQueryUGCAdditionalPreview( ISteamUGC * Self, UGCQueryHandle_t handle, uint32 index, uint32 previewIndex, char * pchURLOrVideoID, uint32 cchURLSize, char * pchOriginalFileName, uint32 cchOriginalFileNameSize, EItemPreviewType * pPreviewType );
  uint32 bbSteamAPI_ISteamUGC_GetQueryUGCNumKeyValueTags( ISteamUGC * Self, UGCQueryHandle_t handle, uint32 index );
  bool bbSteamAPI_ISteamUGC_GetQueryUGCKeyValueTag( ISteamUGC * Self, UGCQueryHandle_t handle, uint32 index, uint32 keyValueTagIndex, char * pchKey, uint32 cchKeySize, char * pchValue, uint32 cchValueSize );
  bool bbSteamAPI_ISteamUGC_GetQueryFirstUGCKeyValueTag( ISteamUGC * Self, UGCQueryHandle_t handle, uint32 index, const char * pchKey, char * pchValue, uint32 cchValueSize );
  bool bbSteamAPI_ISteamUGC_ReleaseQueryUGCRequest( ISteamUGC * Self, UGCQueryHandle_t handle );
  bool bbSteamAPI_ISteamUGC_AddRequiredTag( ISteamUGC * Self, UGCQueryHandle_t handle, const char * pTagName );
  bool bbSteamAPI_ISteamUGC_AddRequiredTagGroup( ISteamUGC * Self, UGCQueryHandle_t handle, const SteamParamStringArray_t * pTagGroups );
  bool bbSteamAPI_ISteamUGC_AddExcludedTag( ISteamUGC * Self, UGCQueryHandle_t handle, const char * pTagName );
  bool bbSteamAPI_ISteamUGC_SetReturnOnlyIDs( ISteamUGC * Self, UGCQueryHandle_t handle, bool bReturnOnlyIDs );
  bool bbSteamAPI_ISteamUGC_SetReturnKeyValueTags( ISteamUGC * Self, UGCQueryHandle_t handle, bool bReturnKeyValueTags );
  bool bbSteamAPI_ISteamUGC_SetReturnLongDescription( ISteamUGC * Self, UGCQueryHandle_t handle, bool bReturnLongDescription );
  bool bbSteamAPI_ISteamUGC_SetReturnMetadata( ISteamUGC * Self, UGCQueryHandle_t handle, bool bReturnMetadata );
  bool bbSteamAPI_ISteamUGC_SetReturnChildren( ISteamUGC * Self, UGCQueryHandle_t handle, bool bReturnChildren );
  bool bbSteamAPI_ISteamUGC_SetReturnAdditionalPreviews( ISteamUGC * Self, UGCQueryHandle_t handle, bool bReturnAdditionalPreviews );
  bool bbSteamAPI_ISteamUGC_SetReturnTotalOnly( ISteamUGC * Self, UGCQueryHandle_t handle, bool bReturnTotalOnly );
  bool bbSteamAPI_ISteamUGC_SetReturnPlaytimeStats( ISteamUGC * Self, UGCQueryHandle_t handle, uint32 unDays );
  bool bbSteamAPI_ISteamUGC_SetLanguage( ISteamUGC * Self, UGCQueryHandle_t handle, const char * pchLanguage );
  bool bbSteamAPI_ISteamUGC_SetAllowCachedResponse( ISteamUGC * Self, UGCQueryHandle_t handle, uint32 unMaxAgeSeconds );
  bool bbSteamAPI_ISteamUGC_SetCloudFileNameFilter( ISteamUGC * Self, UGCQueryHandle_t handle, const char * pMatchCloudFileName );
  bool bbSteamAPI_ISteamUGC_SetMatchAnyTag( ISteamUGC * Self, UGCQueryHandle_t handle, bool bMatchAnyTag );
  bool bbSteamAPI_ISteamUGC_SetSearchText( ISteamUGC * Self, UGCQueryHandle_t handle, const char * pSearchText );
  bool bbSteamAPI_ISteamUGC_SetRankedByTrendDays( ISteamUGC * Self, UGCQueryHandle_t handle, uint32 unDays );
  bool bbSteamAPI_ISteamUGC_AddRequiredKeyValueTag( ISteamUGC * Self, UGCQueryHandle_t handle, const char * pKey, const char * pValue );
  SteamAPICall_t bbSteamAPI_ISteamUGC_RequestUGCDetails( ISteamUGC * Self, PublishedFileId_t nPublishedFileID, uint32 unMaxAgeSeconds );
  SteamAPICall_t bbSteamAPI_ISteamUGC_CreateItem( ISteamUGC * Self, AppId_t nConsumerAppId, EWorkshopFileType eFileType );
  UGCUpdateHandle_t bbSteamAPI_ISteamUGC_StartItemUpdate( ISteamUGC * Self, AppId_t nConsumerAppId, PublishedFileId_t nPublishedFileID );
  bool bbSteamAPI_ISteamUGC_SetItemTitle( ISteamUGC * Self, UGCUpdateHandle_t handle, const char * pchTitle );
  bool bbSteamAPI_ISteamUGC_SetItemDescription( ISteamUGC * Self, UGCUpdateHandle_t handle, const char * pchDescription );
  bool bbSteamAPI_ISteamUGC_SetItemUpdateLanguage( ISteamUGC * Self, UGCUpdateHandle_t handle, const char * pchLanguage );
  bool bbSteamAPI_ISteamUGC_SetItemMetadata( ISteamUGC * Self, UGCUpdateHandle_t handle, const char * pchMetaData );
  bool bbSteamAPI_ISteamUGC_SetItemVisibility( ISteamUGC * Self, UGCUpdateHandle_t handle, ERemoteStoragePublishedFileVisibility eVisibility );
  bool bbSteamAPI_ISteamUGC_SetItemTags( ISteamUGC * Self, UGCUpdateHandle_t updateHandle, const SteamParamStringArray_t * pTags );
  bool bbSteamAPI_ISteamUGC_SetItemContent( ISteamUGC * Self, UGCUpdateHandle_t handle, const char * pszContentFolder );
  bool bbSteamAPI_ISteamUGC_SetItemPreview( ISteamUGC * Self, UGCUpdateHandle_t handle, const char * pszPreviewFile );
  bool bbSteamAPI_ISteamUGC_SetAllowLegacyUpload( ISteamUGC * Self, UGCUpdateHandle_t handle, bool bAllowLegacyUpload );
  bool bbSteamAPI_ISteamUGC_RemoveAllItemKeyValueTags( ISteamUGC * Self, UGCUpdateHandle_t handle );
  bool bbSteamAPI_ISteamUGC_RemoveItemKeyValueTags( ISteamUGC * Self, UGCUpdateHandle_t handle, const char * pchKey );
  bool bbSteamAPI_ISteamUGC_AddItemKeyValueTag( ISteamUGC * Self, UGCUpdateHandle_t handle, const char * pchKey, const char * pchValue );
  bool bbSteamAPI_ISteamUGC_AddItemPreviewFile( ISteamUGC * Self, UGCUpdateHandle_t handle, const char * pszPreviewFile, EItemPreviewType type );
  bool bbSteamAPI_ISteamUGC_AddItemPreviewVideo( ISteamUGC * Self, UGCUpdateHandle_t handle, const char * pszVideoID );
  bool bbSteamAPI_ISteamUGC_UpdateItemPreviewFile( ISteamUGC * Self, UGCUpdateHandle_t handle, uint32 index, const char * pszPreviewFile );
  bool bbSteamAPI_ISteamUGC_UpdateItemPreviewVideo( ISteamUGC * Self, UGCUpdateHandle_t handle, uint32 index, const char * pszVideoID );
  bool bbSteamAPI_ISteamUGC_RemoveItemPreview( ISteamUGC * Self, UGCUpdateHandle_t handle, uint32 index );
  SteamAPICall_t bbSteamAPI_ISteamUGC_SubmitItemUpdate( ISteamUGC * Self, UGCUpdateHandle_t handle, const char * pchChangeNote );
  EItemUpdateStatus bbSteamAPI_ISteamUGC_GetItemUpdateProgress( ISteamUGC * Self, UGCUpdateHandle_t handle, uint64 * punBytesProcessed, uint64 * punBytesTotal );
  SteamAPICall_t bbSteamAPI_ISteamUGC_SetUserItemVote( ISteamUGC * Self, PublishedFileId_t nPublishedFileID, bool bVoteUp );
  SteamAPICall_t bbSteamAPI_ISteamUGC_GetUserItemVote( ISteamUGC * Self, PublishedFileId_t nPublishedFileID );
  SteamAPICall_t bbSteamAPI_ISteamUGC_AddItemToFavorites( ISteamUGC * Self, AppId_t nAppId, PublishedFileId_t nPublishedFileID );
  SteamAPICall_t bbSteamAPI_ISteamUGC_RemoveItemFromFavorites( ISteamUGC * Self, AppId_t nAppId, PublishedFileId_t nPublishedFileID );
  SteamAPICall_t bbSteamAPI_ISteamUGC_SubscribeItem( ISteamUGC * Self, PublishedFileId_t nPublishedFileID );
  SteamAPICall_t bbSteamAPI_ISteamUGC_UnsubscribeItem( ISteamUGC * Self, PublishedFileId_t nPublishedFileID );
  uint32 bbSteamAPI_ISteamUGC_GetNumSubscribedItems( ISteamUGC * Self );
  uint32 bbSteamAPI_ISteamUGC_GetSubscribedItems( ISteamUGC * Self, PublishedFileId_t * pvecPublishedFileID, uint32 cMaxEntries );
  uint32 bbSteamAPI_ISteamUGC_GetItemState( ISteamUGC * Self, PublishedFileId_t nPublishedFileID );
  bool bbSteamAPI_ISteamUGC_GetItemInstallInfo( ISteamUGC * Self, PublishedFileId_t nPublishedFileID, uint64 * punSizeOnDisk, char * pchFolder, uint32 cchFolderSize, uint32 * punTimeStamp );
  bool bbSteamAPI_ISteamUGC_GetItemDownloadInfo( ISteamUGC * Self, PublishedFileId_t nPublishedFileID, uint64 * punBytesDownloaded, uint64 * punBytesTotal );
  bool bbSteamAPI_ISteamUGC_DownloadItem( ISteamUGC * Self, PublishedFileId_t nPublishedFileID, bool bHighPriority );
  bool bbSteamAPI_ISteamUGC_BInitWorkshopForGameServer( ISteamUGC * Self, DepotId_t unWorkshopDepotID, const char * pszFolder );
  void bbSteamAPI_ISteamUGC_SuspendDownloads( ISteamUGC * Self, bool bSuspend );
  SteamAPICall_t bbSteamAPI_ISteamUGC_StartPlaytimeTracking( ISteamUGC * Self, PublishedFileId_t * pvecPublishedFileID, uint32 unNumPublishedFileIDs );
  SteamAPICall_t bbSteamAPI_ISteamUGC_StopPlaytimeTracking( ISteamUGC * Self, PublishedFileId_t * pvecPublishedFileID, uint32 unNumPublishedFileIDs );
  SteamAPICall_t bbSteamAPI_ISteamUGC_StopPlaytimeTrackingForAllItems( ISteamUGC * Self );
  SteamAPICall_t bbSteamAPI_ISteamUGC_AddDependency( ISteamUGC * Self, PublishedFileId_t nParentPublishedFileID, PublishedFileId_t nChildPublishedFileID );
  SteamAPICall_t bbSteamAPI_ISteamUGC_RemoveDependency( ISteamUGC * Self, PublishedFileId_t nParentPublishedFileID, PublishedFileId_t nChildPublishedFileID );
  SteamAPICall_t bbSteamAPI_ISteamUGC_AddAppDependency( ISteamUGC * Self, PublishedFileId_t nPublishedFileID, AppId_t nAppID );
  SteamAPICall_t bbSteamAPI_ISteamUGC_RemoveAppDependency( ISteamUGC * Self, PublishedFileId_t nPublishedFileID, AppId_t nAppID );
  SteamAPICall_t bbSteamAPI_ISteamUGC_GetAppDependencies( ISteamUGC * Self, PublishedFileId_t nPublishedFileID );
  SteamAPICall_t bbSteamAPI_ISteamUGC_DeleteItem( ISteamUGC * Self, PublishedFileId_t nPublishedFileID );
  uint32 bbSteamAPI_ISteamAppList_GetNumInstalledApps( ISteamAppList * Self );
  uint32 bbSteamAPI_ISteamAppList_GetInstalledApps( ISteamAppList * Self, AppId_t * pvecAppID, uint32 unMaxAppIDs );
  int bbSteamAPI_ISteamAppList_GetAppName( ISteamAppList * Self, AppId_t nAppID, char * pchName, int cchNameMax );
  int bbSteamAPI_ISteamAppList_GetAppInstallDir( ISteamAppList * Self, AppId_t nAppID, char * pchDirectory, int cchNameMax );
  int bbSteamAPI_ISteamAppList_GetAppBuildId( ISteamAppList * Self, AppId_t nAppID );
  bool bbSteamAPI_ISteamHTMLSurface_Init( ISteamHTMLSurface * Self );
  bool bbSteamAPI_ISteamHTMLSurface_Shutdown( ISteamHTMLSurface * Self );
  SteamAPICall_t bbSteamAPI_ISteamHTMLSurface_CreateBrowser( ISteamHTMLSurface * Self, const char * pchUserAgent, const char * pchUserCSS );
  void bbSteamAPI_ISteamHTMLSurface_RemoveBrowser( ISteamHTMLSurface * Self, HHTMLBrowser unBrowserHandle );
  void bbSteamAPI_ISteamHTMLSurface_LoadURL( ISteamHTMLSurface * Self, HHTMLBrowser unBrowserHandle, const char * pchURL, const char * pchPostData );
  void bbSteamAPI_ISteamHTMLSurface_SetSize( ISteamHTMLSurface * Self, HHTMLBrowser unBrowserHandle, uint32 unWidth, uint32 unHeight );
  void bbSteamAPI_ISteamHTMLSurface_StopLoad( ISteamHTMLSurface * Self, HHTMLBrowser unBrowserHandle );
  void bbSteamAPI_ISteamHTMLSurface_Reload( ISteamHTMLSurface * Self, HHTMLBrowser unBrowserHandle );
  void bbSteamAPI_ISteamHTMLSurface_GoBack( ISteamHTMLSurface * Self, HHTMLBrowser unBrowserHandle );
  void bbSteamAPI_ISteamHTMLSurface_GoForward( ISteamHTMLSurface * Self, HHTMLBrowser unBrowserHandle );
  void bbSteamAPI_ISteamHTMLSurface_AddHeader( ISteamHTMLSurface * Self, HHTMLBrowser unBrowserHandle, const char * pchKey, const char * pchValue );
  void bbSteamAPI_ISteamHTMLSurface_ExecuteJavascript( ISteamHTMLSurface * Self, HHTMLBrowser unBrowserHandle, const char * pchScript );
  void bbSteamAPI_ISteamHTMLSurface_MouseUp( ISteamHTMLSurface * Self, HHTMLBrowser unBrowserHandle, ISteamHTMLSurface::EHTMLMouseButton eMouseButton );
  void bbSteamAPI_ISteamHTMLSurface_MouseDown( ISteamHTMLSurface * Self, HHTMLBrowser unBrowserHandle, ISteamHTMLSurface::EHTMLMouseButton eMouseButton );
  void bbSteamAPI_ISteamHTMLSurface_MouseDoubleClick( ISteamHTMLSurface * Self, HHTMLBrowser unBrowserHandle, ISteamHTMLSurface::EHTMLMouseButton eMouseButton );
  void bbSteamAPI_ISteamHTMLSurface_MouseMove( ISteamHTMLSurface * Self, HHTMLBrowser unBrowserHandle, int x, int y );
  void bbSteamAPI_ISteamHTMLSurface_MouseWheel( ISteamHTMLSurface * Self, HHTMLBrowser unBrowserHandle, int32 nDelta );
  void bbSteamAPI_ISteamHTMLSurface_KeyDown( ISteamHTMLSurface * Self, HHTMLBrowser unBrowserHandle, uint32 nNativeKeyCode, ISteamHTMLSurface::EHTMLKeyModifiers eHTMLKeyModifiers, bool bIsSystemKey );
  void bbSteamAPI_ISteamHTMLSurface_KeyUp( ISteamHTMLSurface * Self, HHTMLBrowser unBrowserHandle, uint32 nNativeKeyCode, ISteamHTMLSurface::EHTMLKeyModifiers eHTMLKeyModifiers );
  void bbSteamAPI_ISteamHTMLSurface_KeyChar( ISteamHTMLSurface * Self, HHTMLBrowser unBrowserHandle, uint32 cUnicodeChar, ISteamHTMLSurface::EHTMLKeyModifiers eHTMLKeyModifiers );
  void bbSteamAPI_ISteamHTMLSurface_SetHorizontalScroll( ISteamHTMLSurface * Self, HHTMLBrowser unBrowserHandle, uint32 nAbsolutePixelScroll );
  void bbSteamAPI_ISteamHTMLSurface_SetVerticalScroll( ISteamHTMLSurface * Self, HHTMLBrowser unBrowserHandle, uint32 nAbsolutePixelScroll );
  void bbSteamAPI_ISteamHTMLSurface_SetKeyFocus( ISteamHTMLSurface * Self, HHTMLBrowser unBrowserHandle, bool bHasKeyFocus );
  void bbSteamAPI_ISteamHTMLSurface_ViewSource( ISteamHTMLSurface * Self, HHTMLBrowser unBrowserHandle );
  void bbSteamAPI_ISteamHTMLSurface_CopyToClipboard( ISteamHTMLSurface * Self, HHTMLBrowser unBrowserHandle );
  void bbSteamAPI_ISteamHTMLSurface_PasteFromClipboard( ISteamHTMLSurface * Self, HHTMLBrowser unBrowserHandle );
  void bbSteamAPI_ISteamHTMLSurface_Find( ISteamHTMLSurface * Self, HHTMLBrowser unBrowserHandle, const char * pchSearchStr, bool bCurrentlyInFind, bool bReverse );
  void bbSteamAPI_ISteamHTMLSurface_StopFind( ISteamHTMLSurface * Self, HHTMLBrowser unBrowserHandle );
  void bbSteamAPI_ISteamHTMLSurface_GetLinkAtPosition( ISteamHTMLSurface * Self, HHTMLBrowser unBrowserHandle, int x, int y );
  void bbSteamAPI_ISteamHTMLSurface_SetCookie( ISteamHTMLSurface * Self, const char * pchHostname, const char * pchKey, const char * pchValue, const char * pchPath, RTime32 nExpires, bool bSecure, bool bHTTPOnly );
  void bbSteamAPI_ISteamHTMLSurface_SetPageScaleFactor( ISteamHTMLSurface * Self, HHTMLBrowser unBrowserHandle, float flZoom, int nPointX, int nPointY );
  void bbSteamAPI_ISteamHTMLSurface_SetBackgroundMode( ISteamHTMLSurface * Self, HHTMLBrowser unBrowserHandle, bool bBackgroundMode );
  void bbSteamAPI_ISteamHTMLSurface_SetDPIScalingFactor( ISteamHTMLSurface * Self, HHTMLBrowser unBrowserHandle, float flDPIScaling );
  void bbSteamAPI_ISteamHTMLSurface_OpenDeveloperTools( ISteamHTMLSurface * Self, HHTMLBrowser unBrowserHandle );
  void bbSteamAPI_ISteamHTMLSurface_AllowStartRequest( ISteamHTMLSurface * Self, HHTMLBrowser unBrowserHandle, bool bAllowed );
  void bbSteamAPI_ISteamHTMLSurface_JSDialogResponse( ISteamHTMLSurface * Self, HHTMLBrowser unBrowserHandle, bool bResult );
  void bbSteamAPI_ISteamHTMLSurface_FileLoadDialogResponse( ISteamHTMLSurface * Self, HHTMLBrowser unBrowserHandle, const char ** pchSelectedFiles );
  EResult bbSteamAPI_ISteamInventory_GetResultStatus( ISteamInventory * Self, SteamInventoryResult_t resultHandle );
  bool bbSteamAPI_ISteamInventory_GetResultItems( ISteamInventory * Self, SteamInventoryResult_t resultHandle, SteamItemDetails_t * pOutItemsArray, uint32 * punOutItemsArraySize );
  bool bbSteamAPI_ISteamInventory_GetResultItemProperty( ISteamInventory * Self, SteamInventoryResult_t resultHandle, uint32 unItemIndex, const char * pchPropertyName, char * pchValueBuffer, uint32 * punValueBufferSizeOut );
  uint32 bbSteamAPI_ISteamInventory_GetResultTimestamp( ISteamInventory * Self, SteamInventoryResult_t resultHandle );
  bool bbSteamAPI_ISteamInventory_CheckResultSteamID( ISteamInventory * Self, SteamInventoryResult_t resultHandle, uint64_steamid steamIDExpected );
  void bbSteamAPI_ISteamInventory_DestroyResult( ISteamInventory * Self, SteamInventoryResult_t resultHandle );
  bool bbSteamAPI_ISteamInventory_GetAllItems( ISteamInventory * Self, SteamInventoryResult_t * pResultHandle );
  bool bbSteamAPI_ISteamInventory_GetItemsByID( ISteamInventory * Self, SteamInventoryResult_t * pResultHandle, const SteamItemInstanceID_t * pInstanceIDs, uint32 unCountInstanceIDs );
  bool bbSteamAPI_ISteamInventory_SerializeResult( ISteamInventory * Self, SteamInventoryResult_t resultHandle, void * pOutBuffer, uint32 * punOutBufferSize );
  bool bbSteamAPI_ISteamInventory_DeserializeResult( ISteamInventory * Self, SteamInventoryResult_t * pOutResultHandle, const void * pBuffer, uint32 unBufferSize, bool bRESERVED_MUST_BE_FALSE );
  bool bbSteamAPI_ISteamInventory_GenerateItems( ISteamInventory * Self, SteamInventoryResult_t * pResultHandle, const SteamItemDef_t * pArrayItemDefs, const uint32 * punArrayQuantity, uint32 unArrayLength );
  bool bbSteamAPI_ISteamInventory_GrantPromoItems( ISteamInventory * Self, SteamInventoryResult_t * pResultHandle );
  bool bbSteamAPI_ISteamInventory_AddPromoItem( ISteamInventory * Self, SteamInventoryResult_t * pResultHandle, SteamItemDef_t itemDef );
  bool bbSteamAPI_ISteamInventory_AddPromoItems( ISteamInventory * Self, SteamInventoryResult_t * pResultHandle, const SteamItemDef_t * pArrayItemDefs, uint32 unArrayLength );
  bool bbSteamAPI_ISteamInventory_ConsumeItem( ISteamInventory * Self, SteamInventoryResult_t * pResultHandle, SteamItemInstanceID_t itemConsume, uint32 unQuantity );
  bool bbSteamAPI_ISteamInventory_ExchangeItems( ISteamInventory * Self, SteamInventoryResult_t * pResultHandle, const SteamItemDef_t * pArrayGenerate, const uint32 * punArrayGenerateQuantity, uint32 unArrayGenerateLength, const SteamItemInstanceID_t * pArrayDestroy, const uint32 * punArrayDestroyQuantity, uint32 unArrayDestroyLength );
  bool bbSteamAPI_ISteamInventory_TransferItemQuantity( ISteamInventory * Self, SteamInventoryResult_t * pResultHandle, SteamItemInstanceID_t itemIdSource, uint32 unQuantity, SteamItemInstanceID_t itemIdDest );
  void bbSteamAPI_ISteamInventory_SendItemDropHeartbeat( ISteamInventory * Self );
  bool bbSteamAPI_ISteamInventory_TriggerItemDrop( ISteamInventory * Self, SteamInventoryResult_t * pResultHandle, SteamItemDef_t dropListDefinition );
  bool bbSteamAPI_ISteamInventory_TradeItems( ISteamInventory * Self, SteamInventoryResult_t * pResultHandle, uint64_steamid steamIDTradePartner, const SteamItemInstanceID_t * pArrayGive, const uint32 * pArrayGiveQuantity, uint32 nArrayGiveLength, const SteamItemInstanceID_t * pArrayGet, const uint32 * pArrayGetQuantity, uint32 nArrayGetLength );
  bool bbSteamAPI_ISteamInventory_LoadItemDefinitions( ISteamInventory * Self );
  bool bbSteamAPI_ISteamInventory_GetItemDefinitionIDs( ISteamInventory * Self, SteamItemDef_t * pItemDefIDs, uint32 * punItemDefIDsArraySize );
  bool bbSteamAPI_ISteamInventory_GetItemDefinitionProperty( ISteamInventory * Self, SteamItemDef_t iDefinition, const char * pchPropertyName, char * pchValueBuffer, uint32 * punValueBufferSizeOut );
  SteamAPICall_t bbSteamAPI_ISteamInventory_RequestEligiblePromoItemDefinitionsIDs( ISteamInventory * Self, uint64_steamid steamID );
  bool bbSteamAPI_ISteamInventory_GetEligiblePromoItemDefinitionIDs( ISteamInventory * Self, uint64_steamid steamID, SteamItemDef_t * pItemDefIDs, uint32 * punItemDefIDsArraySize );
  SteamAPICall_t bbSteamAPI_ISteamInventory_StartPurchase( ISteamInventory * Self, const SteamItemDef_t * pArrayItemDefs, const uint32 * punArrayQuantity, uint32 unArrayLength );
  SteamAPICall_t bbSteamAPI_ISteamInventory_RequestPrices( ISteamInventory * Self );
  uint32 bbSteamAPI_ISteamInventory_GetNumItemsWithPrices( ISteamInventory * Self );
  bool bbSteamAPI_ISteamInventory_GetItemsWithPrices( ISteamInventory * Self, SteamItemDef_t * pArrayItemDefs, uint64 * pCurrentPrices, uint64 * pBasePrices, uint32 unArrayLength );
  bool bbSteamAPI_ISteamInventory_GetItemPrice( ISteamInventory * Self, SteamItemDef_t iDefinition, uint64 * pCurrentPrice, uint64 * pBasePrice );
  SteamInventoryUpdateHandle_t bbSteamAPI_ISteamInventory_StartUpdateProperties( ISteamInventory * Self );
  bool bbSteamAPI_ISteamInventory_RemoveProperty( ISteamInventory * Self, SteamInventoryUpdateHandle_t handle, SteamItemInstanceID_t nItemID, const char * pchPropertyName );
  bool bbSteamAPI_ISteamInventory_SetPropertyString( ISteamInventory * Self, SteamInventoryUpdateHandle_t handle, SteamItemInstanceID_t nItemID, const char * pchPropertyName, const char * pchPropertyValue );
  bool bbSteamAPI_ISteamInventory_SetPropertyBool( ISteamInventory * Self, SteamInventoryUpdateHandle_t handle, SteamItemInstanceID_t nItemID, const char * pchPropertyName, bool bValue );
  bool bbSteamAPI_ISteamInventory_SetPropertyInt64( ISteamInventory * Self, SteamInventoryUpdateHandle_t handle, SteamItemInstanceID_t nItemID, const char * pchPropertyName, int64 nValue );
  bool bbSteamAPI_ISteamInventory_SetPropertyFloat( ISteamInventory * Self, SteamInventoryUpdateHandle_t handle, SteamItemInstanceID_t nItemID, const char * pchPropertyName, float flValue );
  bool bbSteamAPI_ISteamInventory_SubmitUpdateProperties( ISteamInventory * Self, SteamInventoryUpdateHandle_t handle, SteamInventoryResult_t * pResultHandle );
  void bbSteamAPI_ISteamVideo_GetVideoURL( ISteamVideo * Self, AppId_t unVideoAppID );
  bool bbSteamAPI_ISteamVideo_IsBroadcasting( ISteamVideo * Self, int * pnNumViewers );
  void bbSteamAPI_ISteamVideo_GetOPFSettings( ISteamVideo * Self, AppId_t unVideoAppID );
  bool bbSteamAPI_ISteamVideo_GetOPFStringForApp( ISteamVideo * Self, AppId_t unVideoAppID, char * pchBuffer, int32 * pnBufferSize );
  bool bbSteamAPI_ISteamTV_IsBroadcasting( ISteamTV * Self, int * pnNumViewers );
  void bbSteamAPI_ISteamTV_AddBroadcastGameData( ISteamTV * Self, const char * pchKey, const char * pchValue );
  void bbSteamAPI_ISteamTV_RemoveBroadcastGameData( ISteamTV * Self, const char * pchKey );
  void bbSteamAPI_ISteamTV_AddTimelineMarker( ISteamTV * Self, const char * pchTemplateName, bool bPersistent, uint8 nColorR, uint8 nColorG, uint8 nColorB );
  void bbSteamAPI_ISteamTV_RemoveTimelineMarker( ISteamTV * Self );
  uint32 bbSteamAPI_ISteamTV_AddRegion( ISteamTV * Self, const char * pchElementName, const char * pchTimelineDataSection, const SteamTVRegion_t * pSteamTVRegion, ESteamTVRegionBehavior eSteamTVRegionBehavior );
  void bbSteamAPI_ISteamTV_RemoveRegion( ISteamTV * Self, uint32 unRegionHandle );
  bool bbSteamAPI_ISteamParentalSettings_BIsParentalLockEnabled( ISteamParentalSettings * Self );
  bool bbSteamAPI_ISteamParentalSettings_BIsParentalLockLocked( ISteamParentalSettings * Self );
  bool bbSteamAPI_ISteamParentalSettings_BIsAppBlocked( ISteamParentalSettings * Self, AppId_t nAppID );
  bool bbSteamAPI_ISteamParentalSettings_BIsAppInBlockList( ISteamParentalSettings * Self, AppId_t nAppID );
  bool bbSteamAPI_ISteamParentalSettings_BIsFeatureBlocked( ISteamParentalSettings * Self, EParentalFeature eFeature );
  bool bbSteamAPI_ISteamParentalSettings_BIsFeatureInBlockList( ISteamParentalSettings * Self, EParentalFeature eFeature );
  uint32 bbSteamAPI_ISteamRemotePlay_GetSessionCount( ISteamRemotePlay * Self );
  RemotePlaySessionID_t bbSteamAPI_ISteamRemotePlay_GetSessionID( ISteamRemotePlay * Self, int iSessionIndex );
  CSteamID bbSteamAPI_ISteamRemotePlay_GetSessionSteamID( ISteamRemotePlay * Self, RemotePlaySessionID_t unSessionID );
  const char * bbSteamAPI_ISteamRemotePlay_GetSessionClientName( ISteamRemotePlay * Self, RemotePlaySessionID_t unSessionID );
  ESteamDeviceFormFactor bbSteamAPI_ISteamRemotePlay_GetSessionClientFormFactor( ISteamRemotePlay * Self, RemotePlaySessionID_t unSessionID );
  bool bbSteamAPI_ISteamRemotePlay_BGetSessionClientResolution( ISteamRemotePlay * Self, RemotePlaySessionID_t unSessionID, int * pnResolutionX, int * pnResolutionY );
  bool bbSteamAPI_ISteamRemotePlay_BSendRemotePlayTogetherInvite( ISteamRemotePlay * Self, uint64_steamid steamIDFriend );
  HSteamListenSocket bbSteamAPI_ISteamNetworkingSockets_CreateListenSocketIP( ISteamNetworkingSockets * Self, const SteamNetworkingIPAddr & localAddress, int nOptions, const SteamNetworkingConfigValue_t * pOptions );
  HSteamNetConnection bbSteamAPI_ISteamNetworkingSockets_ConnectByIPAddress( ISteamNetworkingSockets * Self, const SteamNetworkingIPAddr & address, int nOptions, const SteamNetworkingConfigValue_t * pOptions );
  HSteamListenSocket bbSteamAPI_ISteamNetworkingSockets_CreateListenSocketP2P( ISteamNetworkingSockets * Self, int nVirtualPort, int nOptions, const SteamNetworkingConfigValue_t * pOptions );
  HSteamNetConnection bbSteamAPI_ISteamNetworkingSockets_ConnectP2P( ISteamNetworkingSockets * Self, const SteamNetworkingIdentity & identityRemote, int nVirtualPort, int nOptions, const SteamNetworkingConfigValue_t * pOptions );
  EResult bbSteamAPI_ISteamNetworkingSockets_AcceptConnection( ISteamNetworkingSockets * Self, HSteamNetConnection hConn );
  bool bbSteamAPI_ISteamNetworkingSockets_CloseConnection( ISteamNetworkingSockets * Self, HSteamNetConnection hPeer, int nReason, const char * pszDebug, bool bEnableLinger );
  bool bbSteamAPI_ISteamNetworkingSockets_CloseListenSocket( ISteamNetworkingSockets * Self, HSteamListenSocket hSocket );
  bool bbSteamAPI_ISteamNetworkingSockets_SetConnectionUserData( ISteamNetworkingSockets * Self, HSteamNetConnection hPeer, int64 nUserData );
  int64 bbSteamAPI_ISteamNetworkingSockets_GetConnectionUserData( ISteamNetworkingSockets * Self, HSteamNetConnection hPeer );
  void bbSteamAPI_ISteamNetworkingSockets_SetConnectionName( ISteamNetworkingSockets * Self, HSteamNetConnection hPeer, const char * pszName );
  bool bbSteamAPI_ISteamNetworkingSockets_GetConnectionName( ISteamNetworkingSockets * Self, HSteamNetConnection hPeer, char * pszName, int nMaxLen );
  EResult bbSteamAPI_ISteamNetworkingSockets_SendMessageToConnection( ISteamNetworkingSockets * Self, HSteamNetConnection hConn, const void * pData, uint32 cbData, int nSendFlags, int64 * pOutMessageNumber );
  void bbSteamAPI_ISteamNetworkingSockets_SendMessages( ISteamNetworkingSockets * Self, int nMessages, SteamNetworkingMessage_t *const * pMessages, int64 * pOutMessageNumberOrResult );
  EResult bbSteamAPI_ISteamNetworkingSockets_FlushMessagesOnConnection( ISteamNetworkingSockets * Self, HSteamNetConnection hConn );
  int bbSteamAPI_ISteamNetworkingSockets_ReceiveMessagesOnConnection( ISteamNetworkingSockets * Self, HSteamNetConnection hConn, SteamNetworkingMessage_t ** ppOutMessages, int nMaxMessages );
  bool bbSteamAPI_ISteamNetworkingSockets_GetConnectionInfo( ISteamNetworkingSockets * Self, HSteamNetConnection hConn, SteamNetConnectionInfo_t * pInfo );
  bool bbSteamAPI_ISteamNetworkingSockets_GetQuickConnectionStatus( ISteamNetworkingSockets * Self, HSteamNetConnection hConn, SteamNetworkingQuickConnectionStatus * pStats );
  int bbSteamAPI_ISteamNetworkingSockets_GetDetailedConnectionStatus( ISteamNetworkingSockets * Self, HSteamNetConnection hConn, char * pszBuf, int cbBuf );
  bool bbSteamAPI_ISteamNetworkingSockets_GetListenSocketAddress( ISteamNetworkingSockets * Self, HSteamListenSocket hSocket, SteamNetworkingIPAddr * address );
  bool bbSteamAPI_ISteamNetworkingSockets_CreateSocketPair( ISteamNetworkingSockets * Self, HSteamNetConnection * pOutConnection1, HSteamNetConnection * pOutConnection2, bool bUseNetworkLoopback, const SteamNetworkingIdentity * pIdentity1, const SteamNetworkingIdentity * pIdentity2 );
  bool bbSteamAPI_ISteamNetworkingSockets_GetIdentity( ISteamNetworkingSockets * Self, SteamNetworkingIdentity * pIdentity );
  ESteamNetworkingAvailability bbSteamAPI_ISteamNetworkingSockets_InitAuthentication( ISteamNetworkingSockets * Self );
  ESteamNetworkingAvailability bbSteamAPI_ISteamNetworkingSockets_GetAuthenticationStatus( ISteamNetworkingSockets * Self, SteamNetAuthenticationStatus_t * pDetails );
  HSteamNetPollGroup bbSteamAPI_ISteamNetworkingSockets_CreatePollGroup( ISteamNetworkingSockets * Self );
  bool bbSteamAPI_ISteamNetworkingSockets_DestroyPollGroup( ISteamNetworkingSockets * Self, HSteamNetPollGroup hPollGroup );
  bool bbSteamAPI_ISteamNetworkingSockets_SetConnectionPollGroup( ISteamNetworkingSockets * Self, HSteamNetConnection hConn, HSteamNetPollGroup hPollGroup );
  int bbSteamAPI_ISteamNetworkingSockets_ReceiveMessagesOnPollGroup( ISteamNetworkingSockets * Self, HSteamNetPollGroup hPollGroup, SteamNetworkingMessage_t ** ppOutMessages, int nMaxMessages );
  bool bbSteamAPI_ISteamNetworkingSockets_ReceivedRelayAuthTicket( ISteamNetworkingSockets * Self, const void * pvTicket, int cbTicket, SteamDatagramRelayAuthTicket * pOutParsedTicket );
  int bbSteamAPI_ISteamNetworkingSockets_FindRelayAuthTicketForServer( ISteamNetworkingSockets * Self, const SteamNetworkingIdentity & identityGameServer, int nVirtualPort, SteamDatagramRelayAuthTicket * pOutParsedTicket );
  HSteamNetConnection bbSteamAPI_ISteamNetworkingSockets_ConnectToHostedDedicatedServer( ISteamNetworkingSockets * Self, const SteamNetworkingIdentity & identityTarget, int nVirtualPort, int nOptions, const SteamNetworkingConfigValue_t * pOptions );
  uint16 bbSteamAPI_ISteamNetworkingSockets_GetHostedDedicatedServerPort( ISteamNetworkingSockets * Self );
  SteamNetworkingPOPID bbSteamAPI_ISteamNetworkingSockets_GetHostedDedicatedServerPOPID( ISteamNetworkingSockets * Self );
  EResult bbSteamAPI_ISteamNetworkingSockets_GetHostedDedicatedServerAddress( ISteamNetworkingSockets * Self, SteamDatagramHostedAddress * pRouting );
  HSteamListenSocket bbSteamAPI_ISteamNetworkingSockets_CreateHostedDedicatedServerListenSocket( ISteamNetworkingSockets * Self, int nVirtualPort, int nOptions, const SteamNetworkingConfigValue_t * pOptions );
  EResult bbSteamAPI_ISteamNetworkingSockets_GetGameCoordinatorServerLogin( ISteamNetworkingSockets * Self, SteamDatagramGameCoordinatorServerLogin * pLoginInfo, int * pcbSignedBlob, void * pBlob );
  HSteamNetConnection bbSteamAPI_ISteamNetworkingSockets_ConnectP2PCustomSignaling( ISteamNetworkingSockets * Self, ISteamNetworkingConnectionCustomSignaling * pSignaling, const SteamNetworkingIdentity * pPeerIdentity, int nOptions, const SteamNetworkingConfigValue_t * pOptions );
  bool bbSteamAPI_ISteamNetworkingSockets_ReceivedP2PCustomSignal( ISteamNetworkingSockets * Self, const void * pMsg, int cbMsg, ISteamNetworkingCustomSignalingRecvContext * pContext );
  bool bbSteamAPI_ISteamNetworkingSockets_GetCertificateRequest( ISteamNetworkingSockets * Self, int * pcbBlob, void * pBlob, SteamNetworkingErrMsg & errMsg );
  bool bbSteamAPI_ISteamNetworkingSockets_SetCertificate( ISteamNetworkingSockets * Self, const void * pCertificate, int cbCertificate, SteamNetworkingErrMsg & errMsg );
  bool bbSteamAPI_ISteamNetworkingConnectionCustomSignaling_SendSignal( ISteamNetworkingConnectionCustomSignaling * Self, HSteamNetConnection hConn, const SteamNetConnectionInfo_t & info, const void * pMsg, int cbMsg );
  void bbSteamAPI_ISteamNetworkingConnectionCustomSignaling_Release( ISteamNetworkingConnectionCustomSignaling * Self );
  ISteamNetworkingConnectionCustomSignaling * bbSteamAPI_ISteamNetworkingCustomSignalingRecvContext_OnConnectRequest( ISteamNetworkingCustomSignalingRecvContext * Self, HSteamNetConnection hConn, const SteamNetworkingIdentity & identityPeer );
  void bbSteamAPI_ISteamNetworkingCustomSignalingRecvContext_SendRejectionSignal( ISteamNetworkingCustomSignalingRecvContext * Self, const SteamNetworkingIdentity & identityPeer, const void * pMsg, int cbMsg );
  SteamNetworkingMessage_t * bbSteamAPI_ISteamNetworkingUtils_AllocateMessage( ISteamNetworkingUtils * Self, int cbAllocateBuffer );
  void bbSteamAPI_ISteamNetworkingUtils_InitRelayNetworkAccess( ISteamNetworkingUtils * Self );
  ESteamNetworkingAvailability bbSteamAPI_ISteamNetworkingUtils_GetRelayNetworkStatus( ISteamNetworkingUtils * Self, SteamRelayNetworkStatus_t * pDetails );
  float bbSteamAPI_ISteamNetworkingUtils_GetLocalPingLocation( ISteamNetworkingUtils * Self, SteamNetworkPingLocation_t & result );
  int bbSteamAPI_ISteamNetworkingUtils_EstimatePingTimeBetweenTwoLocations( ISteamNetworkingUtils * Self, const SteamNetworkPingLocation_t & location1, const SteamNetworkPingLocation_t & location2 );
  int bbSteamAPI_ISteamNetworkingUtils_EstimatePingTimeFromLocalHost( ISteamNetworkingUtils * Self, const SteamNetworkPingLocation_t & remoteLocation );
  void bbSteamAPI_ISteamNetworkingUtils_ConvertPingLocationToString( ISteamNetworkingUtils * Self, const SteamNetworkPingLocation_t & location, char * pszBuf, int cchBufSize );
  bool bbSteamAPI_ISteamNetworkingUtils_ParsePingLocationString( ISteamNetworkingUtils * Self, const char * pszString, SteamNetworkPingLocation_t & result );
  bool bbSteamAPI_ISteamNetworkingUtils_CheckPingDataUpToDate( ISteamNetworkingUtils * Self, float flMaxAgeSeconds );
  int bbSteamAPI_ISteamNetworkingUtils_GetPingToDataCenter( ISteamNetworkingUtils * Self, SteamNetworkingPOPID popID, SteamNetworkingPOPID * pViaRelayPoP );
  int bbSteamAPI_ISteamNetworkingUtils_GetDirectPingToPOP( ISteamNetworkingUtils * Self, SteamNetworkingPOPID popID );
  int bbSteamAPI_ISteamNetworkingUtils_GetPOPCount( ISteamNetworkingUtils * Self );
  int bbSteamAPI_ISteamNetworkingUtils_GetPOPList( ISteamNetworkingUtils * Self, SteamNetworkingPOPID * list, int nListSz );
  SteamNetworkingMicroseconds bbSteamAPI_ISteamNetworkingUtils_GetLocalTimestamp( ISteamNetworkingUtils * Self );
  void bbSteamAPI_ISteamNetworkingUtils_SetDebugOutputFunction( ISteamNetworkingUtils * Self, ESteamNetworkingSocketsDebugOutputType eDetailLevel, FSteamNetworkingSocketsDebugOutput pfnFunc );
  bool bbSteamAPI_ISteamNetworkingUtils_SetGlobalConfigValueInt32( ISteamNetworkingUtils * Self, ESteamNetworkingConfigValue eValue, int32 val );
  bool bbSteamAPI_ISteamNetworkingUtils_SetGlobalConfigValueFloat( ISteamNetworkingUtils * Self, ESteamNetworkingConfigValue eValue, float val );
  bool bbSteamAPI_ISteamNetworkingUtils_SetGlobalConfigValueString( ISteamNetworkingUtils * Self, ESteamNetworkingConfigValue eValue, const char * val );
  bool bbSteamAPI_ISteamNetworkingUtils_SetConnectionConfigValueInt32( ISteamNetworkingUtils * Self, HSteamNetConnection hConn, ESteamNetworkingConfigValue eValue, int32 val );
  bool bbSteamAPI_ISteamNetworkingUtils_SetConnectionConfigValueFloat( ISteamNetworkingUtils * Self, HSteamNetConnection hConn, ESteamNetworkingConfigValue eValue, float val );
  bool bbSteamAPI_ISteamNetworkingUtils_SetConnectionConfigValueString( ISteamNetworkingUtils * Self, HSteamNetConnection hConn, ESteamNetworkingConfigValue eValue, const char * val );
  bool bbSteamAPI_ISteamNetworkingUtils_SetConfigValue( ISteamNetworkingUtils * Self, ESteamNetworkingConfigValue eValue, ESteamNetworkingConfigScope eScopeType, intptr_t scopeObj, ESteamNetworkingConfigDataType eDataType, const void * pArg );
  bool bbSteamAPI_ISteamNetworkingUtils_SetConfigValueStruct( ISteamNetworkingUtils * Self, const SteamNetworkingConfigValue_t & opt, ESteamNetworkingConfigScope eScopeType, intptr_t scopeObj );
  ESteamNetworkingGetConfigValueResult bbSteamAPI_ISteamNetworkingUtils_GetConfigValue( ISteamNetworkingUtils * Self, ESteamNetworkingConfigValue eValue, ESteamNetworkingConfigScope eScopeType, intptr_t scopeObj, ESteamNetworkingConfigDataType * pOutDataType, void * pResult, size_t * cbResult );
  bool bbSteamAPI_ISteamNetworkingUtils_GetConfigValueInfo( ISteamNetworkingUtils * Self, ESteamNetworkingConfigValue eValue, const char ** pOutName, ESteamNetworkingConfigDataType * pOutDataType, ESteamNetworkingConfigScope * pOutScope, ESteamNetworkingConfigValue * pOutNextValue );
  ESteamNetworkingConfigValue bbSteamAPI_ISteamNetworkingUtils_GetFirstConfigValue( ISteamNetworkingUtils * Self );
  void bbSteamAPI_ISteamNetworkingUtils_SteamNetworkingIPAddr_ToString( ISteamNetworkingUtils * Self, const SteamNetworkingIPAddr & addr, char * buf, uint32 cbBuf, bool bWithPort );
  bool bbSteamAPI_ISteamNetworkingUtils_SteamNetworkingIPAddr_ParseString( ISteamNetworkingUtils * Self, SteamNetworkingIPAddr * pAddr, const char * pszStr );
  void bbSteamAPI_ISteamNetworkingUtils_SteamNetworkingIdentity_ToString( ISteamNetworkingUtils * Self, const SteamNetworkingIdentity & identity, char * buf, uint32 cbBuf );
  bool bbSteamAPI_ISteamNetworkingUtils_SteamNetworkingIdentity_ParseString( ISteamNetworkingUtils * Self, SteamNetworkingIdentity * pIdentity, const char * pszStr );
  void bbSteamAPI_ISteamGameServer_SetProduct( ISteamGameServer * Self, const char * pszProduct );
  void bbSteamAPI_ISteamGameServer_SetGameDescription( ISteamGameServer * Self, const char * pszGameDescription );
  void bbSteamAPI_ISteamGameServer_SetModDir( ISteamGameServer * Self, const char * pszModDir );
  void bbSteamAPI_ISteamGameServer_SetDedicatedServer( ISteamGameServer * Self, bool bDedicated );
  void bbSteamAPI_ISteamGameServer_LogOn( ISteamGameServer * Self, const char * pszToken );
  void bbSteamAPI_ISteamGameServer_LogOnAnonymous( ISteamGameServer * Self );
  void bbSteamAPI_ISteamGameServer_LogOff( ISteamGameServer * Self );
  bool bbSteamAPI_ISteamGameServer_BLoggedOn( ISteamGameServer * Self );
  bool bbSteamAPI_ISteamGameServer_BSecure( ISteamGameServer * Self );
  CSteamID bbSteamAPI_ISteamGameServer_GetSteamID( ISteamGameServer * Self );
  bool bbSteamAPI_ISteamGameServer_WasRestartRequested( ISteamGameServer * Self );
  void bbSteamAPI_ISteamGameServer_SetMaxPlayerCount( ISteamGameServer * Self, int cPlayersMax );
  void bbSteamAPI_ISteamGameServer_SetBotPlayerCount( ISteamGameServer * Self, int cBotplayers );
  void bbSteamAPI_ISteamGameServer_SetServerName( ISteamGameServer * Self, const char * pszServerName );
  void bbSteamAPI_ISteamGameServer_SetMapName( ISteamGameServer * Self, const char * pszMapName );
  void bbSteamAPI_ISteamGameServer_SetPasswordProtected( ISteamGameServer * Self, bool bPasswordProtected );
  void bbSteamAPI_ISteamGameServer_SetSpectatorPort( ISteamGameServer * Self, uint16 unSpectatorPort );
  void bbSteamAPI_ISteamGameServer_SetSpectatorServerName( ISteamGameServer * Self, const char * pszSpectatorServerName );
  void bbSteamAPI_ISteamGameServer_ClearAllKeyValues( ISteamGameServer * Self );
  void bbSteamAPI_ISteamGameServer_SetKeyValue( ISteamGameServer * Self, const char * pKey, const char * pValue );
  void bbSteamAPI_ISteamGameServer_SetGameTags( ISteamGameServer * Self, const char * pchGameTags );
  void bbSteamAPI_ISteamGameServer_SetGameData( ISteamGameServer * Self, const char * pchGameData );
  void bbSteamAPI_ISteamGameServer_SetRegion( ISteamGameServer * Self, const char * pszRegion );
  bool bbSteamAPI_ISteamGameServer_SendUserConnectAndAuthenticate( ISteamGameServer * Self, uint32 unIPClient, const void * pvAuthBlob, uint32 cubAuthBlobSize, CSteamID * pSteamIDUser );
  CSteamID bbSteamAPI_ISteamGameServer_CreateUnauthenticatedUserConnection( ISteamGameServer * Self );
  void bbSteamAPI_ISteamGameServer_SendUserDisconnect( ISteamGameServer * Self, uint64_steamid steamIDUser );
  bool bbSteamAPI_ISteamGameServer_BUpdateUserData( ISteamGameServer * Self, uint64_steamid steamIDUser, const char * pchPlayerName, uint32 uScore );
  HAuthTicket bbSteamAPI_ISteamGameServer_GetAuthSessionTicket( ISteamGameServer * Self, void * pTicket, int cbMaxTicket, uint32 * pcbTicket );
  EBeginAuthSessionResult bbSteamAPI_ISteamGameServer_BeginAuthSession( ISteamGameServer * Self, const void * pAuthTicket, int cbAuthTicket, uint64_steamid steamID );
  void bbSteamAPI_ISteamGameServer_EndAuthSession( ISteamGameServer * Self, uint64_steamid steamID );
  void bbSteamAPI_ISteamGameServer_CancelAuthTicket( ISteamGameServer * Self, HAuthTicket hAuthTicket );
  EUserHasLicenseForAppResult bbSteamAPI_ISteamGameServer_UserHasLicenseForApp( ISteamGameServer * Self, uint64_steamid steamID, AppId_t appID );
  bool bbSteamAPI_ISteamGameServer_RequestUserGroupStatus( ISteamGameServer * Self, uint64_steamid steamIDUser, uint64_steamid steamIDGroup );
  void bbSteamAPI_ISteamGameServer_GetGameplayStats( ISteamGameServer * Self );
  SteamAPICall_t bbSteamAPI_ISteamGameServer_GetServerReputation( ISteamGameServer * Self );
  SteamIPAddress_t bbSteamAPI_ISteamGameServer_GetPublicIP( ISteamGameServer * Self );
  bool bbSteamAPI_ISteamGameServer_HandleIncomingPacket( ISteamGameServer * Self, const void * pData, int cbData, uint32 srcIP, uint16 srcPort );
  int bbSteamAPI_ISteamGameServer_GetNextOutgoingPacket( ISteamGameServer * Self, void * pOut, int cbMaxOut, uint32 * pNetAdr, uint16 * pPort );
  void bbSteamAPI_ISteamGameServer_EnableHeartbeats( ISteamGameServer * Self, bool bActive );
  void bbSteamAPI_ISteamGameServer_SetHeartbeatInterval( ISteamGameServer * Self, int iHeartbeatInterval );
  void bbSteamAPI_ISteamGameServer_ForceHeartbeat( ISteamGameServer * Self );
  SteamAPICall_t bbSteamAPI_ISteamGameServer_AssociateWithClan( ISteamGameServer * Self, uint64_steamid steamIDClan );
  SteamAPICall_t bbSteamAPI_ISteamGameServer_ComputeNewPlayerCompatibility( ISteamGameServer * Self, uint64_steamid steamIDNewPlayer );
  SteamAPICall_t bbSteamAPI_ISteamGameServerStats_RequestUserStats( ISteamGameServerStats * Self, uint64_steamid steamIDUser );
  bool bbSteamAPI_ISteamGameServerStats_GetUserStatInt32( ISteamGameServerStats * Self, uint64_steamid steamIDUser, const char * pchName, int32 * pData );
  bool bbSteamAPI_ISteamGameServerStats_GetUserStatFloat( ISteamGameServerStats * Self, uint64_steamid steamIDUser, const char * pchName, float * pData );
  bool bbSteamAPI_ISteamGameServerStats_GetUserAchievement( ISteamGameServerStats * Self, uint64_steamid steamIDUser, const char * pchName, bool * pbAchieved );
  bool bbSteamAPI_ISteamGameServerStats_SetUserStatInt32( ISteamGameServerStats * Self, uint64_steamid steamIDUser, const char * pchName, int32 nData );
  bool bbSteamAPI_ISteamGameServerStats_SetUserStatFloat( ISteamGameServerStats * Self, uint64_steamid steamIDUser, const char * pchName, float fData );
  bool bbSteamAPI_ISteamGameServerStats_UpdateUserAvgRateStat( ISteamGameServerStats * Self, uint64_steamid steamIDUser, const char * pchName, float flCountThisSession, double dSessionLength );
  bool bbSteamAPI_ISteamGameServerStats_SetUserAchievement( ISteamGameServerStats * Self, uint64_steamid steamIDUser, const char * pchName );
  bool bbSteamAPI_ISteamGameServerStats_ClearUserAchievement( ISteamGameServerStats * Self, uint64_steamid steamIDUser, const char * pchName );
  SteamAPICall_t bbSteamAPI_ISteamGameServerStats_StoreUserStats( ISteamGameServerStats * Self, uint64_steamid steamIDUser );
