#!/usr/bin/env ruby

require 'open3'
require 'json'
require 'os'

PLATFORM = if ARGV.include?('--emscripten')
  'emscripten'
elsif ARGV.include?('--ios')
  'ios'
elsif OS.mac?
  'macos'
elsif OS.linux?
  'linux'
end

RUNTIME = if ARGV.include?('--test')
  'test'
else
  'opengl'
end

env, status = Open3.capture2(File.join(File.dirname(__FILE__), '..', '_release/bin/blitzcc -e'))
if status != 0
  puts env
  exit 1
end

env = env.strip

INCLUDE_PATH = File.expand_path(File.join(File.dirname(__FILE__), '..', 'src', 'modules'))
TOOLCHAINS_PATH = File.expand_path(File.join(File.dirname(__FILE__), '..', '_release', 'toolchains'))

IDENTIFIER_REGEX = /[A-Za-z0-9]+/

config = Dir.glob(File.join(TOOLCHAINS_PATH, PLATFORM, 'cfg', "*.#{env}.i")).inject({}) do |cfg, path|
  interface = File.open(path).read
  _, id      = interface.match(/^ID:(.*)$/).to_a.map(&:strip)
  _, modules = interface.match(/^MODULES:(.*)$/).to_a.map(&:strip)
  _, libs    = interface.match(/^LIBS:(.*)$/).to_a.map(&:strip)

  cfg[id] = {
    modules: modules.strip.split(';'),
    libs: libs.strip.split(';')
  }
  cfg
end

OPTIONS = if PLATFORM == 'emscripten'
  ['-s LEGACY_GL_EMULATION=1']
elsif PLATFORM == 'ios'
  XCODE_BASE     = "/Applications/Xcode.app/Contents"
  SIMULATOR_BASE = "#{XCODE_BASE}/Developer/Platforms/iPhoneSimulator.platform"
  FRAMEWORKS     = "#{SIMULATOR_BASE}/Developer/SDKs/iPhoneSimulator11.2.sdk/System/Library/Frameworks/"
  INCLUDES       = "#{SIMULATOR_BASE}/Developer/SDKs/iPhoneSimulator11.2.sdk/usr/include"

  [
    '-arch x86_64',
    '-mios-simulator-version-min=11',
    "-isysroot #{SIMULATOR_BASE}/Developer/SDKs/iPhoneSimulator.sdk"
  ]
else
  []
end

if env == 'test'
  OPTIONS << '-fprofile-arcs -ftest-coverage -O0 -rdynamic'
end

runtime = YAML.safe_load(File.open(File.expand_path(File.join(File.dirname(__FILE__), '..', 'src', 'runtime', RUNTIME, 'runtime.yml'))))

imported_modules = []

add = lambda do |mod|
  imported_modules << "bb.#{mod}"
  break if config["bb.#{mod}"].nil?

  config["bb.#{mod}"][:modules].each do |mod|
    add.call mod.gsub(/^bb\./, '')
  end
end

runtime['modules'].each &add

module_libs = []
system_libs = []

config.each_pair do |id, mod|
  next unless imported_modules.include?(id)

  module_libs << "-l#{id}"

  system_libs << mod[:libs].map do |lib|
    if lib =~ /^-framework/
      lib
    else
      "-l#{lib}"
    end
  end
end

module_libs.flatten!
system_libs.flatten!

puts "-Wno-int-conversion -Wno-constant-logical-operand #{OPTIONS.join(' ')} -I#{INCLUDE_PATH} -DBBMAIN -L#{File.join(TOOLCHAINS_PATH, PLATFORM, 'lib', env)} -lbb.stub -lruntime.#{RUNTIME}.static #{module_libs.join(' ')} #{module_libs.reverse.join(' ')} #{system_libs.join(' ')}"
